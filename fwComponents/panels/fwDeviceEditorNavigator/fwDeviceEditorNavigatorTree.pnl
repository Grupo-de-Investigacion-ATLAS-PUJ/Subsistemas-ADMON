<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8"></prop>
   <prop name="en_US.iso88591"></prop>
  </prop>
  <prop name="Size">285 385</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">20 15</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">VBox</prop>
  <prop name="sizePolicy">
   <sizePolicy vertical="MinimumExpanding" horizontal="MinimumExpanding"/>
  </prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[#uses &quot;fwNode/fwNode.ctl&quot;
#uses &quot;fwDevice/fwDevice.ctl&quot;
#uses &quot;fwDeviceEditorNavigator/fwDeviceEditorNavigator.ctl&quot;

const string SYSTEM_ICON = &quot;dptree/system.png&quot;;
const string NODE_ICON = &quot;dptree/struct.png&quot;;
const string DEVICE_ICON = &quot;automation/PLC.wmf&quot;;
string g_sTreeType;

// ------------------------------------------------------------------------------------------------

expand(string id)
{
  string name, dpName, iconFile;
  dyn_string children, treeChildren, childrenOfChild, exceptionInfo;
 
  if(this.parent(id) == &quot;&quot;)
  {
    initTree(id);
  }
  else
  {
    treeChildren = this.children(id);
    this.removeItems(treeChildren);
    
    fwDevice_getChildren(id, g_fwDEN_treeToHierarchy[g_sTreeType], children, exceptionInfo);
    
    // add all children of expanded node
    for (int i = 1; i &lt;= dynlen(children); i++)
    {
      fwDevice_getName(children[i], name, exceptionInfo);
      this.appendItem(id, children[i], name);
  	  this.setDragEnabled(children[i],true);

      
      // if we are in a logical hierarchy, convert to dp
      if(g_fwDEN_treeToHierarchy[g_sTreeType] == fwDevice_LOGICAL)
      {	
         dpName = dpSubStr(dpAliasToName(children[i]), DPSUB_SYS_DP);
      }
      else
      {
        dpName = children[i];
      }     
      
      // see which icon to display
      if(dpTypeName(dpName) == &quot;FwNode&quot;)
      {
        iconFile = getPath(ICONS_REL_PATH, NODE_ICON, 1, SEARCH_PATH_LEN);
        this.setIcon(children[i], 0, iconFile);
      }
      else
      {
        // iconFile = getPath(ICONS_REL_PATH, DEVICE_ICON, 1, SEARCH_PATH_LEN);
      }
      
      // If the node has more children add it as a branch
      fwDevice_getChildren(children[i], g_fwDEN_treeToHierarchy[g_sTreeType], childrenOfChild, exceptionInfo);
      
      if (dynlen(childrenOfChild) &gt; 0)
        this.setExpandable(children[i], TRUE);
      else
        this.setExpandable(children[i], FALSE);                                                                        									
    }
  }
}
 
// ------------------------------------------------------------------------------------------------

synchronized void initTree(string systemName)
{
  int i, j, result, position = 0;
  string nodeType, alias, iconFile, nodeName;
  dyn_uint systemIds;
  dyn_string nodes, children, treeChildren, systemNames, exceptionInfo;
  dyn_anytype node;			
  
  // FWDEN-52
  // Multiple columns of name 'Device' were created without this check
  int c;
  getValue(&quot;tree1&quot;,&quot;columns&quot;,c);
  if (c==0) {  
    tree1.addColumn(&quot;Device&quot;);
  }
  tree1.showHeader(FALSE);
  //tree1.selectionMode(&quot;Extended&quot;);
  tree1.selectionBehavior(&quot;0&quot;);

  // Check which systems have to be refreshed
  if(systemName == &quot;&quot;)
  {
    // initializing tree, update all systems
    result = getSystemNames(systemNames, systemIds);
  }
  else
  {
    // displaying only requested system
    systemNames[1] = systemName;	
  }
 
  // Check which type of root nodes we have to look for   
  nodeType = g_fwDEN_treeToNodeType[g_sTreeType];

  // Add all selected systems
  for(j = 1; j &lt;= dynlen(systemNames); j++)
  {
    if(strpos(systemNames[j], &quot;:&quot;) != (strlen(systemNames[j]) - 1))
    {
      systemNames[j] = systemNames[j] + &quot;:&quot;;
    }
    
    nodes = makeDynString();
                
    fwNode_getNodes(systemNames[j], nodeType, nodes, exceptionInfo);

    // if we are in a logical hierarchy, get the aliases
    if(g_fwDEN_treeToHierarchy[g_sTreeType] == fwDevice_LOGICAL)
    {
      for(i = 1; i &lt;= dynlen(nodes); i++)
      {
        alias = dpGetAlias(nodes[i] + &quot;.&quot;);
        nodes[i] = systemNames[j] + alias;
      }
    }
	
    // append the system node
    if(!tree1.itemExists(systemNames[j]))
    {
      tree1.appendItem(&quot;&quot;, systemNames[j], systemNames[j]);
      iconFile = getPath(ICONS_REL_PATH, SYSTEM_ICON, 1, SEARCH_PATH_LEN);
      tree1.setIcon(systemNames[j], 0, iconFile);
    }
    else
    {
      // remove children in case it is a refresh and children have changed
      treeChildren = tree1.children(systemNames[j]);
      tree1.removeItems(treeChildren);
    }
                
    // if there are nodes, expand it
    if (dynlen(nodes) &gt; 0)
      tree1.setOpen(systemNames[j], TRUE);
    
    for(i = 1; i &lt;= dynlen(nodes); i++)
    {
      fwDevice_getName(nodes[i], nodeName, exceptionInfo);
      
      // removal of cut mark only needed for the clipboard
      nodeName = strltrim(nodeName, fwDevice_HIERARCHY_LOGICAL_CUT);
      
      // remove PVSS alias mark
      nodeName = strltrim(nodeName, &quot;@&quot;);
      tree1.appendItem(systemNames[j], nodes[i], nodeName);
      iconFile = getPath(ICONS_REL_PATH, NODE_ICON, 1, SEARCH_PATH_LEN);

      tree1.setIcon(nodes[i], 0, iconFile);
  	  tree1.setDragEnabled(nodes[i],true);
      
      fwDevice_getChildren(nodes[i], g_fwDEN_treeToHierarchy[g_sTreeType], children, exceptionInfo);		                        
      if (dynlen(children) &gt; 0)
        tree1.setExpandable(nodes[i], TRUE);
      else
        tree1.setExpandable(nodes[i], FALSE);
    }
  }
}

// ------------------------------------------------------------------------------------------------

rightClickedHardware(string id, int column)
{
  bool  ok,
        isNode = FALSE, 
	isConfigurationDBInstalled = FALSE;
  unsigned parentPos;
  int answer, configurationDBInstalled;
  string dpName = id, panel, device; 
  const string 	ADD			= 1,
                REMOVE			= 2,
                SETTINGS		= 3,
                PROPERTIES		= 4,
                SIMPLE_SETTINGS = 5,
                INSTALLATION_TOOL	= 6,
                CONFIGURATIONDB_TOOL	= 7,
                USER_INTERFACE		= 8,
                CLONE			= 9,
                REGISTER_DEVICE_TYPE	= 10,
                INACTIVE_ALARMS		= 11,
                SYSTEM_SETTINGS		= 12;
  dyn_bool status;
  dyn_float df;
  dyn_string ds, menuEntries, exceptionInfo;
  dyn_dyn_string childrenDpTypesAndModels, panels;

  // check if an entry was selected in the tree
  if(id == &quot;&quot;)
    return;

  device = id;
	
  // get current status
  _fwDeviceEditorNavigator_getStatus(device, status, exceptionInfo);
	
  fwInstallation_componentInstalled(&quot;fwConfigurationDB&quot;, &quot;1.0&quot;, configurationDBInstalled);
  if(configurationDBInstalled != 0)
    isConfigurationDBInstalled = TRUE;

  // prepare entries for menu
  if(this.parent(id) == &quot;&quot;)
  {
    menuEntries = makeDynString(&quot;PUSH_BUTTON, System settings ..., &quot; + SYSTEM_SETTINGS + &quot;, &quot; + (int)status[fwDEN_STATUS_EDIT],
                                &quot;PUSH_BUTTON, Mass configuration ..., &quot; + SETTINGS + &quot;, &quot; + (int)status[fwDEN_STATUS_EDIT],
                                &quot;PUSH_BUTTON, Register device type ..., &quot; + REGISTER_DEVICE_TYPE + &quot;, &quot; + (int)status[fwDEN_STATUS_EDIT],
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Inactive alarms ..., &quot; + INACTIVE_ALARMS + &quot;, &quot; + (int)(!status[fwDEN_STATUS_EDIT]),
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Configuration DB ..., &quot; + CONFIGURATIONDB_TOOL + &quot;, &quot; + (int)(isConfigurationDBInstalled &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Installation tool ..., &quot; + INSTALLATION_TOOL + &quot;, &quot; + (int)status[fwDEN_STATUS_EDIT]);

    if(!status[fwDEN_STATUS_LOCAL])
      menuEntries[dynlen(menuEntries) + 1] = &quot;PUSH_BUTTON, Open GUI ..., &quot; + USER_INTERFACE + &quot;, 1&quot;;
			
    device = &quot;&quot;;
  }
  else
  {
    bool canHaveChildren = FALSE;
    dyn_string dpTypesList;
		
    if(dpTypeName(dpName) == &quot;FwNode&quot;)
    {
      isNode = true;
    }
		
    // check if the device can have children
    fwDevice_getPossibleChildren(makeDynString(dpName, &quot;&quot;, &quot;&quot;, &quot;&quot;), childrenDpTypesAndModels, exceptionInfo);

    if(dynlen(childrenDpTypesAndModels) &gt; 0)
    {
      canHaveChildren = TRUE;
    }	
		
    menuEntries = makeDynString(&quot;PUSH_BUTTON, Add ..., &quot; + ADD + &quot;, &quot; + (int)(status[fwDEN_STATUS_EDIT] &amp;&amp; canHaveChildren),
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Clone ..., &quot; + CLONE + &quot;, &quot; + (int)(!isNode &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Remove, &quot; + REMOVE + &quot;, &quot; + (int)(!isNode &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Mass configuration ..., &quot; + SETTINGS + &quot;, &quot; + (int)(status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Settings ..., &quot; + SIMPLE_SETTINGS + &quot;, &quot; + (int)(!isNode &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Properties ..., &quot; + PROPERTIES + &quot;, &quot; + (int)(!isNode &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;SEPARATOR&quot;,
				                        &quot;PUSH_BUTTON, Configuration DB ..., &quot; + CONFIGURATIONDB_TOOL + &quot;, &quot; + (int)(isConfigurationDBInstalled &amp;&amp; status[fwDEN_STATUS_EDIT]));
  }

  popupMenu(menuEntries, answer);

  switch(answer)
  {
    case ADD:
      fwDevice_openPanelAdd(makeDynString(dpName, &quot;&quot;, &quot;&quot;, &quot;&quot;), df, ds, exceptionInfo);
   			
      // refresh current node in the tree
      expand(id);
      break;
    case CLONE:
      ChildPanelOnCentralModalReturn(&quot;fwDevice/fwDeviceCopy.pnl&quot;,
                                     &quot;Clone Device&quot;,
                                     makeDynString(&quot;$sDpName:&quot; + dpName),
                                     df, ds);
      // refresh parent node in the tree
      expand(this.parent(id));
      break;
    case REMOVE:
      fwDevice_getPanels(makeDynString(dpName, &quot;&quot;, &quot;&quot;, &quot;&quot;), panels, exceptionInfo);

      if(panels[fwDevice_PANEL_EDITOR_HARDWARE_REMOVE] != &quot;&quot;)
      {
        ChildPanelOnCentralModalReturn(panels[fwDevice_PANEL_EDITOR_HARDWARE_REMOVE] + &quot;.pnl&quot;,
                                       &quot;Remove Device&quot;,
                                       makeDynString(&quot;$sDpName:&quot; + dpName),
                                       df, ds);
      }
      else
      {
        fwGeneral_openMessagePanel(&quot;Are you sure you want to remove the device and all its children from the system?&quot;,
                                   ok, exceptionInfo, &quot;Remove from system&quot;);
        if(ok)
        {
          fwOpenProgressBar(&quot;MyProgress&quot;, &quot;Removing device...&quot;, 1);
                  
          // TODO check that all selected items are from the same column (same hierarchy depth)
//           dyn_string dsSelectedItems = this.selectedItems();
//           DebugTN(dsSelectedItems);
//   
//           for(int i = 1; i &lt;= dynlen(dsSelectedItems); i++)
//           {
//             fwDevice_delete(dsSelectedItems[i], exceptionInfo);
//           }
          fwDevice_delete(dpName, exceptionInfo);
					
	        if(dynlen(exceptionInfo) &gt; 0)
          {
            fwExceptionHandling_display(exceptionInfo);
            fwCloseProgressBar(&quot;There were errors while removing the device(s).&quot;, 1);
          }
          else
          {
            fwCloseProgressBar(&quot;Device(s) removed successfully.&quot;, 1);
          }
	      }
      }
			
      // refresh parent node in the tree
      expand(this.parent(id));
      break;
    case SETTINGS:
      ChildPanelOnCentralModalReturn(&quot;fwDevice/fwDeviceMassConfiguration.pnl&quot;,
                                     &quot;Mass Configuration&quot;,
                                     makeDynString(&quot;$sDpName:&quot; + dpName,
                                                   &quot;$sHierarchyType:&quot; + fwDevice_HARDWARE),
                                                   df, ds);
      break;
    case SIMPLE_SETTINGS:
      ChildPanelOnCentralModal(&quot;fwDevice/fwDeviceSimpleConfiguration.pnl&quot;,
   								             &quot;Simple Settings&quot;,
   								             makeDynString(&quot;$sDpName:&quot; + dpName));
      break;
    case PROPERTIES:
      ChildPanelOnCentralModalReturn(&quot;fwDevice/fwDeviceProperties.pnl&quot;,
                                     &quot;fwDeviceProperties&quot;,
                                     makeDynString(&quot;$sDpName:&quot; + dpName),
                                     df, ds);
      break;
    case INSTALLATION_TOOL:
      ModuleOnWithPanel (&quot;Installation Tool&quot;,
                         0, 0, 0, 0, 1, 1, &quot;&quot;,
                         &quot;fwInstallation/fwInstallation.pnl&quot;, 
                         &quot;Installation Tool&quot;, 
                         makeDynString());
      break;
    case CONFIGURATIONDB_TOOL:
      ChildPanelOnCentralModalReturn(&quot;fwConfigurationDB/fwConfigurationDB.pnl&quot;,
                                     &quot;Configuration DB for &quot; + dpName,
                                     makeDynString(&quot;$sDpName:&quot; + dpName,
                                                   &quot;$sHierarchyType:&quot; + fwDevice_HARDWARE),
                                     df, ds);
      // refresh current node in the tree
      expand(id);
      break;
    case REGISTER_DEVICE_TYPE:
      ChildPanelOnCentralModalReturn(&quot;fwDevice/fwDeviceRegisterType.pnl&quot;, 
                                     &quot;Register new device type&quot;,
                                     makeDynString(),
                                     df, ds); 
      break;
    case USER_INTERFACE:
    {
      string os = getenv(&quot;OS&quot;), ipAddress, hostName, command;
      
      //fwGeneral_getSystemName(device, g_fwDEN_selectedSystem, exceptionInfo);
      fwGeneral_getSystemIpAddress(g_fwDEN_selectedSystem, ipAddress, hostName, exceptionInfo);
      if (dynlen(exceptionInfo)) {
        fwExceptionHandling_display(exceptionInfo);
        break;
      }
      if (_UNIX)
        command = &quot;WCCOAui -data &quot; + ipAddress + &quot; -event &quot; + ipAddress + &quot; -p fwDeviceEditorNavigator/fwDeviceEditorNavigator.pnl &amp;&quot;;
      else 
        command = &quot;start /b WCCOAui -data &quot; + ipAddress + &quot; -event &quot; + ipAddress + &quot; -p fwDeviceEditorNavigator/fwDeviceEditorNavigator.pnl&quot;;
      
      system(command); 
      break;
    }
    case INACTIVE_ALARMS:
      ChildPanelOnCentralModalReturn(&quot;fwDevice/fwDeviceSystemInactiveAlarms.pnl&quot;,
                                       &quot;List of inactive alarms&quot;,
                                       makeDynString(),
                                       df, ds);
      break;
    case SYSTEM_SETTINGS:
      ChildPanelOnCentralModal(&quot;fwGeneral/fwGeneralSystemSettings.pnl&quot;,
                               &quot;System Settings&quot;,
                               makeDynString());   										
      break;
    default:
      break;
  }

  if(dynlen(exceptionInfo) &gt; 0)
    fwExceptionHandling_display(exceptionInfo);
}

// ------------------------------------------------------------------------------------------------

rightClickedLogical(string id, int column)
{  
  bool  ok,
        isNode = FALSE,
        isConfigurationDBInstalled = FALSE;
  int answer, configurationDBInstalled;
  string dpName, dpAlias, dpAliasWithoutSN, deviceName, nodeType; 
  const string	ADD_NODE              = 1,
                ADD_FROM_HARDWARE     = 2,
                REMOVE                = 3,
                CUT                   = 4,
                PASTE                 = 5,
                SETTINGS              = 6,
                PROPERTIES            = 7,
                SIMPLE_SETTINGS       = 8,
                INSTALLATION_TOOL     = 9,
                CONFIGURATIONDB_TOOL  = 10,
                RENAME                = 11;
  dyn_bool status;
  dyn_float df;
  dyn_string ds, deviceObject, menuEntries, allowedDpTypes, exceptionInfo;

  // check if an entry was selected in the tree
  if(id == &quot;&quot;)
    return;

  // get current status
  _fwDeviceEditorNavigator_getStatus(id, status, exceptionInfo);
  
  fwInstallation_componentInstalled(&quot;fwConfigurationDB&quot;, &quot;1.0&quot;, configurationDBInstalled);
  if(configurationDBInstalled != 0)
    isConfigurationDBInstalled = TRUE;

  if(this.parent(id) == &quot;&quot;)
  {
    menuEntries = makeDynString(&quot;CASCADE_BUTTON, Add, 1&quot;,
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Paste, &quot; + PASTE + &quot;, &quot; + (int)(status[fwDEN_STATUS_EDIT]),
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Mass configuration ..., &quot; + SETTINGS + &quot;, &quot; + (int)(status[fwDEN_STATUS_EDIT]),
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Configuration DB ..., &quot; + CONFIGURATIONDB_TOOL + &quot;, &quot; + (int)(isConfigurationDBInstalled &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Installation Tool ..., &quot; + INSTALLATION_TOOL + &quot;, &quot; + (int)status[fwDEN_STATUS_EDIT],
                                &quot;Add&quot;,
                                &quot;PUSH_BUTTON, Add node ..., &quot; + ADD_NODE + &quot;, &quot; + (int)status[fwDEN_STATUS_EDIT],
                                &quot;PUSH_BUTTON, Add from hardware ..., &quot; + ADD_FROM_HARDWARE + &quot;, 0&quot;);
    allowedDpTypes = makeDynString(&quot;FwNode&quot;);
    dpName = &quot;&quot;;
    dpAlias = &quot;&quot;;
  }
  else
  {
    allowedDpTypes = makeDynString();
    dpAlias = id;
    
    dpName = strrtrim(dpAliasToName(dpAlias), &quot;.&quot;);
    
    if(dpTypeName(dpName) == &quot;FwNode&quot;)
      isNode = true;
    
    menuEntries = makeDynString(&quot;CASCADE_BUTTON, Add, 1&quot;,
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Cut, &quot; + CUT + &quot;, &quot; + + (int)(isNode &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Paste, &quot; + PASTE + &quot;, &quot; + (int)(isNode &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Remove, &quot; + REMOVE + &quot;, &quot; + + (int)(status[fwDEN_STATUS_EDIT]),
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Rename ..., &quot; + RENAME + &quot;, &quot; + (int)(status[fwDEN_STATUS_EDIT]),									
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Mass configuration ..., &quot; + SETTINGS + &quot;, &quot; + (int)(status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Settings ..., &quot; + SIMPLE_SETTINGS + &quot;, &quot; + (int)(!isNode &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Properties ..., &quot; + PROPERTIES + &quot;, &quot; + (int)(!isNode &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;SEPARATOR&quot;,
                                &quot;PUSH_BUTTON, Configuration DB ..., &quot; + CONFIGURATIONDB_TOOL + &quot;, &quot; + (int)(isConfigurationDBInstalled &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;Add&quot;,
                                &quot;PUSH_BUTTON, Add node ..., &quot; + ADD_NODE + &quot;, &quot; + (int)(isNode &amp;&amp; status[fwDEN_STATUS_EDIT]),
                                &quot;PUSH_BUTTON, Add from hardware ..., &quot; + ADD_FROM_HARDWARE + &quot;, &quot; + (int)(isNode &amp;&amp; status[fwDEN_STATUS_EDIT]));
  }
  
  fwGeneral_getNameWithoutSN(dpAlias, dpAliasWithoutSN, exceptionInfo);
  
  popupMenu(menuEntries, answer);

  switch(answer)
  {
    case PROPERTIES:
      ChildPanelOnCentralModal(&quot;fwDevice/fwDeviceProperties.pnl&quot;,
                               &quot;fwDeviceProperties&quot;,
                               makeDynString(&quot;$sDpName:&quot; + dpName));
      break;
    case SETTINGS:
      ChildPanelOnCentralModalReturn(&quot;fwDevice/fwDeviceMassConfiguration.pnl&quot;,
                                     &quot;Simple Configuration for &quot; + dpAlias,
                                     makeDynString(&quot;$sDpName:&quot; + dpAlias,
                                                   &quot;$sHierarchyType:&quot; + fwDevice_LOGICAL),
                                                   df, ds);
      break;
    case SIMPLE_SETTINGS:
      ChildPanelOnCentralModal(&quot;fwDevice/fwDeviceSimpleConfiguration.pnl&quot;,
   								             &quot;Simple Settings&quot;,
   								             makeDynString(&quot;$sDpName:&quot; + dpName));
      break;
    case CUT:
      fwGeneral_openMessagePanel(&quot;Are you sure you want to cut the device and all its children and put them in the clipboard?&quot;,
                                 ok, exceptionInfo, &quot;Cut from logical view&quot;);
      if(ok)
      {
        fwDevice_deleteLogical(makeDynString(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, dpAlias), &quot;&quot;, exceptionInfo);

        // update tree
        expand(this.parent(id));
      }
      break;
    case ADD_FROM_HARDWARE:
      ChildPanelOnCentralModalReturn(&quot;fwDeviceEditorNavigator/fwDeviceEditorNavigatorHardwareSelect.pnl&quot;, 
                                     &quot;Select device to paste from Hardware View&quot;,
                                     makeDynString(&quot;$dpAliasWithoutSN:&quot;+dpAliasWithoutSN),
                                     df, ds);

      // set the alias for the selected objects
      for(int i = 1; i &lt;= dynlen(ds); i++)
      {
        fwGeneral_stringToDynString(ds[i], deviceObject);
    
        string alias = dpGetAlias(deviceObject[fwDevice_DP_NAME] + &quot;.&quot;);

        dpSetAlias(deviceObject[fwDevice_DP_NAME] + &quot;.&quot;, dpAliasWithoutSN + fwDevice_HIERARCHY_SEPARATOR + deviceObject[fwDevice_ALIAS]);
        
        if (strlen(alias) &gt; 0) {
          this.removeItem(g_fwDEN_selectedSystem + alias);
        }
      }
      
      // update tree
      expand(id);
      break;
    case PASTE:
      ChildPanelOnCentralModalReturn(&quot;fwDeviceEditorNavigator/fwDeviceEditorNavigatorClipboard.pnl&quot;, 
                                     &quot;Clipboard&quot;,
                                     makeDynString(&quot;$dsAlloweDpTypes:&quot; + allowedDpTypes),
                                     df, ds);
      // if a device was selected from the clipboard, then paste it
      if (df[1] == fwDEN_CLIPBOARD_PASTE)
      {
        fwDeviceEditorNavigator_pasteLogical(makeDynString(dpName, &quot;&quot;, &quot;&quot;, &quot;&quot;, dpAlias, &quot;&quot;),
                                             makeDynString(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, ds[1], &quot;&quot;), exceptionInfo);
        // update tree
        expand(id);
      }
      break;
    case ADD_NODE:
      if(dpName == &quot;&quot;)
        nodeType = fwNode_TYPE_LOGICAL_ROOT;
      else
        nodeType = fwNode_TYPE_LOGICAL;
      
      ChildPanelOnCentralModalReturn(&quot;fwNode/fwNodeCreate.pnl&quot;, 
                                     &quot;Create Node&quot;,
                                     makeDynString(&quot;$sParentDpName:&quot; + dpName,
                                                   &quot;$sNodeType:&quot; + nodeType),
                                                   df, ds);
      // update tree											
      expand(id);
      break;
    case INSTALLATION_TOOL:
      ModuleOnWithPanel(&quot;Installation Tool&quot;,
                        0, 0, 0, 0, 1, 1, &quot;&quot;,
                        &quot;fwInstallation/fwInstallation.pnl&quot;,
                        &quot;Installation Tool&quot;,
                        makeDynString());
      break;
    case CONFIGURATIONDB_TOOL:
      ChildPanelOnCentralModalReturn(&quot;fwConfigurationDB/fwConfigurationDB.pnl&quot;,
                                     &quot;Configuration DB for &quot; + dpAlias,
                                     makeDynString(&quot;$sDpName:&quot; + dpAlias,
                                                   &quot;$sHierarchyType:&quot; + fwDevice_LOGICAL),
                                                   df, ds);
      // update tree											
      expand(id);
      break;
    case REMOVE:
      //dpSetAlias(dpName + &quot;.&quot;, &quot;&quot;);
      fwGeneral_openMessagePanel(&quot;Are you sure you want to remove the device and all its children from the logical view?&quot;,
                                 ok, exceptionInfo, &quot;Remove devices from logical view&quot;);
      
      if(ok)
      {
        fwDevice_removeAliasRecursively(makeDynString(dpName, &quot;&quot;, &quot;&quot;, &quot;&quot;, dpAlias), exceptionInfo);
        
        // update tree
        expand(this.parent(id));
      }
      break;
    case RENAME:
      ChildPanelOnCentralModalReturn(&quot;fwGeneral/fwGeneralReadStringValue.pnl&quot;, 
                                     &quot;Rename Device&quot;,
                                     makeDynString(&quot;$sDescription:Enter new alias:&quot;),
                                                   df, ds);
      if(dynlen(ds) &gt; 0)
      {
        if(ds[1] != &quot;&quot;)
        {
          fwDevice_renameLogical(makeDynString(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, dpAlias), ds[1], exceptionInfo);
        }
      }
      
      // update tree
      expand(this.parent(id));
      break;
    default:
      break;
  }
  
  if(dynlen(exceptionInfo) &gt; 0)
    fwExceptionHandling_display(exceptionInfo);
}

// ------------------------------------------------------------------------------------------------

rightClickedLogicalClipboard(string id, int column)
{
  bool ok;
  int answer;
  dyn_string device, menuEntries, exceptionInfo;
  const string	REMOVE = 1;
  
  // check if an entry was selected in the tree
  if(id == &quot;&quot;)
    return;

  if(this.parent(id) == &quot;&quot;)
    return;
  
  menuEntries = makeDynString(&quot;PUSH_BUTTON, Remove, &quot; + REMOVE + &quot;, 1&quot;);
  popupMenu(menuEntries, answer);
  
  switch(answer)
  {
    case REMOVE:
      fwGeneral_openMessagePanel(&quot;Are you sure you want to remove the device and all its children from the clipboard?&quot;,
                                 ok, exceptionInfo, &quot;Remove device from clipoboard&quot;);
      if(ok)
      {
        device[fwDevice_DP_ALIAS] = id;
        fwDevice_removeAliasRecursively(device, exceptionInfo);
        
        // refresh the tree
        expand(this.parent(id));

      }
      break;
   default:
      break;
   }
}




]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
  _fwDeviceEditorNavigator_init();
  g_sTreeType = $sTreeType;

  initTree(&quot;&quot;);
}]]></script>
 </events>
 <shapes>
  <shape Name="tree1" shapeType="TREE" layerId="0">
   <properties>
    <prop name="serialId">0</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">9 9</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">0</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="MinimumExpanding" horizontal="MinimumExpanding"/>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">9 9</prop>
    <prop name="Size">267 367</prop>
    <extended>
     <prop type="ENUM" name="sizeAdjustPolicy">0</prop>
     <prop type="ENUM" name="selectionBehavior">1</prop>
     <prop type="ENUM" name="selectionMode">0</prop>
     <script name="expanded" isEscaped="1"><![CDATA[expanded(string id)
{
  expand(id);
}]]></script>
     <script name="clicked" isEscaped="1"><![CDATA[clicked(string id, int column)
{
  dyn_string children, exceptionInfo;		

  // if nothing was selected, just return
  if(id == &quot;&quot;)
    return;
  
  // display associated device panel		
  if(g_fwDEN_displayDevicePanel[g_sTreeType])
  {
    g_fwDEN_selectedDevice = id;
  
    if(this.parent(id) == &quot;&quot;)  
    {
      _fwDeviceEditorNavigator_displayAssociatedDevicePanel(&quot;&quot;, &quot;&quot;, &quot;&quot;, exceptionInfo);	
    }
    else
    {
      // make node expandable if it has children
      fwDevice_getChildren(id, g_sTreeType, children, exceptionInfo);
    
      if(dynlen(children) &gt; 0)
        this.setExpandable(id, TRUE);

      // display associated device panel		
      if(g_sTreeType == fwDevice_LOGICAL)
        g_fwDEN_selectedDevice = strrtrim(dpAliasToName(g_fwDEN_selectedDevice), &quot;.&quot;);
      
      _fwDeviceEditorNavigator_displayAssociatedDevicePanel(g_fwDEN_selectedDevice, g_sTreeType, g_fwDEN_mode, exceptionInfo);
    }
  }
}]]></script>
     <script name="rightClicked" isEscaped="1"><![CDATA[rightClicked(string id, int column)
{
  switch(g_sTreeType)
  {
    case fwDevice_HARDWARE:
      rightClickedHardware(id, column);
      break;
   case fwDevice_LOGICAL:
      rightClickedLogical(id, column);
      break;
   case fwDevice_HARDWARE_SELECT:
      break;
   case fwDevice_LOGICAL_CLIPBOARD:
      rightClickedLogicalClipboard(id, column);
      break;
   default:
      break;
  }
}]]></script>
    </extended>
   </properties>
   <events>
    <script name="DragStart" isEscaped="1"><![CDATA[main(int keys, string id)
{
	if (g_fwDEN_treeToHierarchy[g_sTreeType] == fwDevice_LOGICAL) {	
		// cut off the system name
		dyn_string ds=id.split(&quot;:&quot;);
		string logicalName=ds.last();
		dragStart(logicalName,&quot;&quot;,DRAG_LINK,&quot;text/FwDevice_&quot;+fwDevice_LOGICAL);
	} else {
		dragStart(id,&quot;&quot;,DRAG_LINK,&quot;text/FwDevice_&quot;+fwDevice_HARDWARE);
	}
}]]></script>
   </events>
  </shape>
 </shapes>
 <groups>
  <layout parentSerial="-1" Name="LAYOUT_GROUP0" serial="0">
   <properties>
    <prop idx="0" name="shapeSerial">0</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
   </properties>
  </layout>
 </groups>
</panel>
