<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8">(NoName)</prop>
   <prop name="en_US.iso88591">(NoName)</prop>
  </prop>
  <prop name="Size">641 391</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">211 534</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[const int RELATIVE_DEADBAND = 10;

dyn_string DPE_LIST;
int DPE_TYPE;
bool DPES_OK;
mapping DIGITAL_OPTIONS;
mapping ANALOG_OPTIONS;
mapping DIGITAL_PROCEDURES;
mapping ANALOG_PROCEDURES;

// mode in which the panel is used
int panelMode;
const int OBJECT	= 1;
const int SINGLE_DPE		= 2;
const int MULTIPLE_DPES	= 3;

dyn_dyn_anytype dpeConfigObject;

fwSetTimeFieldsFormat(dyn_string &amp;exceptionInfo)
{
	string formatString;

	fwConfigs_getBestFormatForDpeType(DPEL_INT, formatString, exceptionInfo);
	fwConfigs_setTextFieldsFormat(makeDynString(&quot;day&quot;, &quot;hour&quot;, &quot;minute&quot;, &quot;second&quot;, &quot;milli&quot;), formatString,
									makeDynBool(FALSE), exceptionInfo);
}

_fwInitOptionsMapping()
{
	DIGITAL_OPTIONS[DPATTR_TIME_SMOOTH] = 0;
	DIGITAL_OPTIONS[DPATTR_COMPARE_OLD_NEW] = 1;
	DIGITAL_OPTIONS[DPATTR_OLD_NEW_AND_TIME_SMOOTH] = 2;
	DIGITAL_OPTIONS[DPATTR_OLD_NEW_OR_TIME_SMOOTH] = 3;

	ANALOG_OPTIONS[DPATTR_VALUE_SMOOTH] = 0;
	ANALOG_OPTIONS[DPATTR_VALUE_REL_SMOOTH] = 0;
	ANALOG_OPTIONS[DPATTR_TIME_SMOOTH] = 1;
	ANALOG_OPTIONS[DPATTR_TIME_AND_VALUE_SMOOTH] = 2;
	ANALOG_OPTIONS[DPATTR_TIME_AND_VALUE_REL_SMOOTH] = 2;
	ANALOG_OPTIONS[DPATTR_TIME_OR_VALUE_SMOOTH] = 3;
	ANALOG_OPTIONS[DPATTR_TIME_OR_VALUE_REL_SMOOTH] = 3;
	ANALOG_OPTIONS[DPATTR_COMPARE_OLD_NEW] = 4;
	ANALOG_OPTIONS[DPATTR_OLD_NEW_AND_TIME_SMOOTH] = 5;
	ANALOG_OPTIONS[DPATTR_OLD_NEW_OR_TIME_SMOOTH] = 6;

	DIGITAL_PROCEDURES[0] = DPATTR_TIME_SMOOTH;
	DIGITAL_PROCEDURES[1] = DPATTR_COMPARE_OLD_NEW;
	DIGITAL_PROCEDURES[2] = DPATTR_OLD_NEW_AND_TIME_SMOOTH;
	DIGITAL_PROCEDURES[3] = DPATTR_OLD_NEW_OR_TIME_SMOOTH;

	ANALOG_PROCEDURES[0] = DPATTR_VALUE_SMOOTH;
	ANALOG_PROCEDURES[0 + RELATIVE_DEADBAND] = DPATTR_VALUE_REL_SMOOTH;
	ANALOG_PROCEDURES[1] = DPATTR_TIME_SMOOTH;
	ANALOG_PROCEDURES[1 + RELATIVE_DEADBAND] = DPATTR_TIME_SMOOTH;
	ANALOG_PROCEDURES[2] = DPATTR_TIME_AND_VALUE_SMOOTH;
	ANALOG_PROCEDURES[2 + RELATIVE_DEADBAND] = DPATTR_TIME_AND_VALUE_REL_SMOOTH;
	ANALOG_PROCEDURES[3] = DPATTR_TIME_OR_VALUE_SMOOTH;
	ANALOG_PROCEDURES[3 + RELATIVE_DEADBAND] = DPATTR_TIME_OR_VALUE_REL_SMOOTH;
	ANALOG_PROCEDURES[4] = DPATTR_COMPARE_OLD_NEW;
	ANALOG_PROCEDURES[4 + RELATIVE_DEADBAND] = DPATTR_COMPARE_OLD_NEW;
	ANALOG_PROCEDURES[5] = DPATTR_OLD_NEW_AND_TIME_SMOOTH;
	ANALOG_PROCEDURES[5 + RELATIVE_DEADBAND] = DPATTR_OLD_NEW_AND_TIME_SMOOTH;
	ANALOG_PROCEDURES[6] = DPATTR_OLD_NEW_OR_TIME_SMOOTH;
	ANALOG_PROCEDURES[6 + RELATIVE_DEADBAND] = DPATTR_OLD_NEW_OR_TIME_SMOOTH;
}

_fwShowSmoothingItems(int selectedOption)
{
	bool timeInSecondsOnly, relativeDeadband, timeIntervalStatus, deadbandStatus, canShowDeadband;
	int elementType, smoothProcedure;
	dyn_string exceptionInfo;

	driverProblem.visible = FALSE;

	timeInSecondsOnly = secondsOnly.state(0);	
	relativeDeadband = relativeSelector.state(0);	

	if(relativeDeadband)
		selectedOption += RELATIVE_DEADBAND;

	_fwConfigs_getConfigOptionsForDpeType(DPE_TYPE, fwConfigs_PVSS_ARCHIVE, elementType, exceptionInfo);		
	switch(elementType)
	{
		case fwConfigs_ANALOG_OPTIONS:
			canShowDeadband = TRUE;
			if(mappingHasKey(ANALOG_PROCEDURES, selectedOption))
				smoothProcedure = ANALOG_PROCEDURES[selectedOption];
			else
				smoothProcedure = -1;
			break;
		default:
			canShowDeadband = FALSE;
			if(mappingHasKey(DIGITAL_PROCEDURES, selectedOption))
				smoothProcedure = DIGITAL_PROCEDURES[selectedOption];
			else
				smoothProcedure = -1;
			break;
	}
	
	switch(smoothProcedure)
	{
		case DPATTR_VALUE_SMOOTH:
		case DPATTR_VALUE_REL_SMOOTH:
			deadbandStatus=canShowDeadband;
			timeIntervalStatus=FALSE;
			break;
		case DPATTR_TIME_SMOOTH:
			deadbandStatus=FALSE;
			timeIntervalStatus=TRUE;
			break;
		case DPATTR_TIME_AND_VALUE_SMOOTH:
		case DPATTR_TIME_AND_VALUE_REL_SMOOTH:
		case DPATTR_TIME_OR_VALUE_SMOOTH:
		case DPATTR_TIME_OR_VALUE_REL_SMOOTH:
			deadbandStatus=canShowDeadband;
			timeIntervalStatus=TRUE;
			break;
		case DPATTR_COMPARE_OLD_NEW:
			deadbandStatus=FALSE;
			timeIntervalStatus=FALSE;
			break;
		case DPATTR_OLD_NEW_AND_TIME_SMOOTH:
		case DPATTR_OLD_NEW_OR_TIME_SMOOTH:
			deadbandStatus=FALSE;
			timeIntervalStatus=TRUE;
			break;
		default:
			deadbandStatus=FALSE;
			timeIntervalStatus=FALSE;
			break;
	}

	timeText.visible(timeIntervalStatus);
	day.visible(timeIntervalStatus &amp;! timeInSecondsOnly);
	hour.visible(timeIntervalStatus &amp;! timeInSecondsOnly);
	minute.visible(timeIntervalStatus &amp;! timeInSecondsOnly);
	second.visible(timeIntervalStatus);
	milli.visible(timeIntervalStatus);
	dayTitle.visible(timeIntervalStatus &amp;! timeInSecondsOnly);
	hourTitle.visible(timeIntervalStatus &amp;! timeInSecondsOnly);
	minuteTitle.visible(timeIntervalStatus &amp;! timeInSecondsOnly);
	secondTitle.visible(timeIntervalStatus);
	milliTitle.visible(timeIntervalStatus);
	secondsOnly.visible(timeIntervalStatus);

	relativeUnit.visible(deadbandStatus &amp;&amp; relativeDeadband);
	relativeSelector.visible(deadbandStatus);
	deadbandText.visible(deadbandStatus);
	deadbandValue.visible(deadbandStatus);
}

_fwHideSmoothingItems()
{
	timeText.visible(FALSE);
	day.visible(FALSE);
	hour.visible(FALSE);
	minute.visible(FALSE);
	second.visible(FALSE);
	milli.visible(FALSE);
	dayTitle.visible(FALSE);
	hourTitle.visible(FALSE);
	minuteTitle.visible(FALSE);
	secondTitle.visible(FALSE);
	milliTitle.visible(FALSE);
	secondsOnly.visible(FALSE);

	deadbandText.visible(FALSE);
	deadbandValue.visible(FALSE);
	relativeUnit.visible(FALSE);
	relativeSelector.visible(FALSE);

	smoothingOptions.visible(FALSE);
	digitalSmoothingOptions.visible(FALSE);
}

saveSettings(dyn_string &amp;exceptionInfo)
{
	bool relativeDeadband;
	int newDay = 0, newHour = 0, newMinute = 0, newSecond = 0, newMilli = 0, smoothProcedure, elementType;
	float newTime, deadband;
	time interval;
	string temp;
	bool isGood;
	shape optionsList;

 	if(!DPES_OK)
	{
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, getCatStr(&quot;fwConfigs&quot;, &quot;PANEL_MIXEDORBADDPETYPES&quot;), &quot;&quot;);
		return;		
	}

	okButton.enabled = FALSE;
	applyButton.enabled = FALSE;
	closeButton.enabled = FALSE;
	if(panelMode == MULTIPLE_DPES)
		fwOpenProgressBar(&quot;Configuration panel&quot;, &quot;Saving configuration...&quot;, 1);
	
	if(smoothingSwitch.state(0))
	{
		relativeDeadband = relativeSelector.state(0);
		
		_fwConfigs_getConfigOptionsForDpeType(DPE_TYPE, fwConfigs_PVSS_ARCHIVE, elementType, exceptionInfo);		
		switch(elementType)
		{
			case fwConfigs_ANALOG_OPTIONS:
				optionsList = getShape(&quot;smoothingOptions&quot;);
				smoothProcedure = optionsList.number();

				if(relativeDeadband)
					smoothProcedure += RELATIVE_DEADBAND;

				if(mappingHasKey(ANALOG_PROCEDURES, smoothProcedure))
					smoothProcedure = ANALOG_PROCEDURES[smoothProcedure];
				else
					smoothProcedure = -1;
				break;
			default:
				optionsList = getShape(&quot;digitalSmoothingOptions&quot;);
				smoothProcedure = optionsList.number();

				if(relativeDeadband)
					smoothProcedure += RELATIVE_DEADBAND;

				if(mappingHasKey(DIGITAL_PROCEDURES, smoothProcedure))
					smoothProcedure = DIGITAL_PROCEDURES[smoothProcedure];
				else
					smoothProcedure = -1;
				break;
		}

		if(day.visible)
		{
			temp = day.text();
			fwConfigs_checkStringFormat(temp, DPEL_INT, isGood, exceptionInfo);
			if(isGood)
				newDay = temp;
			else
				fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Day value of time interval is not valid&quot;, &quot;&quot;);

			temp = hour.text();
			fwConfigs_checkStringFormat(temp, DPEL_INT, isGood, exceptionInfo);
			if(isGood)
				newHour = temp;
			else
				fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Hour value of time interval is not valid&quot;, &quot;&quot;);

			temp = minute.text();
			fwConfigs_checkStringFormat(temp, DPEL_INT, isGood, exceptionInfo);
			if(isGood)
				newMinute = temp;
			else
				fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Minute value of time interval is not valid&quot;, &quot;&quot;);
		}
		
		if(second.visible)
                {
                  temp = second.text();
		  fwConfigs_checkStringFormat(temp, DPEL_INT, isGood, exceptionInfo);
		  if(isGood)
		  	  newSecond = temp;
		  else
			  fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Second value of time interval is not valid&quot;, &quot;&quot;);

		  temp = milli.text();
		  fwConfigs_checkStringFormat(temp, DPEL_INT, isGood, exceptionInfo);
		  if(isGood)
			  newMilli = temp;
		  else
			  fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Millisecond value of time interval is not valid&quot;, &quot;&quot;);
					
		  newSecond = newDay*86400 + newHour*3600 + newMinute*60 + newSecond;

		  setPeriod(interval, newSecond, newMilli);  
		  newTime = interval;
                }
                
                if(deadbandValue.visible)
                {
 		  temp = deadbandValue.text();
		  if(relativeDeadband)
			  fwConfigs_checkStringFormat(temp, DPEL_FLOAT, isGood, exceptionInfo);
		  else
			  fwConfigs_checkStringFormat(temp, DPE_TYPE, isGood, exceptionInfo);
		  if(isGood)
			  deadband = temp;
		  else
			  fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Deadband value is not valid&quot;, &quot;&quot;);
                }
                		
		if(dynlen(exceptionInfo)&gt;0)
		{
			okButton.enabled = TRUE;
			applyButton.enabled = TRUE;
			closeButton.enabled = TRUE;
			if(panelMode == MULTIPLE_DPES)
				fwCloseProgressBar(&quot;Configuration failed&quot;);
			return;
		}
		
		if(panelMode != OBJECT)
		{
			fwSmoothing_setMultiple(DPE_LIST, smoothProcedure, deadband, newTime, exceptionInfo, TRUE);
		}
		else
		{
			dpeConfigObject[fwSmoothing_DPE_OBJECT_PROCEDURE][1]			= smoothProcedure;
			dpeConfigObject[fwSmoothing_DPE_OBJECT_DEADBAND][1] 			= deadband;
			dpeConfigObject[fwSmoothing_DPE_OBJECT_TIME_INTERVAL][1]	= newTime;
			
			fwGeneral_setGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
//			DebugN(&quot;Modified &quot;, dpeConfigObject);
		}
	}
	else
	{
		if(panelMode != OBJECT)
		{
			fwSmoothing_deleteMultiple(DPE_LIST, exceptionInfo, TRUE);
		}
		else
		{
			dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1]	= DPCONFIG_NONE;
			dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1] = FALSE;
			
			dpeConfigObject[fwSmoothing_DPE_OBJECT_PROCEDURE][1]			= 0;
			dpeConfigObject[fwSmoothing_DPE_OBJECT_DEADBAND][1] 			= 0;
			dpeConfigObject[fwSmoothing_DPE_OBJECT_TIME_INTERVAL][1]	= 0;
			
			fwGeneral_setGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
//			DebugN(&quot;Modified &quot;, dpeConfigObject);
		}
	}
	
	okButton.enabled = TRUE;
	applyButton.enabled = TRUE;
	closeButton.enabled = TRUE;
	if(panelMode == MULTIPLE_DPES)
		fwCloseProgressBar(&quot;Configuration complete&quot;);
}]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	bool isSmoothed;
	int length, i, elementType, smoothProcedure, configType;	
	float deadband, timeInterval;
	string dpe, errorString;
	shape optionsList;
	dyn_string systems, exceptionInfo;
	
	if(isDollarDefined(&quot;$sDpe&quot;))
	{
		dpe = $sDpe;
		strreplace(dpe, &quot; &quot;, &quot;&quot;);
	    DPE_LIST = strsplit(dpe, &quot;|&quot;);
	}
    
	elementNameField.editable(FALSE);

	switch(dynlen(DPE_LIST))
	{
			case 0:				
				if(isDollarDefined(&quot;$sDpeConfigObjectVarName&quot;))	// object passed to the panel
				{
					if(getGlobalType($sDpeConfigObjectVarName) != DYN_DYN_ANYTYPE_VAR)
					{
						elementNameField.text(&quot;Wrong config object name&quot;);
						smoothingSwitch.enabled = FALSE;
						applyButton.enabled = FALSE;
						okButton.enabled = FALSE;
						fwException_raise(exceptionInfo, 
															&quot;WARNING&quot;, &quot;The config object &quot; + $sDpeConfigObjectVarName + 
															&quot; doesn't exists or hasn't got the proper format.&quot;, 
															&quot;&quot;);
						fwExceptionHandling_display(exceptionInfo);					
						return;
					}					
					
					panelMode = OBJECT;					
					fwGeneral_getGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
					//DebugN(\&quot;fwAlertConfigPanel: \&quot;, dpeAlertConfigObject);
					
					// read from config object
					DPE_LIST[1] = dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_NAME][1];						
					DPE_TYPE		= dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_TYPE][1];
					configType	= dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1];
					smoothProcedure	= dpeConfigObject[fwSmoothing_DPE_OBJECT_PROCEDURE][1];
					deadband				= dpeConfigObject[fwSmoothing_DPE_OBJECT_DEADBAND][1];
					timeInterval		= dpeConfigObject[fwSmoothing_DPE_OBJECT_TIME_INTERVAL][1];
					
					if(configType == DPCONFIG_NONE)
						isSmoothed = FALSE;
					else
						isSmoothed = TRUE;
					
					elementNameField.text(DPE_LIST[1]);
					DPES_OK = TRUE;
				}
				else // neither dpes nor object passed, nothing to do in the panel
				{
					elementNameField.text(&quot;No Data Point Elements&quot;);
					smoothingSwitch.enabled = FALSE;
					applyButton.enabled = FALSE;
					okButton.enabled = FALSE;
					fwException_raise(exceptionInfo, &quot;WARNING&quot;, getCatStr(&quot;fwConfigs&quot;, &quot;PANEL_NODATAPOINTSTOCONFIG&quot;), &quot;&quot;);
					fwExceptionHandling_display(exceptionInfo);					
					return;
				}
				break;
				
			case 1:		// single dpe passed to the panel
				panelMode = SINGLE_DPE;
				dpe = DPE_LIST[1];
				elementNameField.text(dpe);
				DPES_OK = _fwConfigs_checkDpeList(DPE_LIST, fwConfigs_PVSS_SMOOTH, DPE_TYPE, exceptionInfo, errorString);
				if(!DPES_OK)
					fwException_raise(exceptionInfo, &quot;ERROR&quot;, errorString, &quot;&quot;);
				else
				{
					// read config (extra checking necessary because it is stored in the driver)		
					fwSmoothing_get(DPE_LIST[1], isSmoothed, smoothProcedure, deadband, timeInterval, exceptionInfo);
				}
				
				if(dynlen(exceptionInfo) &gt; 0)
				{
					if(exceptionInfo[dynlen(exceptionInfo)] != &quot;&quot;)
					{
						driverProblem.text = &quot;The current state of this config is unknown.\nThe config can not be modified.\nThe config can not be accessed because\ndriver number &quot;
																	+ exceptionInfo[dynlen(exceptionInfo)] + &quot; is not running.&quot;;
						driverProblem.visible = TRUE;
						smoothingSwitch.enabled = FALSE;
						okButton.enabled = FALSE;
						applyButton.enabled = FALSE;
						exceptionInfo = makeDynString();
					}
					else
						fwExceptionHandling_display(exceptionInfo);
				}
				break;
			default:	// multiple dpes passed to the panel
				panelMode = MULTIPLE_DPES;
				dpe = DPE_LIST[1];

				_fwConfigs_getSystemsInDpeList(DPE_LIST, systems, exceptionInfo);
				
				if(dynlen(systems) == 1)
					elementNameField.text(&quot;Multiple Data Point Elements (from &quot; + systems[1] + &quot;)&quot;);
				else
					elementNameField.text(&quot;Multiple Data Point Elements (from multiple systems)&quot;);

				DPES_OK = _fwConfigs_checkDpeList(DPE_LIST, fwConfigs_PVSS_SMOOTH, DPE_TYPE, exceptionInfo, errorString);
				if(!DPES_OK)
					fwException_raise(exceptionInfo, &quot;ERROR&quot;, errorString, &quot;&quot;);

				dpeDetails.visible = TRUE;
				isSmoothed = FALSE;
				break;
	}

	fwSetTimeFieldsFormat(exceptionInfo);
	applyButton.enabled = DPES_OK;
	okButton.enabled = DPES_OK;

	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
		return;
	}

	_fwInitOptionsMapping();

	if(isSmoothed)
	{
		smoothingSwitch.state(0, TRUE);
		
		_fwConfigs_getConfigOptionsForDpeType(DPE_TYPE, fwConfigs_PVSS_SMOOTH, elementType, exceptionInfo);		
		switch(elementType)
		{
				case fwConfigs_ANALOG_OPTIONS:
					optionsList = getShape(&quot;smoothingOptions&quot;);
					if(mappingHasKey(ANALOG_OPTIONS, smoothProcedure))
						optionsList.number = ANALOG_OPTIONS[smoothProcedure];
					else
						optionsList.number = 0;
					break;
				default:
					optionsList = getShape(&quot;digitalSmoothingOptions&quot;);
					if(mappingHasKey(DIGITAL_OPTIONS, smoothProcedure))
						optionsList.number = DIGITAL_OPTIONS[smoothProcedure];
					else
						optionsList.number = 0;
					break;
		}

		_fwDisplayTime(timeInterval);
		_fwDisplayDeadband(smoothProcedure, deadband);
		_fwShowSmoothingItems(optionsList.number);
		optionsList.visible(TRUE);
	}
	else
	{
		_fwHideSmoothingItems();
		smoothingSwitch.state(0,FALSE);
		_fwDisplayTime(timeInterval);
		_fwDisplayDeadband(DPCONFIG_NONE, deadband);
	}

	smoothingSwitch.visible(TRUE);
}

_fwDisplayDeadband(int smoothProcedure, float deadband)
{
	switch(smoothProcedure)
	{
		case DPATTR_VALUE_REL_SMOOTH:
		case DPATTR_TIME_AND_VALUE_REL_SMOOTH:
		case DPATTR_TIME_OR_VALUE_REL_SMOOTH:
			relativeSelector.state(0) = TRUE;
			break;
		default:
			relativeSelector.state(0) = FALSE;
			break;
	}
	
	deadbandValue.text(deadband);
}

_fwDisplayTime(float timeInterval)
{
	int actualDay,actualHour,actualMinute,actualSecond,actualMilli,timeInSeconds;
	time interval;
	
	interval = timeInterval;
	timeInSeconds = period(interval);
	actualMilli = milliSecond(interval);

	actualDay=timeInSeconds/86400;
	timeInSeconds=timeInSeconds-(actualDay*86400);

	actualHour=timeInSeconds/3600;
	timeInSeconds=timeInSeconds-(actualHour*3600);

	actualMinute=timeInSeconds/60;
	timeInSeconds=timeInSeconds-(actualMinute*60);

	actualSecond=timeInSeconds;	

	day.text(actualDay);
	hour.text(actualHour);
	minute.text(actualMinute);
	second.text(actualSecond);
	milli.text(actualMilli);

	secondsOnly.state(0,FALSE);
}]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="dayTitle" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">20</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">153 448</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">15</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">115 291</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Days</prop>
     <prop name="en_US.iso88591">Days</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="hourTitle" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">21</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">266 448</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">17</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">185 291</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Hours</prop>
     <prop name="en_US.iso88591">Hours</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="minuteTitle" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">22</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">379 448</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">18</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">251 291</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Minutes</prop>
     <prop name="en_US.iso88591">Minutes</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="secondTitle" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">23</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">485 448</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">19</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">317 291</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Seconds</prop>
     <prop name="en_US.iso88591">Seconds</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="milliTitle" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">24</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">604 448</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">20</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">387 291</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Millisecs</prop>
     <prop name="en_US.iso88591">Millisecs</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="title" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">39</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">21 26</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">21</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,19,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,19,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Smoothing Configuration</prop>
     <prop name="en_US.iso88591">Smoothing Configuration</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Text3" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">47</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">167 113</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">22</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 55</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">DP Element:</prop>
     <prop name="en_US.iso88591">DP Element:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="timeText" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">53</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">90 341</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">23</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Time</prop>
     <prop name="en_US.iso88591">Time</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">90 257</prop>
    <prop name="Size">363 84</prop>
   </properties>
  </shape>
  <shape Name="deadbandText" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">54</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">460 341</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">24</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Deadband</prop>
     <prop name="en_US.iso88591">Deadband</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">460 257</prop>
    <prop name="Size">130 84</prop>
   </properties>
  </shape>
  <shape Name="relativeUnit" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">55</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">567 311</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">25</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">569 313</prop>
    <prop name="Size">17 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">%</prop>
     <prop name="en_US.iso88591">%</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="driverProblem" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">59</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">140 130</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{255,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">26</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">146 136</prop>
    <prop name="Size">279 69</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Driver problem</prop>
     <prop name="en_US.iso88591">Driver problem</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">6</prop>
    <prop name="Bordered">True</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignHCenter]</prop>
   </properties>
  </shape>
  <shape Name="elementNameField" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">49</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">347 103</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">90 50</prop>
    <prop name="Size">541 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dpeDetails" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">51</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">460 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">460 10</prop>
    <prop name="Size">121 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Select Elements</prop>
     <prop name="en_US.iso88591">Select Elements</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string errorString;
	dyn_string returnedDpeList, systems, exceptionInfo;
	dyn_float cancelOrOk;

	ChildPanelOnCentralModalReturn(&quot;fwConfigs/fwDpeSelector.pnl&quot;, &quot;Choose Data Point Elements&quot;,
									makeDynString(&quot;$dsAllDpes:&quot;+$sDpe, &quot;$dsIncludedDpes:&quot;+DPE_LIST, &quot;$sConfigType:&quot;+fwConfigs_PVSS_SMOOTH),
									cancelOrOk, returnedDpeList);

	if(cancelOrOk[1] &gt; 0.5)
	{
		if(DPE_LIST != returnedDpeList)
		{
			DPE_LIST = returnedDpeList;
			DPES_OK = _fwConfigs_checkDpeList(DPE_LIST, fwConfigs_PVSS_SMOOTH, DPE_TYPE, exceptionInfo, errorString);
			if(!DPES_OK)
				fwException_raise(exceptionInfo, &quot;ERROR&quot;, errorString, &quot;&quot;);

			_fwConfigs_getSystemsInDpeList(DPE_LIST, systems, exceptionInfo);

			if(dynlen(DPE_LIST)== 1)
				elementNameField.text(DPE_LIST[1]);
			else
			{
				if(dynlen(systems) == 1)
					elementNameField.text(&quot;Multiple Data Point Elements (from &quot; + systems[1] + &quot;)&quot;);
				else
					elementNameField.text(&quot;Multiple Data Point Elements (from multiple systems)&quot;);
			}

			applyButton.enabled = DPES_OK;
			okButton.enabled = DPES_OK;

			smoothingSwitch.state(0) = FALSE;
			_fwHideSmoothingItems();
		}
	}	
}]]></script>
   </events>
  </shape>
  <shape Name="smoothingSwitch" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">42</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 90</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 90</prop>
    <prop name="Size">141 26</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Smoothing ON/OFF</prop>
       <prop name="en_US.iso88591">Smoothing ON/OFF</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	bool newState;
	int elementType;
	shape optionsList;
	dyn_string exceptionInfo;

	if(!DPES_OK)
	{
		this.state(0) = FALSE;
		
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, getCatStr(&quot;fwConfigs&quot;, &quot;PANEL_MIXEDORBADDPETYPES&quot;), &quot;&quot;);
		if(dynlen(exceptionInfo)&gt;0)
			fwExceptionHandling_display(exceptionInfo);
		return;
	}

	_fwConfigs_getConfigOptionsForDpeType(DPE_TYPE, fwConfigs_PVSS_SMOOTH, elementType, exceptionInfo);		
	switch(elementType)
	{
		case fwConfigs_ANALOG_OPTIONS:
			optionsList = getShape(&quot;smoothingOptions&quot;);
			break;
		default:
			optionsList = getShape(&quot;digitalSmoothingOptions&quot;);
			break;
	}

	newState = this.state(0);

	if(newState)
	{ 
		_fwShowSmoothingItems(optionsList.number);
		optionsList.visible(TRUE);
	}
	else
	{
		_fwHideSmoothingItems();
	}
}]]></script>
   </events>
  </shape>
  <shape Name="smoothingOptions" shapeType="RADIO_BOX" layerId="0">
   <properties>
    <prop name="serialId">56</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">791 221</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">4</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">170 90</prop>
    <prop name="Size">229 161</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Deadband</prop>
       <prop name="en_US.iso88591">Deadband</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Time</prop>
       <prop name="en_US.iso88591">Time</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Deadband AND Time</prop>
       <prop name="en_US.iso88591">Deadband AND Time</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Deadband OR Time</prop>
       <prop name="en_US.iso88591">Deadband OR Time</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Old-New Comparison</prop>
       <prop name="en_US.iso88591">Old-New Comparison</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Old-New Comparison AND Time</prop>
       <prop name="en_US.iso88591">Old-New Comparison AND Time</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Old-New Comparison OR Time</prop>
       <prop name="en_US.iso88591">Old-New Comparison OR Time</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	_fwShowSmoothingItems(this.number);
}]]></script>
   </events>
  </shape>
  <shape Name="digitalSmoothingOptions" shapeType="RADIO_BOX" layerId="0">
   <properties>
    <prop name="serialId">57</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">555 252</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">170 90</prop>
    <prop name="Size">229 111</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Time</prop>
       <prop name="en_US.iso88591">Time</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Old-New Comparison</prop>
       <prop name="en_US.iso88591">Old-New Comparison</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Old-New Comparison AND Time</prop>
       <prop name="en_US.iso88591">Old-New Comparison AND Time</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Old-New Comparison OR Time</prop>
       <prop name="en_US.iso88591">Old-New Comparison OR Time</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	_fwShowSmoothingItems(this.number);
}]]></script>
   </events>
  </shape>
  <shape Name="secondsOnly" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">46</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">334 322</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">325 270</prop>
    <prop name="Size">118 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Time in Seconds</prop>
       <prop name="en_US.iso88591">Time in Seconds</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	int actualDay,actualHour,actualMinute,actualSecond,actualMilli, timeInSeconds;
	bool checkState;

	checkState = this.state(0);

	if(checkState)
	{
		actualDay = day.text();
		actualHour = hour.text();
		actualMinute = minute.text();
		actualSecond = second.text();

		timeInSeconds=(actualDay*86400+actualHour*3600+actualMinute*60+actualSecond);

		day.text(0);
		hour.text(0);
		minute.text(0);
		second.text(timeInSeconds);

		day.visible(FALSE);
		hour.visible(FALSE);
		minute.visible(FALSE);
		dayTitle.visible(FALSE);
		hourTitle.visible(FALSE);
		minuteTitle.visible(FALSE);
		second.scale(1.5,1);
	}
	else
	{
		timeInSeconds = second.text();
	
		actualDay=timeInSeconds/86400;
		timeInSeconds=timeInSeconds-(actualDay*86400);

		actualHour=timeInSeconds/3600;
		timeInSeconds=timeInSeconds-(actualHour*3600);

		actualMinute=timeInSeconds/60;
		timeInSeconds=timeInSeconds-(actualMinute*60);

		actualSecond=timeInSeconds;
		day.text(actualDay);
		hour.text(actualHour);
		minute.text(actualMinute);
		second.text(actualSecond);

		day.visible(TRUE);
		hour.visible(TRUE);
		minute.visible(TRUE);
		dayTitle.visible(TRUE);
		hourTitle.visible(TRUE);
		minuteTitle.visible(TRUE);
		second.scale(1,1);
	}
}]]></script>
   </events>
  </shape>
  <shape Name="day" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">34</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">139 484</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">100 309</prop>
    <prop name="Size">61 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="hour" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">28</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">263 484</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">8</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">170 309</prop>
    <prop name="Size">61 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="minute" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">29</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">391 484</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">9</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">242 309</prop>
    <prop name="Size">61 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="second" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">30</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">372 332</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">10</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">312 309</prop>
    <prop name="Size">61 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="milli" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">31</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">643 484</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">382 309</prop>
    <prop name="Size">61 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="relativeSelector" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">52</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">470 273</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">12</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">470 273</prop>
    <prop name="Size">101 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Relative value</prop>
       <prop name="en_US.iso88591">Relative value</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, bool state)
{
	if(button == 0)
	{
		if(state)
			relativeUnit.visible = TRUE;
		else
			relativeUnit.visible = FALSE;
	}
}]]></script>
   </events>
  </shape>
  <shape Name="deadbandValue" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">35</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">652 540</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">470 309</prop>
    <prop name="Size">91 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignRight]</prop>
   </properties>
  </shape>
  <shape Name="applyButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">38</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 0</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">14</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">460 350</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Apply</prop>
     <prop name="en_US.iso88591">Apply</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	dyn_string exceptionInfo;

	saveSettings(exceptionInfo);
	if(dynlen(exceptionInfo) &gt; 0)
		fwExceptionHandling_display(exceptionInfo);
}]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	int x, y;

	if(isDollarDefined(&quot;$bHierarchyBrowser&quot;))
	{
		if(!$bHierarchyBrowser)
			closeButton.visible = TRUE;
		else
		{
			getValue(&quot;&quot;, &quot;position&quot;, x, y);
			this.position(x + 90,y);	
		}
	}
	else
		closeButton.visible = TRUE;
		
	this.visible = TRUE;	
}]]></script>
   </events>
  </shape>
  <shape Name="closeButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">58</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1492 929</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">16</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">550 350</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Close</prop>
     <prop name="en_US.iso88591">Close</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOff();
}]]></script>
   </events>
  </shape>
  <shape Name="okButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">60</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 0</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">26</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">370 350</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OK</prop>
     <prop name="en_US.iso88591">OK</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	dyn_string exceptionInfo;

	saveSettings(exceptionInfo);
	if(dynlen(exceptionInfo) &gt; 0)
		fwExceptionHandling_display(exceptionInfo);
	else
		PanelOff();
}]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	if(isDollarDefined(&quot;$bHierarchyBrowser&quot;))
	{
		if(!$bHierarchyBrowser)
			this.visible = TRUE;
	}
	else
		this.visible = TRUE;	
}]]></script>
   </events>
  </shape>
  <reference parentSerial="-1" Name="Group2" referenceId="0">
   <properties>
    <prop name="FileName">objects/fwGeneral/fwHelpButton.pnl</prop>
    <prop name="Location">600 14</prop>
    <prop name="Geometry">1 0 0 1 4 -4</prop>
    <prop name="TabOrder">27</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sPanelRelativePath</prop>
      <prop name="Value">fwConfigs/fwSmoothingConfig</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
   </properties>
  </reference>
 </shapes>
</panel>
