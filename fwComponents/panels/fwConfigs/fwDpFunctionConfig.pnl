<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8"></prop>
   <prop name="en_US.iso88591"></prop>
  </prop>
  <prop name="Size">641 391</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">-1 40</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[#uses &quot;para.ctl&quot;

dyn_string DPE_LIST;
int DPE_TYPE, DPE_FILTER, DPA_FILTER;
bool DPES_OK, MULTIPLE_SYSTEMS;
mapping mStatTypes;

// mode in which the panel is used
int panelMode;
const int OBJECT	= 1;
const int SINGLE_DPE		= 2;
const int MULTIPLE_DPES	= 3;

dyn_dyn_anytype dpeConfigObject;

_fwCheckInputDpe(string graphicalObjectList, string &amp;s, dyn_string &amp;exceptionInfo)
{
	string original = s;
	dyn_string dpes;
  bool bStatistical;
  
  bStatistical = ckStatistical.state(0);

	if(panelMode != OBJECT)
	{
		s = dpSubStr(s,DPA_FILTER);
	  if(s==&quot;&quot;)
	  {
			fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The data point does not exist: &quot; + original, &quot;&quot;);
	    return;	
	  }
		if(strpos(dpSubStr(s, DPSUB_DP_EL_CONF_DET_ATT), &quot;:&quot;) &lt; 0)
			s += &quot;:_online.._value&quot;;
	}
	else
	{
		if((strpos(s, &quot;:_online.._value&quot;) &lt; 0) &amp;&amp; (strpos(s, &quot;:_original.._value&quot;) &lt; 0))
			s += &quot;:_online.._value&quot;;
	}

	if(graphicalObjectList != &quot;&quot;)
	{
    if(bStatistical)
		  _fwGetStatTypesFromLists(graphicalObjectList, dpes, exceptionInfo);
    else
		  _fwGetDpesFromLists(graphicalObjectList, dpes, exceptionInfo);
	}
	else
		dpes = makeDynString();

  if(dynContains(dpes,dpSubStr(s,DPA_FILTER)))
  {
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The data point has already been specified in the list.&quot;, &quot;&quot;);
    return;
  }
}

_fwToggleDpFunctionItems(bool shouldShow)
{
	box_global.visible = shouldShow;
	box_param.visible = shouldShow;
	cue_function.visible = shouldShow;
	cue_global.visible = shouldShow;
	cue_param.visible = shouldShow;
	dyn_input_global.visible = shouldShow;
	dyn_input_param.visible = shouldShow;
	dyn_list_global.visible = shouldShow;
	dyn_list_param.visible = shouldShow;
	help_function.visible = shouldShow;
	pb_after_global.visible = shouldShow;
	pb_after_param.visible = shouldShow;
	pb_before_global.visible = shouldShow;
	pb_before_param.visible = shouldShow;
	pb_delete_global.visible = shouldShow;
	pb_delete_param.visible = shouldShow;
	pb_editor_global.visible = shouldShow;
	pb_editor_param.visible = shouldShow;
	pb_modify_global.visible = shouldShow;
	pb_modify_param.visible = shouldShow;
	pb_select_global.visible = shouldShow;
	pb_select_param.visible = shouldShow;
	text_function.visible = shouldShow;
	ckStatistical.visible = shouldShow;
	spnInterval.visible = shouldShow;
	lblInterval.visible = shouldShow;
	spnDelay.visible = shouldShow;
	lblDelay.visible = shouldShow;
	ckInitFromArchive.visible = shouldShow;
	frameStatistical.visible = shouldShow;
	multipleSystemWarning.visible = (shouldShow &amp;&amp; MULTIPLE_SYSTEMS);
}

string _addStatFunctionToDpe(string dpe, string statType)
{
  return &quot;(&quot;+statType+&quot;)&quot;+dpe;
}

_fwGetDpesFromLists(string list, dyn_string &amp;dpes, dyn_string &amp;exceptionInfo)
{
	int i, length, position;
	shape selectionList;
	dyn_string listContents;
	
	dpes = makeDynString();
	
	selectionList = getShape(list);
	listContents = selectionList.items;

	length = dynlen(listContents);
	for(i=1; i&lt;=length; i++)
	{    
    position = strpos(listContents[i], &quot;)&quot;);
    if(position&lt;2)//it is not a statistical function
		  position = strpos(listContents[i], &quot;=&quot;);
		dpes[i] = substr(listContents[i], position + 1);
//DebugN(dpes[i], dpSubStr(dpes[i], DPSUB_DP_EL_CONF_DET_ATT));		

		if(panelMode != OBJECT)
		{
			if(strpos(dpSubStr(dpes[i], DPSUB_DP_EL_CONF_DET_ATT), &quot;:&quot;) &lt; 0)
				dpes[i] += &quot;:_online.._value&quot;;	
		}
		else
		{
			if((strpos(dpes[i], &quot;:_online.._value&quot;) &lt; 0) &amp;&amp; (strpos(dpes[i], &quot;:_original.._value&quot;) &lt; 0))
				dpes[i] += &quot;:_online.._value&quot;;
		}
//DebugN(dpes[i]);		
	}
}

_fwGetStatTypesFromLists(string list, dyn_int &amp;types, dyn_string &amp;exceptionInfo)
{
	int i, length, position, positionEnd;
	shape selectionList;
	dyn_string listContents;
  string sType;
	
	types = makeDynInt();
	
	selectionList = getShape(list);
	listContents = selectionList.items;
  length = dynlen(listContents);
	for(i=1; i&lt;=length; i++)
	{    
    position = strpos(listContents[i], &quot;(&quot;);
    if(position&gt;1)//it is a statistical function
    {
		  positionEnd = strpos(listContents[i], &quot;)&quot;);
		  sType = substr(listContents[i], position+1, positionEnd-position-1);
      if(mappingHasKey(mStatTypes, sType))
      {
        types[i] = mStatTypes[sType];
      }
      else
      {
			  fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The data point &quot;+substr(listContents[i], positionEnd+1)+&quot; has undefined statistical function&quot; , &quot;&quot;);        
      }
    }	
	}
}

_fwSetListsFromDpes(string list, dyn_string dpes, dyn_string &amp;exceptionInfo)
{
	int i, length;
	string prefix;
	shape selectionList;
	dyn_string listContents;
	
	selectionList = getShape(list);
	if(strpos(list, &quot;_global&quot;) &gt;= 0)
		prefix = &quot;g&quot;;
	else
		prefix = &quot;p&quot;;
	
	length = dynlen(dpes);
	for(i=1; i&lt;=length; i++)
	{
		if(panelMode == OBJECT)
			listContents[i] = prefix + i + &quot;=&quot; + dpes[i];		
		else
			listContents[i] = prefix + i + &quot;=&quot; + dpSubStr(dpes[i], DPA_FILTER);//DPSUB_SYS_DP_EL);
	}	
	
	selectionList.items = listContents;
}

_fwSetStatListsFromDpes(string list, dyn_string dpes, dyn_string statTypes, bool isStat, dyn_string &amp;exceptionInfo)
{
	int i,j, length, mapLen;
	string prefix, statType;
	shape selectionList;
	dyn_string listContents;
	
	selectionList = getShape(list);
	if(strpos(list, &quot;_global&quot;) &gt;= 0)
		prefix = &quot;g&quot;;
	else
		prefix = &quot;p&quot;;

  mapLen = mappinglen(mStatTypes);  
	length = dynlen(dpes);
	for(i=1; i&lt;=length; i++)
	{
    //get the statistical type name
    statType = &quot;&quot;;
  	for(j=1; j&lt;=mapLen; j++)
  	{
      if(statTypes[i] == mappingGetValue(mStatTypes,j))
      {
        statType = mappingGetKey(mStatTypes,j);
        break;
      }
    }  	
    if(isStat &amp;&amp; strlen(statType))
    {
  		if(panelMode == OBJECT)
  			listContents[i] = prefix + i + &quot;=(&quot; + statType + &quot;)&quot; + dpes[i];		
  		else
  			listContents[i] = prefix + i + &quot;=(&quot; + statType + &quot;)&quot; + dpSubStr(dpes[i], DPA_FILTER);//DPSUB_SYS_DP_EL);
    }
    else
    {
  		if(panelMode == OBJECT)
  			listContents[i] = prefix + i + &quot;=&quot; + dpes[i];		
  		else
  			listContents[i] = prefix + i + &quot;=&quot; + dpSubStr(dpes[i], DPA_FILTER);//DPSUB_SYS_DP_EL);
    }
	}	
	
	selectionList.items = listContents;
}

saveSettings(dyn_string &amp;exceptionInfo)
{
	bool status, isGood;
	string sDpFunction;
	bool doesExist;
	dyn_string dsParams, dsGlobals;
  bool bStatistical, bInitFromArchive;
  dyn_int diStatTypes;
  int iDelay, iInterval;
  dyn_anytype daDpFuncObject, daDpFuncObjects;
	
 	if(!DPES_OK)
	{
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, getCatStr(&quot;fwConfigs&quot;, &quot;PANEL_MIXEDORBADDPETYPES&quot;), &quot;&quot;);
		return;		
	}

	status = dpFunctionOnOff.state(0);
  bStatistical =  ckStatistical.state(0);
	bInitFromArchive = ckInitFromArchive.state(0);
  iDelay = spnDelay.text;
  iInterval = spnInterval.text;
	okButton.enabled = FALSE;
	applyButton.enabled = FALSE;
	closeButton.enabled = FALSE;
	if(panelMode == MULTIPLE_DPES)
		fwOpenProgressBar(&quot;Configuration panel&quot;, &quot;Saving configuration...&quot;, 1);
	
	if(status==TRUE)
	{
		sDpFunction = text_function.text;
		_fwGetDpesFromLists(&quot;dyn_list_param&quot;, dsParams, exceptionInfo);
		_fwGetDpesFromLists(&quot;dyn_list_global&quot;, dsGlobals, exceptionInfo);
    _fwGetStatTypesFromLists(&quot;dyn_list_param&quot;, diStatTypes, exceptionInfo);
    //create dp function configuration object
    fwDpFunction_objectInitialize(daDpFuncObject);
    daDpFuncObject[fwDpFunction_OBJ_TYPE] = bStatistical ? DPCONFIG_STAT_FUNCTION : DPCONFIG_DP_FUNCTION;
    daDpFuncObject[fwDpFunction_OBJ_FUNCTION] = sDpFunction;
    daDpFuncObject[fwDpFunction_OBJ_PARAM] = dsParams;
    daDpFuncObject[fwDpFunction_OBJ_GLOBAL] = dsGlobals;
    daDpFuncObject[fwDpFunction_OBJ_STAT_DELAY] = iDelay;
    daDpFuncObject[fwDpFunction_OBJ_STAT_READ_ARCHIVE] = bInitFromArchive;
    daDpFuncObject[fwDpFunction_OBJ_STAT_INTERVAL] = iInterval;
    daDpFuncObject[fwDpFunction_OBJ_STAT_TYPE] = diStatTypes;    
	  daDpFuncObjects[1] = daDpFuncObject;
		if(panelMode != OBJECT)
		{
      fwDpFunction_objectSetMany(DPE_LIST, daDpFuncObjects, exceptionInfo, TRUE);
// 			fwDpFunction_setDpeConnectionMultiple(DPE_LIST, dsParams, dsGlobals, sDpFunction, exceptionInfo, TRUE);
		}
		else
		{
			dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1] = TRUE;
					
			dpeConfigObject[fwDpFunction_DPE_OBJECT_FUNCTION][1] 	= sDpFunction;
			dpeConfigObject[fwDpFunction_DPE_OBJECT_PARAMETERS] 	= dsParams;
//			Globals not used until device definition updated
//			dpeConfigObject[fwDpFunction_DPE_OBJECT_GLOBALS]		= dsGlobals;
			dpeConfigObject[fwDpFunction_DPE_OBJECT_GLOBALS]		= makeDynString();
			
//DebugN(DPE_LIST, dsParams, sDpFunction);
			fwGeneral_setGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
			//DebugN(&quot;Modified &quot;, dpeConfigObject);
		}
	}
	else
	{	
		if(panelMode != OBJECT)
		{
			text_function.text = &quot;&quot;;
			dyn_list_param.items = makeDynString();
			dyn_list_global.items = makeDynString();
			fwDpFunction_deleteMultiple(DPE_LIST, exceptionInfo);
		}
		else
		{
			dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1] = TRUE;
					
			dpeConfigObject[fwDpFunction_DPE_OBJECT_FUNCTION][1] 	= &quot;&quot;;
			dpeConfigObject[fwDpFunction_DPE_OBJECT_PARAMETERS] 	= makeDynString();
			dpeConfigObject[fwDpFunction_DPE_OBJECT_GLOBALS]		= makeDynString();
			
			fwGeneral_setGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
//			DebugN(&quot;Modified &quot;, dpeConfigObject);
		}
	}

	okButton.enabled = TRUE;
	applyButton.enabled = TRUE;
	closeButton.enabled = TRUE;
	if(panelMode == MULTIPLE_DPES)
		fwCloseProgressBar(&quot;Configuration complete&quot;);
}

checkSystemsOfDpes(dyn_string dpes, bool &amp;onMultipleSystems)
{
	int i, length;
	dyn_bool hasSystemName;
	string systemName;

	if(dynlen(dynPatternMatch(&quot;*:*&quot;, dpes)) &lt;= 0)
	{
		//all dpes are local (no system name specified) so show local dpes system name
		DPE_FILTER = DPSUB_SYS_DP_EL;
		DPA_FILTER = DPSUB_SYS_DP_EL_CONF_DET_ATT;
		onMultipleSystems = FALSE;
	}
	else 
	{
		hasSystemName = patternMatch(&quot;*:*&quot;, dpes);
		length = dynlen(dpes);
		for(i=1; i&lt;=length; i++)
		{
			if(!hasSystemName[i])
				dpes[i] = getSystemName() + dpes[i];
		}		
	
		systemName = dpSubStr(dpes[1], DPSUB_SYS);
		if(dynlen(dynPatternMatch(systemName + &quot;*&quot;, dpes)) == dynlen(dpes))
		{
			//all dpes are from the same system so show dpes system name
			DPE_FILTER = DPSUB_SYS_DP_EL;
			DPA_FILTER = DPSUB_SYS_DP_EL_CONF_DET_ATT;
			onMultipleSystems = FALSE;
		}
		else
		{
			//dpes are from different systems so hide dpes system name
			DPE_FILTER = DPSUB_DP_EL;
			DPA_FILTER = DPSUB_DP_EL_CONF_DET_ATT;
			onMultipleSystems = TRUE;
		}
	}
}

enableStat(bool state)
{
  int h,w, h0,w0, x0,y0, x1,y1, x2,y2;
  dyn_string exc;
  
  spnDelay.enabled = state;
  spnInterval.enabled = state;
  ckInitFromArchive.enabled = state;
  cbStatType.visible = state;
  if(state)
  {
    getValue(&quot;cbStatType&quot;,&quot;size&quot;,w,h);
    getValue(&quot;cbStatType&quot;,&quot;position&quot;,x1,y1);
  }
  else
  {
    getValue(&quot;cue_param&quot;,&quot;size&quot;,w,h);
    getValue(&quot;cue_param&quot;,&quot;position&quot;,x1,y1);
  }
  getValue(&quot;pb_select_param&quot;,&quot;position&quot;,x2,y2);
  getValue(&quot;dyn_input_param&quot;,&quot;size&quot;,w0,h0);
  getValue(&quot;dyn_input_param&quot;,&quot;position&quot;,x0,y0);
  setValue(&quot;dyn_input_param&quot;,&quot;position&quot;,x1+w+2,y0);
  setValue(&quot;dyn_input_param&quot;,&quot;size&quot;,x2-x1-w-6,h0);
  dyn_list_param.deleteAllItems();
  dyn_list_global.deleteAllItems();
  text_function.text = &quot;&quot;;
 
}
]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	bool doesExist;
	int length, i;
	string dpe, name, sDpFunction, errorString;
	dyn_string exceptionInfo, systems, dsGlobals, dsParams;
  dyn_anytype configObject;
  dyn_int diStatTypes;
  bool bInitFromArch, bStatistical;
  int iDelay, iInterval;
			
	if(isDollarDefined(&quot;$sDpe&quot;))
	{
		dpe = $sDpe;
		strreplace(dpe, &quot; &quot;, &quot;&quot;);
	    DPE_LIST = strsplit(dpe, &quot;|&quot;);
	}
    
	elementNameField.editable(FALSE);

	length = dynlen(DPE_LIST);

	// check whether a dpe, a list of dpes or an object was passed to the panel
	switch(length)
	{
			case 0:
				if(isDollarDefined(&quot;$sDpeConfigObjectVarName&quot;))	// object passed to the panel
				{
					if(getGlobalType($sDpeConfigObjectVarName) != DYN_DYN_ANYTYPE_VAR)
					{
						elementNameField.text(&quot;Wrong object name&quot;);
						dpFunctionOnOff.enabled = FALSE;
						applyButton.enabled = FALSE;
						okButton.enabled = FALSE;
						fwException_raise(	exceptionInfo,
											&quot;WARNING&quot;, &quot;The object &quot; + $sDpeConfigObjectVarName + 
											&quot; doesn't exists or hasn't got the proper format.&quot;, 
											&quot;&quot;);
						fwExceptionHandling_display(exceptionInfo);					
						return;
					}					
					
					panelMode = OBJECT;					
					fwGeneral_getGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
//					DebugN(&quot;Config Panel: &quot;, dpeConfigObject);
						 					
					DPE_LIST[1] = dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_NAME][1];						
					DPE_TYPE	= dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_TYPE][1];					
//					smoothType	= dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1];
					doesExist	= dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1];
					
					sDpFunction	= dpeConfigObject[fwDpFunction_DPE_OBJECT_FUNCTION][1];
					dsParams	= dpeConfigObject[fwDpFunction_DPE_OBJECT_PARAMETERS];
					// Globals not used for the moment until device definition is updated
//					dsGlobals	= dpeConfigObject[fwDpFunction_DPE_OBJECT_GLOBALS];		
					dsGlobals	= makeDynString();

					elementNameField.text(DPE_LIST[1]);					
					DPES_OK = TRUE;
					
					MULTIPLE_SYSTEMS = FALSE;
					DPE_FILTER = DPSUB_DP_EL;
					DPA_FILTER = DPSUB_DP_EL_CONF_DET_ATT;
					
					dyn_list_global.enabled = FALSE;
					dyn_list_global.backCol = &quot;_3DFace&quot;;
					dyn_input_global.enabled = FALSE;
					dyn_input_global.text = &quot;Not available&quot;;
					pb_editor_global.enabled = FALSE;
					pb_after_global.enabled = FALSE;
					pb_before_global.enabled = FALSE;
					pb_modify_global.enabled = FALSE;
					pb_delete_global.enabled = FALSE;
					pb_select_global.enabled = FALSE;
				}
				else // neither dpes nor object passed, nothing to do in the panel
				{
					name = &quot;No Data Point Elements&quot;;
					elementNameField.text(name);
					dpFunctionOnOff.enabled = FALSE;
					okButton.enabled = FALSE;
					applyButton.enabled = FALSE;
					fwException_raise(exceptionInfo, &quot;WARNING&quot;, getCatStr(&quot;fwConfigs&quot;, &quot;PANEL_NODATAPOINTSTOCONFIG&quot;), &quot;&quot;);
					fwExceptionHandling_display(exceptionInfo);
					return;
				}
				break;
			case 1:		// single dpe
				panelMode = SINGLE_DPE;
				dpe = DPE_LIST[1];
				name = dpe;
				elementNameField.text(name);
				
				DPES_OK = _fwConfigs_checkDpeList(DPE_LIST, fwConfigs_PVSS_DP_FUNCT, DPE_TYPE, exceptionInfo, errorString);
				if(!DPES_OK)
					fwException_raise(exceptionInfo, &quot;ERROR&quot;, errorString, &quot;&quot;);
				
				if(dynlen(exceptionInfo)&lt;=0)
				{
					MULTIPLE_SYSTEMS = FALSE;
					DPE_FILTER = DPSUB_SYS_DP_EL;
					DPA_FILTER = DPSUB_SYS_DP_EL_CONF_DET_ATT;
// 					fwDpFunction_getDpeConnection(DPE_LIST[1], doesExist, dsParams, dsGlobals, sDpFunction, exceptionInfo);
          fwDpFunction_objectGet(DPE_LIST[1], doesExist, configObject, exceptionInfo);
          bStatistical = (configObject[fwDpFunction_OBJ_TYPE] == DPCONFIG_STAT_FUNCTION);
        	dsParams = configObject[fwDpFunction_OBJ_PARAM];
        	sDpFunction = configObject[fwDpFunction_OBJ_FUNCTION];
        	dsGlobals = configObject[fwDpFunction_OBJ_GLOBAL];
        	diStatTypes = configObject[fwDpFunction_OBJ_STAT_TYPE];
        	iInterval = configObject[fwDpFunction_OBJ_STAT_INTERVAL];
        	iDelay = configObject[fwDpFunction_OBJ_STAT_DELAY];
        	bInitFromArch = configObject[fwDpFunction_OBJ_STAT_READ_ARCHIVE];                    
				}
				else
					doesExist = FALSE;
				break;
			default:	// multiple dpes
				panelMode = MULTIPLE_DPES;
				dpe = DPE_LIST[1];

				_fwConfigs_getSystemsInDpeList(DPE_LIST, systems, exceptionInfo);
				if(dynlen(systems) == 1)
					elementNameField.text(&quot;Multiple Data Point Elements (from &quot; + systems[1] + &quot;)&quot;);
				else
					elementNameField.text(&quot;Multiple Data Point Elements (from multiple systems)&quot;);

				dpeDetails.visible = TRUE;
				
				DPES_OK = _fwConfigs_checkDpeList(DPE_LIST, fwConfigs_PVSS_DP_FUNCT, DPE_TYPE, exceptionInfo, errorString);
				if(!DPES_OK)
					fwException_raise(exceptionInfo, &quot;ERROR&quot;, errorString, &quot;&quot;);
					
				if(dynlen(exceptionInfo)&lt;=0)
					checkSystemsOfDpes(DPE_LIST, MULTIPLE_SYSTEMS);

				doesExist = FALSE;
				break;
	}

	okButton.enabled = DPES_OK;
	applyButton.enabled = DPES_OK;
  ckStatistical.state(0) = bStatistical;
  ckInitFromArchive.state(0) = bInitFromArch;
  spnInterval.text = iInterval;
  spnDelay.text = iDelay;
  enableStat(bStatistical);
	if(dynlen(exceptionInfo)&gt;0)
	{
		fwExceptionHandling_display(exceptionInfo);
		return;
	}
		
	if(doesExist)
	{
		_fwToggleDpFunctionItems(TRUE);
		dpFunctionOnOff.state(0,true);
		while(dynContains(dsParams, &quot;&quot;) &gt; 0)
			dynRemove(dsParams, dynContains(dsParams, &quot;&quot;));
		_fwSetStatListsFromDpes(&quot;dyn_list_param&quot;, dsParams, diStatTypes, bStatistical, exceptionInfo);		
		while(dynContains(dsGlobals, &quot;&quot;) &gt; 0)
			dynRemove(dsGlobals, dynContains(dsGlobals, &quot;&quot;));
		_fwSetListsFromDpes(&quot;dyn_list_global&quot;, dsGlobals, exceptionInfo);   
		text_function.text = sDpFunction;	
	}
	else
	{
		_fwToggleDpFunctionItems(FALSE);
		dpFunctionOnOff.state(0,FALSE);
		dyn_list_param.items = makeDynString();
		dyn_list_global.items = makeDynString();
		text_function.text = &quot;&quot;;	
	}

	if(dynlen(exceptionInfo)&gt;0)
		fwExceptionHandling_display(exceptionInfo);	
}
]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="Text3" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">11</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">12</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,19,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,19,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">DP Function Configuration</prop>
     <prop name="en_US.iso88591">DP Function Configuration</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Text4" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">22</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">255 131</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 55</prop>
    <prop name="Size">117 23</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">DP Element:</prop>
     <prop name="en_US.iso88591">DP Element:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="box_param" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">37</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">14 299</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">19</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1 0 0 1 -4 25</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Function Parameters (p1, p2...)</prop>
     <prop name="en_US.iso88591">Function Parameters (p1, p2...)</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">14 129</prop>
    <prop name="Size">304 170</prop>
   </properties>
  </shape>
  <shape Name="box_global" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">38</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">324 299</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">20</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1 0 0 1 -4 25</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Global Values (g1, g2... set when config is saved)</prop>
     <prop name="en_US.iso88591">Global Values (g1, g2... set when config is saved)</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">324 129</prop>
    <prop name="Size">304 170</prop>
   </properties>
  </shape>
  <shape Name="cue_function" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">40</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">255 408</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">22</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 332</prop>
    <prop name="Size">76 23</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">DP Function:</prop>
     <prop name="en_US.iso88591">DP Function:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="help_function" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">43</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">517 472</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">25</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">10 360</prop>
    <prop name="Size">346 21</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(Give function in terms of p and g values) e.g. p1*p2+g1
</prop>
     <prop name="en_US.iso88591">(Give function in terms of p and g values) e.g. p1*p2+g1
</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="cue_param" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">50</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">15 294</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">32</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">15 294</prop>
    <prop name="Size">21 23</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">p = </prop>
     <prop name="en_US.iso88591">p = </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="cue_global" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">51</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">384 370</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">33</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">325 294</prop>
    <prop name="Size">27 23</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">g = </prop>
     <prop name="en_US.iso88591">g = </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="multipleSystemWarning" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">60</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">166 96</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{255,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">41</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">170 100</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">The data point elements to configure are from multiple systems. You may
proceed, but all parameter and global dpes must exists on all of the systems.</prop>
     <prop name="en_US.iso88591">The data point elements to configure are from multiple systems. You may
proceed, but all parameter and global dpes must exists on all of the systems.</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">4</prop>
    <prop name="Bordered">True</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="applyButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">21</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 0</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">8</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">460 350</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Apply</prop>
     <prop name="en_US.iso88591">Apply</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	dyn_string exceptionInfo;

	saveSettings(exceptionInfo);
	if(dynlen(exceptionInfo) &gt; 0)
		fwExceptionHandling_display(exceptionInfo);
}]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	int x, y;

	if(isDollarDefined(&quot;$bHierarchyBrowser&quot;))
	{
		if(!$bHierarchyBrowser)
			closeButton.visible = TRUE;
		else
		{
			getValue(&quot;&quot;, &quot;position&quot;, x, y);
			this.position(x + 90,y);	
		}
	}
	else
		closeButton.visible = TRUE;
		
	this.visible = TRUE;	
}]]></script>
   </events>
  </shape>
  <shape Name="closeButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">28</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1492 929</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">9</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">550 350</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Close</prop>
     <prop name="en_US.iso88591">Close</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOff();
}]]></script>
   </events>
  </shape>
  <shape Name="elementNameField" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">23</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">347 103</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">90 50</prop>
    <prop name="Size">541 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dpeDetails" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">25</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">460 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">460 10</prop>
    <prop name="Size">121 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Select Elements</prop>
     <prop name="en_US.iso88591">Select Elements</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	int i;
	string errorString;
	dyn_string listItems, systems, returnedDpeList, exceptionInfo;
	dyn_float cancelOrOk;

	ChildPanelOnCentralModalReturn(&quot;fwConfigs/fwDpeSelector.pnl&quot;, &quot;Choose Data Point Elements&quot;,
									makeDynString(&quot;$dsAllDpes:&quot;+$sDpe, &quot;$dsIncludedDpes:&quot;+DPE_LIST, &quot;$sConfigType:&quot;+fwConfigs_PVSS_DP_FUNCT),
									cancelOrOk, returnedDpeList);
	if(cancelOrOk[1] &gt; 0.5)
	{
		if(DPE_LIST != returnedDpeList)
		{
			DPE_LIST = returnedDpeList;
			DPES_OK = _fwConfigs_checkDpeList(DPE_LIST, fwConfigs_PVSS_DP_FUNCT, DPE_TYPE, exceptionInfo, errorString);
			if(!DPES_OK)
				fwException_raise(exceptionInfo, &quot;ERROR&quot;, errorString, &quot;&quot;);

			_fwConfigs_getSystemsInDpeList(DPE_LIST, systems, exceptionInfo);
			if(dynlen(DPE_LIST)== 1)
				elementNameField.text(DPE_LIST[1]);
			else
			{
				if(dynlen(systems) == 1)
					elementNameField.text(&quot;Multiple Data Point Elements (from &quot; + systems[1] + &quot;)&quot;);
				else
					elementNameField.text(&quot;Multiple Data Point Elements (from multiple systems)&quot;);
			}

			checkSystemsOfDpes(DPE_LIST, MULTIPLE_SYSTEMS);
			dyn_list_param.items = makeDynString();
			dyn_list_global.items = makeDynString();

			okButton.enabled = DPES_OK;
			applyButton.enabled = DPES_OK;

			dpFunctionOnOff.state(0) = FALSE;
			_fwToggleDpFunctionItems(FALSE);
		}
	}	
}]]></script>
   </events>
  </shape>
  <shape Name="dpFunctionOnOff" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">20</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 80</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 80</prop>
    <prop name="Size">156 26</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">DP Function ON/OFF</prop>
       <prop name="en_US.iso88591">DP Function ON/OFF</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	bool status;
	dyn_string exceptionInfo;
	
  status = this.state(0);
	
	if(!DPES_OK)
	{
		this.state(0) = FALSE;
		
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, getCatStr(&quot;fwConfigs&quot;, &quot;PANEL_MIXEDORBADDPETYPES&quot;), &quot;&quot;);
		if(dynlen(exceptionInfo)&gt;0)
			fwExceptionHandling_display(exceptionInfo);
		return;
	}

	if(status==TRUE)
	{
		_fwToggleDpFunctionItems(TRUE);
	}
	else
	{	
		_fwToggleDpFunctionItems(FALSE);
	}
}]]></script>
   </events>
  </shape>
  <shape Name="okButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">29</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 0</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">370 350</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OK</prop>
     <prop name="en_US.iso88591">OK</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	dyn_string exceptionInfo;

	saveSettings(exceptionInfo);
	if(dynlen(exceptionInfo) &gt; 0)
		fwExceptionHandling_display(exceptionInfo);
	else
		PanelOff();
}]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	if(isDollarDefined(&quot;$bHierarchyBrowser&quot;))
	{
		if(!$bHierarchyBrowser)
			this.visible = TRUE;
	}
	else
		this.visible = TRUE;	
}
]]></script>
   </events>
  </shape>
  <reference parentSerial="-1" Name="Group2" referenceId="0">
   <properties>
    <prop name="FileName">objects/fwGeneral/fwHelpButton.pnl</prop>
    <prop name="Location">604 10</prop>
    <prop name="TabOrder">15</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sPanelRelativePath</prop>
      <prop name="Value">fwConfigs/fwDpFunctionConfig</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <shape Name="dyn_list_param" shapeType="SELECTION_LIST" layerId="0">
   <properties>
    <prop name="serialId">33</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">16 178</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">15</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">16 178</prop>
    <prop name="Size">211 101</prop>
    <prop name="Listitems"/>
    <prop name="SelectionMode">SingleSelection</prop>
    <prop name="alternatingRowColors">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
  int        pos;
  string     s, sType;
  dyn_string ds;
  int statTypePos,statTypeEnd ;

  getMultiValue(&quot;dyn_list_param&quot;,&quot;selectedPos&quot;,pos);
  if(pos!=-1)
  {
    getValue(&quot;dyn_list_param&quot;,&quot;selectedText&quot;,s);
    statTypeEnd = strpos(s,&quot;)&quot;);
    if(statTypeEnd&gt;1)//statistical -&gt; extract type
    {
      ds=strsplit(s,&quot;)&quot;);         
      setValue(&quot;dyn_input_param&quot;,&quot;text&quot;,ds[2]);
      statTypePos = strpos(s,&quot;(&quot;);
      sType = substr(s, statTypePos+1, statTypeEnd-statTypePos-1);
      setValue(&quot;cbStatType&quot;,&quot;text&quot;,sType);      
    }  
    else
    {    
      ds=strsplit(s,&quot;=&quot;);
      setValue(&quot;dyn_input_param&quot;,&quot;text&quot;,ds[2]);
    }
  }
}]]></script>
   </events>
  </shape>
  <shape Name="dyn_input_param" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">34</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">35.99999999999994 288</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">16</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">36 288</prop>
    <prop name="Size">231 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="text_function" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">41</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">203.1428571428571 385</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">23</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">90 332</prop>
    <prop name="Size">241 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="pb_before_param" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">44</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">270 225</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">26</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">272 227</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">insertB_en.gif</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i,pos;
  bool       ok;
  string     s,ss,dpe;
  dyn_string list,list2,ds,dss,dpes,exceptionInfo;

  getMultiValue(&quot;dyn_input_param&quot;,&quot;text&quot;,s,
                &quot;dyn_list_param&quot;,&quot;items&quot;,list,
                &quot;dyn_list_param&quot;,&quot;selectedPos&quot;,pos);

	_fwCheckInputDpe(&quot;dyn_list_param&quot;, s, exceptionInfo);
	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
    return;	
	}

	if(panelMode == OBJECT)
		s=&quot;px=&quot;+s;
	else
	  s=&quot;px=&quot;+dpSubStr(s,DPA_FILTER);

  if(pos&lt;1) pos=1;
  dynInsertAt(list,s,pos);
  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=&quot;p&quot;+i+&quot;=&quot;+ds[2];
    if (strpos(list[i],&quot;.&quot;)&lt;0) list[i]+=&quot;.&quot;;
  }
  setValue(&quot;dyn_list_param&quot;,&quot;items&quot;,list);
  setValue(&quot;dyn_list_param&quot;,&quot;selectedPos&quot;,pos);
}]]></script>
   </events>
  </shape>
  <shape Name="pb_delete_param" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">45</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">270 255</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">27</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">272 257</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">del_en.gif</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i,pos;
  string     s;
  dyn_string list,ds;

  getMultiValue(&quot;dyn_list_param&quot;,&quot;items&quot;,list,
                &quot;dyn_list_param&quot;,&quot;selectedPos&quot;,pos);
  if(pos&gt;0)
    dynRemove(list,pos);
  if (pos&gt;dynlen(list))
    pos--;
  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=&quot;p&quot;+i+&quot;=&quot;+ds[2];
  }
  if (pos&gt;0)
  {
    setValue(&quot;dyn_list_param&quot;,&quot;items&quot;,list);
    setValue(&quot;dyn_list_param&quot;,&quot;selectedPos&quot;,pos);
    setValue(&quot;dyn_input_param&quot;,&quot;text&quot;,strsplit(list[pos],&quot;=&quot;)[2]);
  }
  else
    setMultiValue(&quot;dyn_list_param&quot;,&quot;items&quot;,list,
                  &quot;dyn_input_param&quot;,&quot;text&quot;,&quot;&quot;);
}]]></script>
   </events>
  </shape>
  <shape Name="pb_after_param" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">46</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">230 225</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">28</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">232 227</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">insertA_en.gif</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i,pos;
  bool       ok, stat;
  string     s,ss,dpe, sType;
  dyn_string list,list2,ds,dss,dpes,exceptionInfo;

  getMultiValue(&quot;dyn_input_param&quot;,&quot;text&quot;,s,
                &quot;dyn_list_param&quot;,&quot;items&quot;,list,
                &quot;dyn_list_param&quot;,&quot;selectedPos&quot;,pos,
                &quot;cbStatType&quot;,&quot;text&quot;,sType,
                &quot;ckStatistical&quot;,&quot;state&quot;,0,stat);

	_fwCheckInputDpe(&quot;dyn_list_param&quot;, s, exceptionInfo);
	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
    return;	
	}
  
	if(panelMode == OBJECT)
  {
    if(stat)      
		  s=&quot;px=(&quot;+sType+&quot;)&quot;+s;
    else     
		  s=&quot;px=&quot;+s;
  }
	else
  {
    if(stat)      
  	  s=&quot;px=(&quot;+sType+&quot;)&quot;+dpSubStr(s,DPA_FILTER);
    else     
  	  s=&quot;px=&quot;+dpSubStr(s,DPA_FILTER);
  }
  if(pos&lt;1) pos=dynlen(list);
  dynInsertAt(list,s,pos+1);
  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=&quot;p&quot;+i+&quot;=&quot;+ds[2];
    if (strpos(list[i],&quot;.&quot;)&lt;0) list[i]+=&quot;.&quot;;
  }
  setValue(&quot;dyn_list_param&quot;,&quot;items&quot;,list);
  setValue(&quot;dyn_list_param&quot;,&quot;selectedPos&quot;,pos+1);
}]]></script>
   </events>
  </shape>
  <shape Name="pb_modify_param" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">47</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">230 255</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">29</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">232 257</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">apply_en.gif</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i,pos;
  bool       ok, stat;
  string     s,dpe, sType;
  dyn_string list,tempList,ds,dpes,exceptionInfo;

  getMultiValue(&quot;dyn_input_param&quot;,&quot;text&quot;,s,
                &quot;dyn_list_param&quot;,&quot;items&quot;,list,
                &quot;dyn_list_param&quot;,&quot;selectedPos&quot;,pos,
                &quot;cbStatType&quot;,&quot;text&quot;,sType,
                &quot;ckStatistical&quot;,&quot;state&quot;,0,stat);

  if(pos &lt;= 0)
     return;
    
	tempList = list;
	tempList[pos] = &quot;&quot;;
	dyn_list_param.items = tempList;
	_fwCheckInputDpe(&quot;dyn_list_param&quot;, s, exceptionInfo);
	dyn_list_param.items = list;
	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
    return;	
	}

	if(panelMode == OBJECT)
  {
    if(stat)      
		  s=&quot;px=(&quot;+sType+&quot;)&quot;+s;
    else     
		  s=&quot;px=&quot;+s;
  }
	else
  {
    if(stat)      
  	  s=&quot;px=(&quot;+sType+&quot;)&quot;+dpSubStr(s,DPA_FILTER);
    else     
  	  s=&quot;px=&quot;+dpSubStr(s,DPA_FILTER);
  }

    list[pos]=s;

  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=&quot;p&quot;+i+&quot;=&quot;+ds[2];
    if (strpos(list[i],&quot;.&quot;)&lt;0) list[i]+=&quot;.&quot;;
  }
  setValue(&quot;dyn_list_param&quot;,&quot;items&quot;,list);
  setValue(&quot;dyn_list_param&quot;,&quot;selectedPos&quot;,pos);
}]]></script>
   </events>
  </shape>
  <shape Name="pb_select_param" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">48</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">272 287</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">30</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">272 287</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">dpsel.xpm</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int pos;
  string s;

  dpSelector(s,false,&quot;ALL_SYSTEM_NAME_SYS&quot;);
  if( s != &quot;&quot; )
  {
  	s = dpSubStr(s, DPE_FILTER);//DPSUB_SYS_DP_EL);
    setValue( &quot;dyn_input_param&quot;, &quot;text&quot;, s );
  }
}]]></script>
   </events>
  </shape>
  <shape Name="pb_editor_param" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">49</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">230 195</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">31</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">232 197</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">editor.xpm</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i, pos, dpPos;
  dyn_float  df;
  dyn_string list,sPara,ds,exceptionInfo;
  string sDp, sStatFunc;
  bool bStat;

  getMultiValue(&quot;dyn_list_param&quot;,&quot;items&quot;,list);
  bStat = ckStatistical.state(0);
  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=ds[2];
  }

  sPara[1]=paJoinString(list,&quot;\n&quot;); 
  ChildPanelOnCentralReturn(&quot;para/nvTextEditor.pnl&quot;,
							                 &quot;DP Function Parameters&quot;,
							                 sPara, df, ds);
  if (df[1] &gt;= 1)
  {
  	while(dynContains(ds, &quot;&quot;))
  	{
  		pos = dynContains(ds, &quot;&quot;);
  		dynRemove(ds, pos);
    }
    
    for (i=1;i&lt;=dynlen(ds);i++)
    {
      if(bStat)
      {
        dpPos = strpos(ds[i],&quot;)&quot;);
        if(dpPos&lt;1)
        {
    			fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The data point &quot;+ds[i]+&quot; must have a statistical function&quot;, &quot;&quot;);
    	    break;	
        }
        sDp = substr(ds[i], dpPos+1);
        sStatFunc =  substr(ds[i], 1,dpPos-1);
        if(!mappingHasKey(mStatTypes,sStatFunc))
        {
    			fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The statistical function for the data point &quot;+ds[i]+&quot; is not valid&quot;, &quot;&quot;);
    	    break;	
        }
      }
      else
        sDp = ds[i];
	 	_fwCheckInputDpe(&quot;&quot;, sDp, exceptionInfo);
    if(bStat)   
     ds[i]=&quot;p&quot;+i+&quot;=(&quot;+sStatFunc+&quot;)&quot;+sDp;
    else
     ds[i]=&quot;p&quot;+i+&quot;=&quot;+sDp;
    
    }
		if(dynlen(exceptionInfo) &gt; 0)
		{
			fwExceptionHandling_display(exceptionInfo);
	    return;	
		}
    setValue(&quot;dyn_list_param&quot;,&quot;items&quot;,ds);
    setValue(&quot;dyn_list_param&quot;,&quot;selectedPos&quot;,0);
  }
}]]></script>
   </events>
  </shape>
  <shape Name="dyn_list_global" shapeType="SELECTION_LIST" layerId="0">
   <properties>
    <prop name="serialId">52</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">326 178</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">34</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">326 178</prop>
    <prop name="Size">211 101</prop>
    <prop name="Listitems"/>
    <prop name="SelectionMode">SingleSelection</prop>
    <prop name="alternatingRowColors">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
  int        pos;
  string     s;
  dyn_string ds;

  getMultiValue(&quot;dyn_list_global&quot;,&quot;selectedPos&quot;,pos);
  if(pos!=-1)
  {
    getValue(&quot;dyn_list_global&quot;,&quot;selectedText&quot;,s);
    ds=strsplit(s,&quot;=&quot;);
    setValue(&quot;dyn_input_global&quot;,&quot;text&quot;,ds[2]);
  }
}]]></script>
   </events>
  </shape>
  <shape Name="dyn_input_global" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">53</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">350.0000000000001 288</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">35</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">350 288</prop>
    <prop name="Size">227 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="pb_before_global" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">54</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">580 225</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">36</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">582 227</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">insertB_en.gif</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i,pos;
  bool       ok;
  string     s,ss,dpe;
  dyn_string list,list2,ds,dss,dpes,exceptionInfo;

  getMultiValue(&quot;dyn_input_global&quot;,&quot;text&quot;,s,
                &quot;dyn_list_global&quot;,&quot;items&quot;,list,
                &quot;dyn_list_global&quot;,&quot;selectedPos&quot;,pos);

	_fwCheckInputDpe(&quot;dyn_list_global&quot;, s, exceptionInfo);
	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
    return;	
	}

	if(panelMode == OBJECT)
		s=&quot;gx=&quot;+s;
	else
	  s=&quot;gx=&quot;+dpSubStr(s,DPA_FILTER);

  if(pos&lt;1) pos=1;
  dynInsertAt(list,s,pos);
  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=&quot;g&quot;+i+&quot;=&quot;+ds[2];
    if (strpos(list[i],&quot;.&quot;)&lt;0) list[i]+=&quot;.&quot;;
  }
  setValue(&quot;dyn_list_global&quot;,&quot;items&quot;,list);
  setValue(&quot;dyn_list_global&quot;,&quot;selectedPos&quot;,pos);
}]]></script>
   </events>
  </shape>
  <shape Name="pb_delete_global" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">55</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">580 255</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">37</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">582 257</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">del_en.gif</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i,pos;
  string     s;
  dyn_string list,ds;

  getMultiValue(&quot;dyn_list_global&quot;,&quot;items&quot;,list,
                &quot;dyn_list_global&quot;,&quot;selectedPos&quot;,pos);
  if(pos&gt;0)
    dynRemove(list,pos);
  if (pos&gt;dynlen(list))
    pos--;
  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=&quot;g&quot;+i+&quot;=&quot;+ds[2];
  }
  if (pos&gt;0)
  {
    setValue(&quot;dyn_list_global&quot;,&quot;items&quot;,list);
    setValue(&quot;dyn_list_global&quot;,&quot;selectedPos&quot;,pos);
    setValue(&quot;dyn_input_global&quot;,&quot;text&quot;,strsplit(list[pos],&quot;=&quot;)[2]);
  }
  else
    setMultiValue(&quot;dyn_list_global&quot;,&quot;items&quot;,list,
                  &quot;dyn_input_global&quot;,&quot;text&quot;,&quot;&quot;);
}]]></script>
   </events>
  </shape>
  <shape Name="pb_after_global" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">56</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">540 225</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">38</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">542 227</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">insertA_en.gif</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i,pos;
  bool       ok;
  string     s,ss,dpe;
  dyn_string list,list2,ds,dss,dpes,exceptionInfo;

  getMultiValue(&quot;dyn_input_global&quot;,&quot;text&quot;,s,
                &quot;dyn_list_global&quot;,&quot;items&quot;,list,
                &quot;dyn_list_global&quot;,&quot;selectedPos&quot;,pos);

	_fwCheckInputDpe(&quot;dyn_list_global&quot;, s, exceptionInfo);
	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
    return;	
	}
  
	if(panelMode == OBJECT)
		s=&quot;gx=&quot;+s;
	else
	  s=&quot;gx=&quot;+dpSubStr(s,DPA_FILTER);

  if(pos&lt;1) pos=dynlen(list);
  dynInsertAt(list,s,pos+1);
  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=&quot;g&quot;+i+&quot;=&quot;+ds[2];
    if (strpos(list[i],&quot;.&quot;)&lt;0) list[i]+=&quot;.&quot;;
  }
  setValue(&quot;dyn_list_global&quot;,&quot;items&quot;,list);
  setValue(&quot;dyn_list_global&quot;,&quot;selectedPos&quot;,pos+1);
}]]></script>
   </events>
  </shape>
  <shape Name="pb_modify_global" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">57</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">540 255</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">39</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">542 257</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">apply_en.gif</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i,pos;
  bool       ok;
  string     s,dpe;
  dyn_string list,tempList,ds,dpes,exceptionInfo;

  getMultiValue(&quot;dyn_input_global&quot;,&quot;text&quot;,s,
                &quot;dyn_list_global&quot;,&quot;items&quot;,list,
                &quot;dyn_list_global&quot;,&quot;selectedPos&quot;,pos);

  if(pos &lt;= 0)
     return;

  	tempList = list;
	tempList[pos] = &quot;&quot;;
	dyn_list_global.items = tempList;
	_fwCheckInputDpe(&quot;dyn_list_global&quot;, s, exceptionInfo);
	dyn_list_global.items = list;
	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
    return;	
	}

	if(panelMode == OBJECT)
		s=&quot;gx=&quot;+s;
	else
	  s=&quot;gx=&quot;+dpSubStr(s,DPA_FILTER);

    list[pos]=s;
  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=&quot;g&quot;+i+&quot;=&quot;+ds[2];
    if (strpos(list[i],&quot;.&quot;)&lt;0) list[i]+=&quot;.&quot;;
  }
  setValue(&quot;dyn_list_global&quot;,&quot;items&quot;,list);
  setValue(&quot;dyn_list_global&quot;,&quot;selectedPos&quot;,pos);
}]]></script>
   </events>
  </shape>
  <shape Name="pb_select_global" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">58</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">580 285</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">40</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">582 287</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">dpsel.xpm</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int pos;
  string s;

  dpSelector(s,false,&quot;ALL_SYSTEM_NAME_SYS&quot;);
  if( s != &quot;&quot; )
  {
  	s = dpSubStr(s, DPE_FILTER);//DPSUB_SYS_DP_EL);
    setValue( &quot;dyn_input_global&quot;, &quot;text&quot;, s );
  }
}]]></script>
   </events>
  </shape>
  <shape Name="pb_editor_global" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">59</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">540 195</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">41</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
     <prop name="de_AT.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1|-13,0,0,0,500,0,0,0,0,0,0,0,16,arial</prop>
    </prop>
    <prop name="Location">542 197</prop>
    <prop name="Size">37 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">editor.xpm</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  int        i, pos;
  dyn_float  df;
  dyn_string list,sPara,ds,exceptionInfo;

  getMultiValue(&quot;dyn_list_global&quot;,&quot;items&quot;,list);
  for (i=1;i&lt;=dynlen(list);i++)
  {
    ds=strsplit(list[i],&quot;=&quot;);
    list[i]=ds[2];
  }

  sPara[1]=paJoinString(list,&quot;\n&quot;); 
  ChildPanelOnCentralReturn(&quot;para/nvTextEditor.pnl&quot;,
							                 &quot;DP Function Globals&quot;,
							                 sPara, df, ds);
  if (df[1] &gt;= 1)
  {
  	while(dynContains(ds, &quot;&quot;))
  	{
  		pos = dynContains(ds, &quot;&quot;);
  		dynRemove(ds, pos);
    }
    
    for (i=1;i&lt;=dynlen(ds);i++)
    {
	 	_fwCheckInputDpe(&quot;&quot;, ds[i], exceptionInfo);
     ds[i]=&quot;g&quot;+i+&quot;=&quot;+ds[i];
    }
		if(dynlen(exceptionInfo) &gt; 0)
		{
			fwExceptionHandling_display(exceptionInfo);
	    return;	
		}

    setValue(&quot;dyn_list_global&quot;,&quot;items&quot;,ds);
    setValue(&quot;dyn_list_global&quot;,&quot;selectedPos&quot;,0);
  }
}]]></script>
   </events>
  </shape>
  <shape Name="cbStatType" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">62</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">36.00000000000001 288</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">42</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,10,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">36 288</prop>
    <prop name="Size">106 23</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
}
]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
  dyn_string dsStatTypes;
  mStatTypes[&quot;MIN&quot;]=0;
  mStatTypes[&quot;MAX&quot;]=1;
  mStatTypes[&quot;MIN_TIME&quot;]=2;
  mStatTypes[&quot;MAX_TIME&quot;]=3;
  mStatTypes[&quot;NUMBER&quot;]=4;
  mStatTypes[&quot;SUM&quot;]=5;
  mStatTypes[&quot;INTRGRAL0&quot;]=6;
  mStatTypes[&quot;INTEGRAL1&quot;]=7;
  mStatTypes[&quot;AVG&quot;]=8;
  mStatTypes[&quot;AVG_WTO&quot;]=9;
  mStatTypes[&quot;AVG_WT1&quot;]=10;
  mStatTypes[&quot;TIME0&quot;]=11;
  mStatTypes[&quot;TIME1&quot;]=12;
  mStatTypes[&quot;CHANGES&quot;]=13;
  mStatTypes[&quot;CHANGES01&quot;]=14;
  mStatTypes[&quot;CHANGES10&quot;]=15;
  mStatTypes[&quot;SAMPLE&quot;]=16;
  mStatTypes[&quot;ENDVALUE&quot;]=17;
  mStatTypes[&quot;DIFF&quot;]=18;
  for(int i=1 ; i&lt;=mappinglen(mStatTypes) ; i++)
  {
    dsStatTypes[i] = mappingGetKey(mStatTypes, i);
  }
  this.items = dsStatTypes;
}]]></script>
   </events>
  </shape>
  <shape Name="frameStatistical" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">69</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">200 73</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">{0,0,0}</prop>
    <prop name="TabOrder">49</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,0]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1.030878859857482 0 0 1 -16.17577197149647 10</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">200 73</prop>
    <prop name="Size">421 58</prop>
   </properties>
  </shape>
  <shape Name="ckStatistical" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">70</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">200 81</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">50</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,10,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">200 81</prop>
    <prop name="Size">81 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Statistical</prop>
       <prop name="en_US.iso88591">Statistical</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, int state)
{
  bool ok;
  dyn_string exc;
  
  if(dyn_list_param.itemCount&gt;0 || dyn_list_global.itemCount&gt;0)
    fwGeneral_openMessagePanel(&quot;Changing type of function will clear the fields.\nDo you want to continue?&quot;, ok, exc, &quot;Confirm type change?&quot;);
  else
    ok=1;
  
  if(ok) 
  {
    enableStat(state);
  }
  else
    this.state(0) = !state;
}]]></script>
   </events>
  </shape>
  <shape Name="ckInitFromArchive" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">71</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">470 105</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">51</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">Initialize calculation from archive</prop>
     <prop name="en_US.iso88591">Initialize calculation from archive</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,10,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">470 105</prop>
    <prop name="Size">139 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Init calc from archive</prop>
       <prop name="en_US.iso88591">Init calc from archive</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="spnInterval" shapeType="SPIN_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">72</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">251.9999999999999 107</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">52</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,10,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">252 107</prop>
    <prop name="Size">69 21</prop>
    <prop name="MinimumID">1</prop>
    <prop name="MaximumID">999999</prop>
    <prop name="IncrAccelerator">1</prop>
    <prop name="Position">1</prop>
   </properties>
  </shape>
  <shape Name="lblInterval" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">73</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">202 107</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">53</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">202 107</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,10,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Interval</prop>
     <prop name="en_US.iso88591">Interval</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="spnDelay" shapeType="SPIN_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">74</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">381.9999999999999 107</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">54</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,10,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">382 107</prop>
    <prop name="Size">69 21</prop>
    <prop name="MinimumID">0</prop>
    <prop name="MaximumID">9999999</prop>
    <prop name="IncrAccelerator">1</prop>
    <prop name="Position">0</prop>
   </properties>
  </shape>
  <shape Name="lblDelay" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">75</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">341 107</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">55</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">341 107</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,10,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Delay</prop>
     <prop name="en_US.iso88591">Delay</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
 </shapes>
</panel>
