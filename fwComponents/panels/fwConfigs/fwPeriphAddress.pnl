<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8">(NoName)</prop>
   <prop name="en_US.iso88591">(NoName)</prop>
  </prop>
  <prop name="Size">638 391</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">0 0</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[#uses &quot;para.ctl&quot;

dyn_string DPE_LIST;
int DPE_TYPE;
bool DPES_OK;

// mode in which the panel is used
int panelMode;
const int OBJECT	= fwPeriphAddress_PANEL_MODE_OBJECT;
const int SINGLE_DPE		= fwPeriphAddress_PANEL_MODE_SINGLE_DPE;
const int MULTIPLE_DPES	= fwPeriphAddress_PANEL_MODE_MULTIPLE_DPES;


bool ADDRESS_PANEL_LOW_LEVEL, OPC_ITEM_UPDATE_IN_PROGRESS = FALSE;
bool MODBUS_LOW_LEVEL;
int MODBUS_DIRECTION, MODBUS_INPUT_MODE, MODBUS_SUBINDEX;
shape DIM_NAME_SHAPE, DIM_CLIENT_SERVER_SHAPE, DIM_COMMAND_SERVICE_SHAPE;
mapping TRANSFORM_MODBUS_TEXT_TO_INT, TRANSFORM_MODBUS_INT_TO_TEXT;
mapping FUNCTIONCALL_MODBUS_TEXT_TO_INT, FUNCTIONCALL_MODBUS_INT_TO_TEXT;
mapping FUNCTIONCALL_UNICOS_TEXT_TO_INT, FUNCTIONCALL_UNICOS_INT_TO_TEXT;
mapping SUBINDEX_MAXIMUM;
dyn_string THIRD_PARTY_ADDRESS_TYPES;
string PREVIOUS_ADDRESS_TYPE, CURRENT_SAVED_ADDRESS_TYPE;
dyn_anytype configData;
string SYSTEM_NAME;

string g_previousSymbol;

bool _thirdPartySymbolExists(string addressType)
{
  bool symbolExists;
 switch(addressType)
 {
   case &quot;S7&quot;:
     symbolExists = (shapeExists(&quot;s7ConnNames&quot;));
   break;
   case &quot;CMW&quot;:
     symbolExists = (shapeExists(&quot;referenceField_CMW&quot;));
   break;
   case &quot;fwPeriphAddressS7&quot;:
     symbolExists = (shapeExists(&quot;s7ConnNames&quot;));
   break;
 }
 return symbolExists;
}

showThirdPartySymbol(string addressType)
{
  toggleAllFrames(FALSE);
  string symbolName = &quot;fwPeriphAddress&quot;+addressType;
  g_previousSymbol = symbolName;
	dyn_string exceptionInfo;
  setValue(symbolName, &quot;visible&quot;, TRUE);
  dyn_string shapes = getShapes(myModuleName(), myPanelName(), &quot;&quot;);
  unsigned len = dynlen(shapes);
  for (unsigned i = 1; i &lt;= len; i++) {
    if (strpos(shapes[i], symbolName) != -1) {
      setValue(shapes[i], &quot;visible&quot;, TRUE);
    }
  }

  // FWCORE-3534 invoke the initialization function;
  if (addressType==&quot;OPCUA&quot; || addressType==&quot;MQTT&quot;) {
	// the new, refactored way:
	bool inMultiDpes = (panelMode == MULTIPLE_DPES);
	invokeMethod(symbolName,&quot;initPanel&quot;,$sDpe,exceptionInfo,inMultiDpes,panelMode);
  } else if(isFunctionDefined(&quot;_fwPeriphAddress&quot; + addressType + &quot;_initPanel&quot;)) {
	// the legacy way
			evalScript(exceptionInfo, &quot;dyn_string main(string dpe, dyn_string exInfo)&quot;
													+ &quot;{ &quot;
													+ &quot; _fwPeriphAddress&quot; + addressType + &quot;_initPanel(dpe, exInfo);&quot;
													+ &quot; return exInfo;&quot;
													+ &quot;}&quot;, makeDynString(), $sDpe, exceptionInfo);
	}

  if (addressType != &quot;OPCUA&quot;) {
	  mainOkButton.visible = FALSE;
	  mainApplyButton.visible = FALSE;
  }

	if(dynlen(exceptionInfo)&gt;0)
		fwExceptionHandling_display(exceptionInfo);
}

hideAllThirdPartySymbols()
{
	  bool symbolExists;
	dyn_string shapes = getShapes(myModuleName(), myPanelName(), &quot;&quot;);
  unsigned shapesLength = dynlen(shapes);
	unsigned length = dynlen(THIRD_PARTY_ADDRESS_TYPES);

	for(unsigned  i = 1; i &lt;= length; i++) {
    string symbolName = &quot;fwPeriphAddress&quot; + THIRD_PARTY_ADDRESS_TYPES[i];
 		setValue(symbolName, &quot;visible&quot;, FALSE);    
    for (unsigned j = 1; j &lt;= shapesLength; j++) {
      if (strpos(shapes[j], symbolName) != -1) {
        setValue(shapes[j], &quot;visible&quot;, FALSE);
      }
    }  
	}
  
	if($bHierarchyBrowser || ($bHierarchyBrowser == &quot;&quot;))
	{
		mainOkButton.visible = FALSE;
		mainApplyButton.visible = TRUE;
	}
	else
	{
		mainOkButton.visible = TRUE;
		mainApplyButton.visible = TRUE;
	}
}

getThirdPartyFiles(dyn_string &amp;addressTypes, dyn_string &amp;panelNames)
{
	int i, length, pos;
	string path;
	dyn_string tempNames, supportedTypes;

	for(i=0; i&lt;=SEARCH_PATH_LEN; i++)
	{
		path = getPath(PANELS_REL_PATH + &quot;fwConfigs/&quot;, &quot;&quot;, &quot;&quot;, i);
		tempNames = getFileNames(path, &quot;fwPeriphAddress?*.pnl&quot;);
		dynAppend(panelNames, tempNames);
	}

	pos = dynContains(panelNames, &quot;fwPeriphAddressS7.pnl&quot;);
	dynAppend(supportedTypes, panelNames[pos]);
	pos = dynContains(panelNames, &quot;fwPeriphAddressCMW.pnl&quot;);
	dynAppend(supportedTypes, panelNames[pos]);
	pos = dynContains(panelNames, &quot;fwPeriphAddressSNMP.pnl&quot;);
	dynAppend(supportedTypes, panelNames[pos]);
	pos = dynContains(panelNames, &quot;fwPeriphAddressBACnet.pnl&quot;);
	dynAppend(supportedTypes, panelNames[pos]);
	pos = dynContains(panelNames, &quot;fwPeriphAddressOPCUA.pnl&quot;);
	dynAppend(supportedTypes, panelNames[pos]);
	pos = dynContains(panelNames, &quot;fwPeriphAddressMQTT.pnl&quot;);
	dynAppend(supportedTypes, panelNames[pos]);
	length = dynlen(supportedTypes);
	for(i=1; i&lt;=length; i++)
	{
		addressTypes[i] = substr(supportedTypes[i], 0, strlen(supportedTypes[i]) - 4);
		strreplace(addressTypes[i], &quot;fwPeriphAddress&quot;, &quot;&quot;);
	}
}

initModbusPollGroupNames()
{
 int        i;
//!!!pollgroup
  dyn_string dsPlc = dpNames(SYSTEM_NAME+&quot;*&quot;,&quot;_PollGroup&quot;), ds;

  for ( i = dynlen(dsPlc); i &gt; 0; i-- )
  {
    // don't display redundant datapoints
    if ( i &gt; 1 &amp;&amp;
         strpos(dsPlc[i],&quot;_2&quot;) == strlen(dsPlc[i]) - 2 &amp;&amp;
         dsPlc[i] == dsPlc[i-1] + &quot;_2&quot;
       )
    {
      dynRemove(dsPlc, i);
    }

//    if ( dpSubStr(dsPlc[i],DPSUB_SYS) == &quot;System1:&quot; ) // NoCheckWarning
    if ( i &lt;= dynlen(dsPlc) )
    {
      dsPlc[i] = dpSubStr(dsPlc[i],DPSUB_DP);
      if ( dsPlc[i][0] == &quot;_&quot; )
        dsPlc[i] = substr(dsPlc[i], 1, strlen(dsPlc[i])-1);
    }
  }
  
  if(dynlen(dsPlc) &gt; 0)
  {
	  modbusPollGroupName.items = dsPlc;
	  modbusPollGroupName.text = dsPlc[1];
  }
  
  if(SYSTEM_NAME != getSystemName())
  {
  	modbusPollGroupButton.enabled = FALSE;
		modbusPollGroupButton.toolTipText = &quot;This option is unavailable as you are configuring data points on a remote system.&quot;;
	}
}

_fwShowModbusItems(bool shouldShow)
{
	_fwToggleModbusObjects(shouldShow);
	_fwConstructModbusReference();
}

_fwConstructModbusReference()
{
	string reference, functionCall;

	if(modbusUnicosSelector.number == 0)
	{
		reference += &quot;M.&quot;; // QUANTUM_INPUT_LETTER_MISC moved to unCore
		
		if((modbusInOut.number == 0) &amp;&amp; (modbusInputMode.number != 0))
			functionCall = modbusReadFunctionCalls.text;
		else
			functionCall = modbusWriteFunctionCalls.text;

		reference += modbusPlcNumber.text + &quot;.&quot;;
		reference += FUNCTIONCALL_MODBUS_TEXT_TO_INT[functionCall] + &quot;.&quot;;
		reference += modbusReferenceNumber.text;
	}
	else
	{
		reference += &quot;U.&quot;; // UN_PREMIUM_INPUT_LETTER_MISC moved to unCore
		functionCall = unicosFunctionCalls.text;

		reference += modbusPlcNumber.text + &quot;.&quot;;
		reference += FUNCTIONCALL_UNICOS_TEXT_TO_INT[functionCall] + &quot;.&quot;;
		reference += modbusReferenceNumber.text;
	}
		
	
	modbusReference.text = reference;
}

_fwDeconstructModbusReference()
{
	int functionCall;
	string reference;
	dyn_string referenceParts;
	shape functionCallShape;
	
	reference = modbusReference.text;
	referenceParts = strsplit(reference, &quot;.&quot;);

	if(referenceParts[1] == &quot;M&quot;) // UN_QUANTUM_INPUT_LETTER_MISC moved to unCore
	{
		modbusUnicosSelector.number = 0;
		if((modbusInOut.number == 0) &amp;&amp; (modbusInputMode.number != 0))
			functionCallShape = getShape(&quot;modbusReadFunctionCalls&quot;);
		else
			functionCallShape = getShape(&quot;modbusWriteFunctionCalls&quot;);

		functionCall = referenceParts[3];
		functionCallShape.text = FUNCTIONCALL_MODBUS_INT_TO_TEXT[functionCall];
	}
	else
	{
		modbusUnicosSelector.number = 1;
		functionCallShape = getShape(&quot;unicosFunctionCalls&quot;);

		functionCall = referenceParts[3];
		
		if(functionCall == 19)
			functionCallShape.text = FUNCTIONCALL_UNICOS_INT_TO_TEXT[17];
		else
			functionCallShape.text = FUNCTIONCALL_UNICOS_INT_TO_TEXT[functionCall];
	}
			
	modbusPlcNumber.text = referenceParts[2]&gt;0 ? referenceParts[2] : 1;
	modbusReferenceNumber.text = referenceParts[4];	
}

_fwGetMaximumSubindex(string dataType, int &amp;maxSubindex)
{
	SUBINDEX_MAXIMUM[&quot;undefined&quot;] = 0;
	SUBINDEX_MAXIMUM[&quot;int 16&quot;] = 119;
	SUBINDEX_MAXIMUM[&quot;int 32&quot;] = 59;
	SUBINDEX_MAXIMUM[&quot;uint 16&quot;] = 119;
	SUBINDEX_MAXIMUM[&quot;uint 32&quot;] = 59;
	SUBINDEX_MAXIMUM[&quot;byte&quot;] = 239;
	SUBINDEX_MAXIMUM[&quot;float&quot;] = 59;
	SUBINDEX_MAXIMUM[&quot;boolean&quot;] = 1919;
	SUBINDEX_MAXIMUM[&quot;boolean as byte&quot;] = 0;
	SUBINDEX_MAXIMUM[&quot;string&quot;] = 0;
	SUBINDEX_MAXIMUM[&quot;blob&quot;] = 0;

	maxSubindex = SUBINDEX_MAXIMUM[dataType];
}

_fwInitFunctionCallMappings()
{
	FUNCTIONCALL_UNICOS_TEXT_TO_INT[&quot;Status&quot;] = 1;
	FUNCTIONCALL_UNICOS_TEXT_TO_INT[&quot;Events&quot;] = 18;
	FUNCTIONCALL_UNICOS_TEXT_TO_INT[&quot;Events32&quot;] = 17;
	
	FUNCTIONCALL_UNICOS_INT_TO_TEXT[1] = &quot;Status&quot;;
	FUNCTIONCALL_UNICOS_INT_TO_TEXT[18] = &quot;Events&quot;;
	FUNCTIONCALL_UNICOS_INT_TO_TEXT[17] = &quot;Events32&quot;;
	
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Write Coil&quot;] = 5;
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Write Single Register&quot;] = 6;
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Force Multiple Coils&quot;] = 15;
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Write Multiple Registers&quot;] = 16;
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Read Coils&quot;] = 1;
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Read Input Discretes&quot;] = 2;
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Read Multiple Registers&quot;] = 3;
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Read Input Registers&quot;] = 4;
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Read Exception Status&quot;] = 7;
	FUNCTIONCALL_MODBUS_TEXT_TO_INT[&quot;Read FIFO Queue&quot;] = 24;

	FUNCTIONCALL_MODBUS_INT_TO_TEXT[5] = &quot;Write Coil&quot;;
	FUNCTIONCALL_MODBUS_INT_TO_TEXT[6] = &quot;Write Single Register&quot;;
	FUNCTIONCALL_MODBUS_INT_TO_TEXT[15] = &quot;Force Multiple Coils&quot;;
	FUNCTIONCALL_MODBUS_INT_TO_TEXT[16] = &quot;Write Multiple Registers&quot;;
	FUNCTIONCALL_MODBUS_INT_TO_TEXT[1] = &quot;Read Coils&quot;;
	FUNCTIONCALL_MODBUS_INT_TO_TEXT[2] = &quot;Read Input Discretes&quot;;
	FUNCTIONCALL_MODBUS_INT_TO_TEXT[3] = &quot;Read Multiple Registers&quot;;
	FUNCTIONCALL_MODBUS_INT_TO_TEXT[4] = &quot;Read Input Registers&quot;;
	FUNCTIONCALL_MODBUS_INT_TO_TEXT[7] = &quot;Read Exception Status&quot;;
	FUNCTIONCALL_MODBUS_INT_TO_TEXT[24] = &quot;Read FIFO Queue&quot;;
}

_fwInitTransformationMappings()
{
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;undefined&quot;] = 560;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;int 16&quot;] = 561;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;int 32&quot;] = 562;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;uint 16&quot;] = 563;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;uint 32&quot;] = 564;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;byte&quot;] = 565;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;float&quot;] = 566;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;boolean&quot;] = 567;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;boolean as byte&quot;] = 568;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;string&quot;] = 569;
	TRANSFORM_MODBUS_TEXT_TO_INT[&quot;blob&quot;] = 570;

	TRANSFORM_MODBUS_INT_TO_TEXT[560] = &quot;undefined&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[561] = &quot;int 16&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[562] = &quot;int 32&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[563] = &quot;uint 16&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[564] = &quot;uint 32&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[565] = &quot;byte&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[566] = &quot;float&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[567] = &quot;boolean&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[568] = &quot;boolean as byte&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[569] = &quot;string&quot;;
	TRANSFORM_MODBUS_INT_TO_TEXT[570] = &quot;blob&quot;;
}

_fwToggleModbusObjects(bool shouldShow)
{
	int maxSubindex;

	referenceTitle.visible = shouldShow;
	functionCallsTitle.visible = shouldShow;
	modbusInOut.visible = shouldShow;
	modbusPlcNumber.visible = shouldShow;
	modbusPlcNumberTitle.visible = shouldShow;
	modbusReference.visible = shouldShow;
	modbusReferenceNumber.visible = shouldShow;
	modbusReferenceNumberTitle.visible = shouldShow;
	modbusReferenceTitle.visible = shouldShow;
	modbusSubindex.visible = shouldShow;
	modbusSubindexTitle.visible = shouldShow;
	modbusTransformationSelector.visible = shouldShow;
	modbusTransformationTitle.visible = shouldShow;
	modbusUnicosSelector.visible = shouldShow;

	_fwGetMaximumSubindex(modbusTransformationSelector.text, maxSubindex);
	switch(modbusTransformationSelector.text)
	{
		case &quot;undefined&quot;:
		case &quot;string&quot;:
		case &quot;boolean as byte&quot;:
		case &quot;blob&quot;:
			modbusSubindex.enabled = FALSE;
			modbusSubindex.text = 0;
			break;
		default:
			modbusSubindex.enabled = shouldShow;
			if(MODBUS_SUBINDEX &gt; maxSubindex)
				MODBUS_SUBINDEX = maxSubindex;
				
			modbusSubindex.text = MODBUS_SUBINDEX;
			break;
	}
	modbusSubindex.sbMaximum = maxSubindex;

	if(modbusUnicosSelector.number == 0)
	{
		modbusInOut.enabled = TRUE;
		modbusInOut.number = MODBUS_DIRECTION;
		modbusInputMode.enabled = TRUE;

		if(modbusInOut.number == 1)
		{
			modbusInputMode.visible = FALSE;
      MODBUS_FrameText_receiveMode.visible = FALSE;
      MODBUS_Frame_receiveMode.visible = FALSE;
			modbusLowLevel.visible = FALSE;
			modbusLowLevel.state(0) = FALSE;
		}
		else	
		{
			modbusInputMode.visible = shouldShow;
			modbusInputMode.number = MODBUS_INPUT_MODE;
			modbusLowLevel.visible = shouldShow;
			modbusLowLevel.state(0) = MODBUS_LOW_LEVEL;
      MODBUS_FrameText_receiveMode.visible = shouldShow;
      MODBUS_Frame_receiveMode.visible = shouldShow;
		}
	}
	else
	{
		modbusInOut.number = 0;
		modbusInputMode.number = 0;
		modbusInOut.enabled = FALSE;
		modbusInputMode.enabled = FALSE;
		modbusInOut.visible = shouldShow;
		modbusInputMode.visible = shouldShow;
		modbusLowLevel.visible = shouldShow;
		modbusLowLevel.state(0) = MODBUS_LOW_LEVEL;
    MODBUS_FrameText_receiveMode.visible = shouldShow;
    MODBUS_Frame_receiveMode.visible = shouldShow;
	}
	
	_fwShowPollGroup(shouldShow);
	_fwChooseFunctionCallCombo(shouldShow);
}

_fwShowPollGroup(bool shouldShow)
{
	if((modbusInOut.number == 0) &amp;&amp; (modbusInputMode.number == 1))
	{
		modbusPollGroupTitle.visible = shouldShow;
    MODBUS_Frame_pollingGroup.visible = shouldShow;
		modbusPollGroupName.visible = shouldShow;
		modbusPollGroupButton.visible = shouldShow;
	}
	else
	{
		modbusPollGroupTitle.visible = FALSE;
		modbusPollGroupName.visible = FALSE;
		modbusPollGroupButton.visible = FALSE;
    MODBUS_Frame_pollingGroup.visible = FALSE;
	}
}

_fwChooseFunctionCallCombo(bool shouldShow)
{
	if(modbusUnicosSelector.number == 0)
	{
		if((modbusInOut.number == 0) &amp;&amp; (modbusInputMode.number != 0))
		{
			modbusWriteFunctionCalls.visible = FALSE;
			modbusReadFunctionCalls.visible = shouldShow;
			unicosFunctionCalls.visible = FALSE;
		}
		else
		{
			modbusWriteFunctionCalls.visible = shouldShow;
			modbusReadFunctionCalls.visible = FALSE;
			unicosFunctionCalls.visible = FALSE;
		}
	}
	else
	{
		modbusWriteFunctionCalls.visible = FALSE;
		modbusReadFunctionCalls.visible = FALSE;
		unicosFunctionCalls.visible = shouldShow;
	}
}

initShapes()
{
	DIM_NAME_SHAPE = getShape(&quot;dimServicecommand&quot;);
//	DIM_CLIENT_SERVER_SHAPE = getShape(&quot;serverclient&quot;);
	DIM_COMMAND_SERVICE_SHAPE = getShape(&quot;servicecommand&quot;);
}

private toggleAllFrames(bool hide, string addressType = &quot;&quot;) {
  dyn_string shapes = getShapes(myModuleName(), myPanelName(), &quot;&quot;); 
  unsigned numberOfShapes = dynlen(shapes); 
  bool hasAddressType = strlen(addressType) &gt; 0;
  
  for (int i = 1; i &lt;= numberOfShapes; i++) {
    if (strpos(shapes[i], &quot;_Frame&quot;) != -1) {
      setValue(shapes[i], &quot;visible&quot;, hasAddressType ? false : hide);
    }       
    
    if (hasAddressType) {
      if (strpos(shapes[i], addressType + &quot;_Frame&quot;) != -1) {
        setValue(shapes[i], &quot;visible&quot;, hide);
      }
    }
  }
}

/**
* The panel contains reference panels &amp; widgets on different layers: 
* 
* Layer 1: reference panels + buttons
* Layer 2: DIM
* Layer 3: OPC
* Layer 4: MODBUS
* Layer 5: DIP
*/
showAddressOptions(string addressType)
{
	bool isUnknown = FALSE, isOPC = FALSE, isDIM = FALSE, isMODBUS = FALSE, isDIP = FALSE, isOPCUA = false;
	int dimType;

	driverProblem.visible = FALSE;

	switch(addressType)
	{
		case fwPeriphAddress_TYPE_OPC:
		case fwPeriphAddress_TYPE_OPCCLIENT:
			isOPC = TRUE;
			break;
		case fwPeriphAddress_TYPE_DIM:
		case fwPeriphAddress_TYPE_DIMCLIENT:
			isDIM = TRUE;
			break;
		case fwPeriphAddress_TYPE_MODBUS:
			isMODBUS = TRUE;
			break;
		case fwPeriphAddress_TYPE_DIP:
			isDIP = TRUE;
			break;
		case fwPeriphAddress_TYPE_OPCUA:
		case fwPeriphAddress_TYPE_MQTT:
      		//OPCUA is implemented as a third-party symbol
			showThirdPartySymbol(addressType);
      		return;
		default:
      		isUnknown = TRUE;
			break;
	}					

  toggleAllFrames(!isUnknown, addressType);
  
 //OPC			
	text5.visible = isOPC;
	text11.visible = isOPC &amp;&amp; (panelMode != OBJECT);
	groupRefreshTimer.visible = isOPC;
	groupRefreshTimerValue.visible = isOPC;
	groupUpdateRate.visible = isOPC;
	groupUpdateRateValue.visible = isOPC;
	groupDeadband.visible = isOPC;
	groupDeadbandValue.visible = isOPC;
	groupStatus.visible = isOPC;
	groupStatusValue.visible = isOPC;
	groupSource.visible = isOPC;
	groupSourceValue.visible = isOPC;
	groupEnableCB.visible = isOPC;
	groupEnableCBValue.visible = isOPC;
	dataType.visible = isOPC &amp;&amp; (panelMode != OBJECT);
	dataTypeValue.visible = isOPC &amp;&amp; (panelMode != OBJECT);
	opcGroup.visible = isOPC;
	opcGroupText.visible = isOPC;
	opcItem.visible = isOPC;
	opcServer.visible = isOPC &amp;&amp; (panelMode != OBJECT);
	refButton.visible = isOPC &amp;&amp; (panelMode != OBJECT);
	opcButton.visible = isOPC;
	inOut.visible = isOPC;
	opclowLevel.visible = isOPC &amp;&amp; (panelMode != OBJECT);
	lblOpcLowLevel.visible	= isOPC &amp;&amp; (panelMode != OBJECT);
	opcDirection.visible = isOPC;
	opcGroupDetails.visible = isOPC;
	
	setDriverNumber.visible = isOPC &amp;&amp; (panelMode == MULTIPLE_DPES);
	setActive.visible = isOPC &amp;&amp; (panelMode == MULTIPLE_DPES);
	setOpcDataType.visible = isOPC &amp;&amp; (panelMode == MULTIPLE_DPES);
	setOpcDirection.visible = isOPC &amp;&amp; (panelMode == MULTIPLE_DPES);
	setOpcGroup.visible = isOPC &amp;&amp; (panelMode == MULTIPLE_DPES);
	setOpcLowLevelComparison.visible = isOPC &amp;&amp; (panelMode == MULTIPLE_DPES);
	setOpcServer.visible = isOPC &amp;&amp; (panelMode == MULTIPLE_DPES);
	opcItem.enabled = isOPC &amp;&amp; (panelMode != MULTIPLE_DPES);
	if(panelMode == MULTIPLE_DPES)
		opcItem.text = &quot;Can not set OPC item in multiple data point element mode&quot;;
	refButton.enabled = isOPC &amp;&amp; (panelMode == SINGLE_DPE);
	
	if(isOPC &amp;&amp; (dataTypeValue.text == &quot;bitstring&quot;))
		toggleBitstringOptions(TRUE);
	else
		toggleBitstringOptions(FALSE);
	
	if(isDIM &amp;&amp; (DIM_COMMAND_SERVICE_SHAPE.selectedPos == 1))
		toggleDimClientServiceOptions(TRUE);
	else
		toggleDimClientServiceOptions(FALSE);

	_fwShowModbusItems(isMODBUS);

	addressActive.visible = (isOPC || isMODBUS) &amp;&amp; (panelMode != OBJECT);
	addressActiveText.visible = (isOPC || isMODBUS) &amp;&amp; (panelMode != OBJECT);
	drvNr.visible = (isOPC || isMODBUS) &amp;&amp; (panelMode != OBJECT);
	drvNrText.visible = (isOPC || isMODBUS) &amp;&amp; (panelMode != OBJECT);

	dimConfigDpList.visible = isDIM &amp;&amp; (panelMode != OBJECT);
	dimConfigDpRefresh.visible = isDIM &amp;&amp; (panelMode != OBJECT);
	dimServicecommandTitle.visible = isDIM;
	//set using global shape names
	DIM_NAME_SHAPE.visible = isDIM;
	DIM_NAME_SHAPE.enabled = isDIM &amp;&amp; (panelMode != MULTIPLE_DPES);
	if(panelMode == MULTIPLE_DPES)
		DIM_NAME_SHAPE.text = &quot;Can not be set&quot;;
//	DIM_CLIENT_SERVER_SHAPE.visible = isDIM;
	DIM_COMMAND_SERVICE_SHAPE.visible = isDIM;

	setDimConfigDp.visible = isDIM &amp;&amp; (panelMode == MULTIPLE_DPES);
	setDimDirection.visible = isDIM &amp;&amp; (panelMode == MULTIPLE_DPES);

	dimType = DIM_COMMAND_SERVICE_SHAPE.selectedPos;
	if((dimType == 1) &amp;&amp; isDIM)
		toggleDimClientServiceOptions(TRUE);
	else
		toggleDimClientServiceOptions(FALSE);
		
	dipConfigDpList.visible = isDIP;
	dipConfigDpRefresh.visible = isDIP;
	dipItemName.visible = isDIP;
	dipItemNameTitle.visible = isDIP;
	dipTagName.visible = (isDIP &amp;&amp; dipTagRequired.state(0));
	dipTagNameTitle.visible = (isDIP &amp;&amp; dipTagRequired.state(0));
	dipTagRequired.visible = isDIP;
}

toggleDimClientServiceOptions(bool shouldShow)
{
	if(shouldShow)
		dimServicecommandTitle.text(&quot;DIM Service:&quot;);
	else
		dimServicecommandTitle.text(&quot;DIM Command:&quot;);

	setDimDefaultValue.visible = shouldShow &amp;&amp; (panelMode == MULTIPLE_DPES);
	setDimInterval.visible = shouldShow &amp;&amp; (panelMode == MULTIPLE_DPES);
	setDimTimeStamp.visible = shouldShow &amp;&amp; (panelMode == MULTIPLE_DPES);
	setDimUpdate.visible = shouldShow &amp;&amp; (panelMode == MULTIPLE_DPES);

	tStamp.visible = shouldShow;
	tStampText.visible = shouldShow;
	dimUpdate.visible = shouldShow &amp;&amp; (panelMode != OBJECT);
	dimUpdateText.visible = shouldShow &amp;&amp; (panelMode != OBJECT);
	dimUpdateInterval.visible = shouldShow;
	dimUpdateIntervalInfo.visible = shouldShow;
	dimUpdateIntervalTitle.visible = shouldShow;
	dimDefaultValue.visible = shouldShow &amp;&amp; (panelMode != OBJECT);
	dimDefaultValueTitle.visible = shouldShow &amp;&amp; (panelMode != OBJECT);
}

_fwEnableAllSettings()
{
	if(panelMode != MULTIPLE_DPES)
	{
		setActive.state(0) = TRUE;
		setDimConfigDp.state(0) = TRUE;
		setDimDefaultValue.state(0) = TRUE;
		setDimDirection.state(0) = TRUE;
		setDimInterval.state(0) = TRUE;
		setDimTimeStamp.state(0) = TRUE;
		setDimUpdate.state(0) = TRUE;
		setDriverNumber.state(0) = TRUE;
		setOpcDataType.state(0) = TRUE;
		setOpcDirection.state(0) = TRUE;
		setOpcGroup.state(0) = TRUE;
		setOpcLowLevelComparison.state(0) = TRUE;
		setOpcServer.state(0) = TRUE;	
  
  
	}
}

toggleBitstringOptions(bool shouldShow)
{
	subindex.visible = shouldShow;
	subindexValue.visible = shouldShow;
}

hideAll()
{
	showAddressOptions(&quot;&quot;);
}

saveSettings(dyn_string &amp;exceptionInfo)
{
	bool timeStamp, update, low, isRunning, exists, active;
	int i, length, serviceCommand, driverNumber, elementType,
			timeInterval, dataTypeNumber, serverType, bitStringSubindex, opcMode;
	string direction, dimName, opcServerName, opcGroupName, opcItemName, defaultVal, periphAddressChoice, pollGroup, systemName;
	dyn_string configParameters, localException;
	shape serviceCommandSwitch, serviceCommandName;
	dyn_dyn_anytype dpeConfigObject;
	
	localException = makeDynString();
	
	serviceCommandSwitch = DIM_COMMAND_SERVICE_SHAPE;
	serviceCommandName = DIM_NAME_SHAPE;

	periphAddressChoice = addressType.text();
	
	driverNumber = drvNr.text();
	
	if(periphAddressChoice == fwPeriphAddress_TYPE_NONE)
		driverNumber = 1;
	
	mainOkButton.enabled = FALSE;
	mainApplyButton.enabled = FALSE;
	closeButton.enabled = FALSE;
	if(panelMode == MULTIPLE_DPES)
		fwOpenProgressBar(&quot;Configuration panel&quot;, &quot;Saving configuration...&quot;, 1);

	if(panelMode == SINGLE_DPE)
	{
		if(periphAddressChoice != CURRENT_SAVED_ADDRESS_TYPE)
		{
			fwPeriphAddress_delete($sDpe, exceptionInfo);
			CURRENT_SAVED_ADDRESS_TYPE = periphAddressChoice;
		}	
	}
	
	length = dynlen(DPE_LIST);

	switch(periphAddressChoice)
	{
		case fwPeriphAddress_TYPE_OPC:
		//OPC
			opcServerName = opcServer.text();
			opcGroupName = opcGroup.text();
			opcItemName = opcItem.text();
// 			low = opclowLevel.state(0);
			bitStringSubindex = subindexValue.text;
			direction = inOut.text;

			switch(direction)
			{
				case &quot;In&quot;:
					opcMode = DPATTR_ADDR_MODE_INPUT_SPONT;
					break;
				case &quot;Out&quot;:
					opcMode = DPATTR_ADDR_MODE_OUTPUT_SINGLE;
					break;
				default:
					opcMode = 6;
					break;
			}
			
			for(i=1; i&lt;=length; i++)
			{
				_fwGetDataType(dataTypeNumber, DPE_LIST[i], fwPeriphAddress_TYPE_OPC);
			
				if(panelMode == MULTIPLE_DPES)
				{
					fwPeriphAddress_get(DPE_LIST[i], exists, configParameters, active, exceptionInfo);
					if(configParameters[fwPeriphAddress_TYPE] != fwPeriphAddress_TYPE_OPCCLIENT)
					{
						fwException_raise(localException, &quot;ERROR&quot;, DPE_LIST[i] + &quot; does not currently have an OPC configuration.&quot;
																+ &quot; The data point element has not been modified.&quot;, &quot;&quot;);
						continue;
					}
				}
				else
				{
					if(strpos(opcItemName, &quot; &quot;)&gt;=0)
					{
						fwException_raise(exceptionInfo,
								&quot;ERROR&quot;, &quot;OPC Item can not contain the ' ' character&quot;, &quot;&quot;);
						break;
					}
					if(opcItemName == &quot;&quot;)
					{
						fwException_raise(exceptionInfo,
								&quot;ERROR&quot;, &quot;OPC Item can not be empty&quot;, &quot;&quot;);
						break;
					}
				}		
				configParameters[fwPeriphAddress_TYPE] = periphAddressChoice;
				if(setDriverNumber.state(0))
					configParameters[fwPeriphAddress_DRIVER_NUMBER] = driverNumber;
				if(panelMode != MULTIPLE_DPES)
					configParameters[fwPeriphAddress_ROOT_NAME] = opcItemName;
				if(setOpcDirection.state(0))
					configParameters[fwPeriphAddress_DIRECTION] = opcMode;
				if(setOpcDataType.state(0))
				{
					configParameters[fwPeriphAddress_DATATYPE] = dataTypeNumber;
					configParameters[fwPeriphAddress_OPC_SUBINDEX] = bitStringSubindex;
				}
				if(setActive.state(0))
					configParameters[fwPeriphAddress_ACTIVE] = addressActive.state(0);
					
				if(setOpcLowLevelComparison.state(0))
					configParameters[fwPeriphAddress_OPC_LOWLEVEL] = low;
				if(setOpcServer.state(0))
					configParameters[fwPeriphAddress_OPC_SERVER_NAME] = opcServerName;
				if(setOpcGroup.state(0))
				{
					configParameters[fwPeriphAddress_OPC_GROUP_IN] = opcGroupName;
					configParameters[fwPeriphAddress_OPC_GROUP_OUT] = opcGroupName;
				}			
				if(configParameters[fwPeriphAddress_OPC_GROUP_IN] == &quot;&quot;)
					configParameters[fwPeriphAddress_OPC_GROUP_IN] = configParameters[fwPeriphAddress_OPC_GROUP_OUT];
				else
					configParameters[fwPeriphAddress_OPC_GROUP_OUT] = configParameters[fwPeriphAddress_OPC_GROUP_IN];
					
				if(configParameters[fwPeriphAddress_DIRECTION] == DPATTR_ADDR_MODE_OUTPUT_SINGLE)
					configParameters[fwPeriphAddress_OPC_LOWLEVEL] = FALSE;
				
				if(panelMode != OBJECT)
				{
					fwPeriphAddress_set(DPE_LIST[i], configParameters, exceptionInfo, TRUE);
				}
				else
				{					
					fwGeneral_getGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);

					dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1] = fwPeriphAddress_TYPE_OPCCLIENT;			
					dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1] = configParameters[fwPeriphAddress_ACTIVE];			

					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DRIVER_NUMBER][1] = configParameters[fwPeriphAddress_DRIVER_NUMBER];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_REFERENCE][1] = configParameters[fwPeriphAddress_REFERENCE];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIRECTION][1] = configParameters[fwPeriphAddress_DIRECTION];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DATATYPE][1] = configParameters[fwPeriphAddress_DATATYPE];			
					
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_LOWLEVEL][1] = configParameters[fwPeriphAddress_OPC_LOWLEVEL];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_SUBINDEX][1] = configParameters[fwPeriphAddress_OPC_SUBINDEX];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_SERVER_NAME][1] = configParameters[fwPeriphAddress_OPC_SERVER_NAME];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_GROUP_IN][1] = configParameters[fwPeriphAddress_OPC_GROUP_IN];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_GROUP_OUT][1] = configParameters[fwPeriphAddress_OPC_GROUP_OUT];			
					
					fwGeneral_setGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
//			DebugN(&quot;Modified &quot;, dpeConfigObject);
				}
			}
			dynAppend(exceptionInfo, localException);
			break;
   
		case fwPeriphAddress_TYPE_OPCUA:
		//OPC UA
			direction = einaus.number;
   int receiveMode = modus.number;
			opcServerName = cmbEquipment.text;
			opcItemName = txtItem.text;
			low = lowlevel.state(0);
  	driverNumber = Treiber.text;
   if (panelMode == fwPeriphAddress_PANEL_MODE_OBJECT) {
     pollGroup = txtPollGroup.text;
   } else {
     pollGroup = cmbPollGroup.text;
   }

			configParameters[fwPeriphAddress_TYPE] = periphAddressChoice;
			switch(direction)
			{
				case &quot;0&quot;:
					opcMode = DPATTR_ADDR_MODE_OUTPUT;
					break;
				case &quot;1&quot;:
  			switch(receiveMode)
  			{
  				case 0:
  					opcMode = DPATTR_ADDR_MODE_INPUT_SPONT;
      break;
  				case 1:
  					opcMode = DPATTR_ADDR_MODE_INPUT_POLL;
      break;
  				case 2:
  					opcMode = DPATTR_ADDR_MODE_INPUT_SQUERY;
      break;
  				case 3:
  					opcMode = 9; // DPATTR_ADDR_MODE_AM_ALERT; this constant is not yet defined in WinCC OA 3.11
      break;
  				default:
  					opcMode = DPATTR_ADDR_MODE_UNDEFINED;
  				break;
     }
					break;
				case &quot;2&quot;:
  			switch(receiveMode)
  			{
  				case 0:
  					opcMode = DPATTR_ADDR_MODE_IO_SPONT;
      break;
  				case 1:
  					opcMode = DPATTR_ADDR_MODE_IO_POLL;
      break;
  				case 2:
  					opcMode = DPATTR_ADDR_MODE_IO_SQUERY;
      break;
  				case 3:
  					opcMode = 9; // DPATTR_ADDR_MODE_AM_ALERT;
      break;
  				default:
  					opcMode = DPATTR_ADDR_MODE_UNDEFINED;
  				break;
     }
					break;
				default:
					opcMode = DPATTR_ADDR_MODE_UNDEFINED;
					break;
			}
			
			for(i=1; i&lt;=length; i++)
			{
				_fwGetDataType(dataTypeNumber, DPE_LIST[i], fwPeriphAddress_TYPE_OPCUA);
			
				if(panelMode == MULTIPLE_DPES)
				{
					fwPeriphAddress_get(DPE_LIST[i], exists, configParameters, active, exceptionInfo);
					if(configParameters[fwPeriphAddress_TYPE] != fwPeriphAddress_TYPE_OPCUACLIENT)
					{
						fwException_raise(localException, &quot;ERROR&quot;, DPE_LIST[i] + &quot; does not currently have an OPC UA configuration.&quot;
																+ &quot; The data point element has not been modified.&quot;, &quot;&quot;);
						continue;
					}
				}
				else
				{
					if(strpos(opcItemName, &quot; &quot;)&gt;=0)
					{
						fwException_raise(exceptionInfo,
								&quot;ERROR&quot;, &quot;OPC UA Item can not contain the ' ' character&quot;, &quot;&quot;);
						break;
					}
					if(opcItemName == &quot;&quot; &amp;&amp; panelMode != fwPeriphAddress_PANEL_MODE_OBJECT)
					{
						fwException_raise(exceptionInfo,
								&quot;ERROR&quot;, &quot;OPC UA Item can not be empty&quot;, &quot;&quot;);
						break;
					}
				}
    
   if(setOpcuaServer.state(0))
    {
					configParameters[fwPeriphAddress_OPCUA_SERVER_NAME] = opcServerName;
    }
   if (setOpcuaSubscription.state(0)) {
     if (panelMode == fwPeriphAddress_PANEL_MODE_OBJECT) {
       configParameters[fwPeriphAddress_OPCUA_SUBSCRIPTION] = txtSubscription.text;
     } else {       
  					configParameters[fwPeriphAddress_OPCUA_SUBSCRIPTION] = cmbSubscription.text;
     }
   }
   if (setOpcuaVariant.state(0)) {
     configParameters[fwPeriphAddress_OPCUA_VARIANT] = 1+(int)(radVariant.number);
   }
   if (panelMode != MULTIPLE_DPES) {
					configParameters[fwPeriphAddress_OPCUA_KIND] = 1+(int)radKind.number;
					configParameters[fwPeriphAddress_ROOT_NAME] = opcItemName;
   }
   if(setOpcuaDriver.state(0))
					configParameters[fwPeriphAddress_DRIVER_NUMBER] = driverNumber;
   if(setOpcuaLowLevel.state(0))
					configParameters[fwPeriphAddress_OPCUA_LOWLEVEL] = low;
   if(setOpcuaDirection.state(0)){
					configParameters[fwPeriphAddress_DIRECTION] = opcMode;
  			if(configParameters[fwPeriphAddress_DIRECTION] == DPATTR_ADDR_MODE_OUTPUT)
  					configParameters[fwPeriphAddress_OPCUA_LOWLEVEL] = FALSE;
   }
   if(setOpcuaTransformation.state(0))
					configParameters[fwPeriphAddress_DATATYPE] = dataTypeNumber;
   if(setOpcuaPollGroup.state(0))
					configParameters[fwPeriphAddress_OPCUA_POLL_GROUP] = pollGroup;
   if(setOpcuaActive.state(0))
					configParameters[fwPeriphAddress_ACTIVE] = cboAddressActive.state(0);
   
			if(dynlen(configParameters)&lt;fwPeriphAddress_OPCUA_OBJECT_SIZE)
     break;

				if(panelMode != OBJECT)
				{
					fwPeriphAddress_set(DPE_LIST[i], configParameters, exceptionInfo, TRUE);
				}
				else
				{					
					fwGeneral_getGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);

					dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1] = fwPeriphAddress_TYPE_OPCCLIENT;			
					dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1] = configParameters[fwPeriphAddress_ACTIVE];			

					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DRIVER_NUMBER][1] = configParameters[fwPeriphAddress_DRIVER_NUMBER];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_REFERENCE][1] = configParameters[fwPeriphAddress_REFERENCE];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIRECTION][1] = configParameters[fwPeriphAddress_DIRECTION];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DATATYPE][1] = configParameters[fwPeriphAddress_DATATYPE];			
					
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_LOWLEVEL][1] = configParameters[fwPeriphAddress_OPCUA_LOWLEVEL];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_SERVER_NAME][1] = configParameters[fwPeriphAddress_OPCUA_SERVER_NAME];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_SUBSCRIPTION][1] = configParameters[fwPeriphAddress_OPCUA_SUBSCRIPTION];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_KIND][1] = configParameters[fwPeriphAddress_OPCUA_KIND];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_VARIANT][1] = configParameters[fwPeriphAddress_OPCUA_VARIANT];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_POLL_GROUP][1] = configParameters[fwPeriphAddress_OPCUA_POLL_GROUP];			
					
					fwGeneral_setGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
			//DebugN(&quot;Modified &quot;, dpeConfigObject);
				}
			}
			dynAppend(exceptionInfo, localException);
			break;
      
		case fwPeriphAddress_TYPE_DIM:
		//DIM
			serviceCommand = serviceCommandSwitch.selectedPos();
			dimName = serviceCommandName.text();

			switch(serviceCommand)
			{
				case 1:
					serviceCommand = DPATTR_ADDR_MODE_INPUT_SPONT;
					break;
				default:
					serviceCommand = DPATTR_ADDR_MODE_OUTPUT_SINGLE;
					break;
			}
			
			timeStamp = tStamp.state(0);
			update = dimUpdate.state(0);

			for(i=1; i&lt;=length; i++)
			{
				if(panelMode != OBJECT)
				{
					_fwGetDataType(dataTypeNumber, DPE_LIST[i], fwPeriphAddress_TYPE_DIM);
					fwPeriphAddress_get(DPE_LIST[i], exists, configParameters, active, exceptionInfo);
				}
				else
					dataTypeNumber = 0;
//DebugN(DPE_LIST[i], exists, configParameters, active, exceptionInfo);
				if(panelMode == MULTIPLE_DPES)
				{
					fwGeneral_getSystemName(DPE_LIST[i], systemName, exceptionInfo);
					if((systemName != &quot;&quot;) &amp;&amp; (systemName != getSystemName()))
					{
						fwException_raise(localException, &quot;ERROR&quot;, DPE_LIST[i] + &quot; is on a remote system.&quot;
																+ &quot; DIM can not be configured on remote data point elements.&quot;, &quot;&quot;);
						continue;
					}
					if(configParameters[fwPeriphAddress_TYPE] != fwPeriphAddress_TYPE_DIM)
					{
						fwException_raise(localException, &quot;ERROR&quot;, DPE_LIST[i] + &quot; does not currently have a DIM configuration.&quot;
																+ &quot; The data point element has not been modified.&quot;, &quot;&quot;);
						continue;
					}
					else if(configParameters[fwPeriphAddress_DIRECTION] == DPATTR_ADDR_MODE_OUTPUT_SINGLE)
					{
						configParameters[fwPeriphAddress_DIM_IMMEDIATE_UPDATE] = &quot;&quot;;
						configParameters[fwPeriphAddress_DIM_DEFAULT_VALUE] = &quot;&quot;;
						configParameters[fwPeriphAddress_DIM_TIMEOUT] = &quot;&quot;;
						configParameters[fwPeriphAddress_DIM_FLAG] = &quot;&quot;;
					}
				}
				else
				{
					if(SYSTEM_NAME != getSystemName())
					{
						fwException_raise(exceptionInfo,
								&quot;ERROR&quot;, &quot;Cannot configure DIM on remote data point elements&quot;, &quot;&quot;);
						break;
					}
					
					if(strpos(dimName, &quot; &quot;)&gt;=0)
					{
						fwException_raise(exceptionInfo,
								&quot;ERROR&quot;, &quot;DIM service or command can not\ncontain the ' ' character&quot;, &quot;&quot;);
						break;
					}
					if(dimName == &quot;&quot;)
					{
						fwException_raise(exceptionInfo,
								&quot;ERROR&quot;, &quot;DIM service or command can not\nbe empty&quot;, &quot;&quot;);
						break;
					}
				}

				if(panelMode != OBJECT)
				{
					if(exists &amp;&amp; (setDimDirection.state(0) &amp;&amp; ((configParameters[fwPeriphAddress_DIRECTION] != serviceCommand))
							|| (setDimConfigDp.state(0) &amp;&amp; (configParameters[fwPeriphAddress_DIM_CONFIG_DP] != dpSubStr(dimConfigDpList.text, DPSUB_DP)))))
					{
	//DebugN(&quot;Deleting because direction or config dp is different&quot;, DPE_LIST[i]);
						fwPeriphAddress_delete(DPE_LIST[i], exceptionInfo);
					}
				}
				
				configParameters[fwPeriphAddress_TYPE] = periphAddressChoice;
				configParameters[fwPeriphAddress_DRIVER_NUMBER] = driverNumber;
				if(panelMode != MULTIPLE_DPES)
					configParameters[fwPeriphAddress_ROOT_NAME] = dimName;
				if(setDimDirection.state(0))
					configParameters[fwPeriphAddress_DIRECTION] = serviceCommand;
				configParameters[fwPeriphAddress_DATATYPE] = dataTypeNumber; //value is ignored by set function
				configParameters[fwPeriphAddress_ACTIVE] = TRUE;  //value is ignored by set function currently
//get rid of system name of DIM config DP because the fwDIM functions do not support it with system name;
				if(setDimConfigDp.state(0))
					configParameters[fwPeriphAddress_DIM_CONFIG_DP] = dpSubStr(dimConfigDpList.text, DPSUB_DP);
				if(setDimUpdate.state(0))
					configParameters[fwPeriphAddress_DIM_IMMEDIATE_UPDATE] = (int) update;
				if(setDimDefaultValue.state(0))
					configParameters[fwPeriphAddress_DIM_DEFAULT_VALUE] = dimDefaultValue.text;
				if(setDimInterval.state(0))
					configParameters[fwPeriphAddress_DIM_TIMEOUT] = dimUpdateInterval.text;
				if(setDimTimeStamp.state(0))
					configParameters[fwPeriphAddress_DIM_FLAG] = (int) timeStamp;

				if(panelMode != OBJECT)
				{
					fwPeriphAddress_set(DPE_LIST[i], configParameters, exceptionInfo, TRUE);
				}
				else
				{					
					fwGeneral_getGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);

					dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1] = configParameters[fwPeriphAddress_TYPE];			
					dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1] = configParameters[fwPeriphAddress_ACTIVE];			

					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DRIVER_NUMBER][1] = configParameters[fwPeriphAddress_DRIVER_NUMBER];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_REFERENCE][1] = configParameters[fwPeriphAddress_REFERENCE];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIRECTION][1] = configParameters[fwPeriphAddress_DIRECTION];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DATATYPE][1] = configParameters[fwPeriphAddress_DATATYPE];			
					
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_CONFIG_DP][1] = configParameters[fwPeriphAddress_DIM_CONFIG_DP];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_DEFAULT_VALUE][1] = configParameters[fwPeriphAddress_DIM_DEFAULT_VALUE];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_TIMEOUT][1] = configParameters[fwPeriphAddress_DIM_TIMEOUT];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_FLAG][1] = configParameters[fwPeriphAddress_DIM_FLAG];			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_IMMEDIATE_UPDATE][1] = configParameters[fwPeriphAddress_DIM_IMMEDIATE_UPDATE];			
					
					fwGeneral_setGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
//			DebugN(&quot;Modified &quot;, dpeConfigObject);
				}
			}
			dynAppend(exceptionInfo, localException);
			break;
   
		case fwPeriphAddress_TYPE_MODBUS:
			_fwCheckModbusReference(modbusReference.text, exceptionInfo);
			
			if(dynlen(exceptionInfo) == 0)
			{
				_fwDeconstructModbusReference();
				_fwToggleModbusObjects(TRUE);
				configParameters[fwPeriphAddress_TYPE] = periphAddressChoice;
				configParameters[fwPeriphAddress_DRIVER_NUMBER] = driverNumber;
				configParameters[fwPeriphAddress_ROOT_NAME] = modbusReference.text;
					
				switch(modbusInOut.number)
				{
					case 0:
						switch(modbusInputMode.number)
						{
							case 0:
								configParameters[fwPeriphAddress_DIRECTION] = DPATTR_ADDR_MODE_INPUT_SPONT;
								break;
							case 1:
								configParameters[fwPeriphAddress_DIRECTION] = DPATTR_ADDR_MODE_INPUT_POLL;
								break;
							default:
								configParameters[fwPeriphAddress_DIRECTION] = DPATTR_ADDR_MODE_INPUT_SQUERY;
								break;
						}
						break;
					default:
						configParameters[fwPeriphAddress_DIRECTION] = DPATTR_ADDR_MODE_OUTPUT;
						break;
				}
	
				switch(modbusTransformationSelector.text)
				{
					case &quot;undefined&quot;:
					case &quot;string&quot;:
					case &quot;boolean as byte&quot;:
					case &quot;blob&quot;:
						configParameters[fwPeriphAddress_MODBUS_SUBINDEX] = &quot;0&quot;;
						break;
					default:
						configParameters[fwPeriphAddress_MODBUS_SUBINDEX] = modbusSubindex.text;
						break;
				}
	
				configParameters[fwPeriphAddress_DATATYPE] = TRANSFORM_MODBUS_TEXT_TO_INT[modbusTransformationSelector.text];
				configParameters[fwPeriphAddress_MODBUS_LOWLEVEL] = modbusLowLevel.state(0);
				configParameters[fwPeriphAddress_ACTIVE] = addressActive.state(0);
				
				if(modbusInputMode.number == 1)
					configParameters[fwPeriphAddress_MODBUS_POLL_GROUP] = &quot;_&quot; + modbusPollGroupName.text;
				else
					configParameters[fwPeriphAddress_MODBUS_POLL_GROUP] = &quot;&quot;;
					
				configParameters[fwPeriphAddress_MODBUS_START] = 0;
				configParameters[fwPeriphAddress_MODBUS_INTERVAL] = 0;
	
				fwPeriphAddress_set($sDpe, configParameters, exceptionInfo, TRUE);
			}
			break;
		case fwPeriphAddress_TYPE_DIP:
			if(dipItemName.text == &quot;&quot;)
			{
				fwException_raise(exceptionInfo,
						&quot;ERROR&quot;, &quot;The DIP Item field can not be left empty.&quot;, &quot;&quot;);
				break;
			}

			if((dipTagRequired.state(0) == TRUE) &amp;&amp; (dipTagName.text == &quot;&quot;))
			{
				fwException_raise(exceptionInfo,
						&quot;ERROR&quot;, &quot;The Tag Name field can not be empty if you have chosen to specify a tag name.&quot;, &quot;&quot;);
				break;
			}

			configParameters[fwPeriphAddress_TYPE] = periphAddressChoice;
			configParameters[fwPeriphAddress_DRIVER_NUMBER] = fwDIP_DRIVER_NUMBER;

			if(dipTagRequired.state(0) == TRUE)
				configParameters[fwPeriphAddress_ROOT_NAME] = dipItemName.text + fwDIP_SEPERATOR + dipTagName.text;
			else
				configParameters[fwPeriphAddress_ROOT_NAME] = dipItemName.text + fwDIP_SEPERATOR;
			
			configParameters[fwPeriphAddress_DIP_CONFIG_DP] = dipConfigDpList.text;

//DebugN(configParameters);
			fwPeriphAddress_set($sDpe, configParameters, exceptionInfo, TRUE);
			break;	
   
		case fwPeriphAddress_TYPE_NONE:
			if(panelMode == MULTIPLE_DPES)
			{
				for(i=1; i&lt;=length; i++)
					fwPeriphAddress_delete(DPE_LIST[i], exceptionInfo);
			}
			else if(panelMode == OBJECT)
			{
					fwGeneral_getGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);

					dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1] = fwPeriphAddress_TYPE_NONE;			
					dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1] = FALSE;			

					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DRIVER_NUMBER][1] = 0;			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_REFERENCE][1] = &quot;&quot;;			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIRECTION][1] = 0;			
					dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DATATYPE][1] = 0;			

					fwGeneral_setGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
			}
			break;
		default:
			break;	
	}
	
	mainOkButton.enabled = TRUE;
	mainApplyButton.enabled = TRUE;
	closeButton.enabled = TRUE;
	if(panelMode == MULTIPLE_DPES)
		fwCloseProgressBar(&quot;Configuration complete&quot;);
}

_fwGetOpcGroupData(string groupDpName, int &amp;updateRate, float &amp;deadband, bool &amp;cbEnabled,
										bool &amp;active, bool &amp;dataSource, int &amp;refreshTimer, dyn_string &amp;exceptionInfo)
{
	updateRate = 0;
	deadband = 0.0;
	cbEnabled = FALSE;
	active = FALSE;
	dataSource = FALSE;
	refreshTimer = 0;

	if(dpExists(groupDpName))
	{
		if(dpTypeName(groupDpName) == &quot;_OPCGroup&quot;)
		{
			dpGet(groupDpName+&quot;.UpdateRateAct:_original.._value&quot;, updateRate,
						groupDpName+&quot;.DeathBand:_original.._value&quot;, deadband,
						groupDpName+&quot;.EnableCallback:_original.._value&quot;, cbEnabled,
	    			groupDpName+&quot;.Active:_online.._value&quot;, active,
	   			 	groupDpName+&quot;.DataSourceDevice:_online.._value&quot;, dataSource,
	    			groupDpName+&quot;.RefreshTimer:_online.._value&quot;, refreshTimer);
		}
	}
}

_fwShowOpcGroupData(int &amp;updateRate, float &amp;deadband, bool &amp;cbEnabled,
										bool &amp;active, bool &amp;dataSource, int &amp;refreshTimer, dyn_string &amp;exceptionInfo)
{
	string activeText, dataSourceText;
	
	if(active)
		activeText = &quot;Active&quot;;
	else
		activeText = &quot;Inactive&quot;;
		
	if(dataSource)
		dataSourceText = &quot;Device&quot;;
	else
		dataSourceText = &quot;Cache&quot;;
	
	groupUpdateRateValue.text(updateRate +&quot; ms&quot;);
	groupDeadbandValue.text(deadband +&quot; %&quot;);
	groupEnableCBValue.text(cbEnabled);
	groupStatusValue.text(activeText);
	groupSourceValue.text(dataSourceText);
	groupRefreshTimerValue.text(refreshTimer +&quot; s&quot;);
}

_fwGetOpcServerItems(string serverDpName, dyn_string &amp;items, dyn_string &amp;exceptionInfo)
{
	items = makeDynString();

	if(dpExists(serverDpName))
	{
		if(dpTypeName(serverDpName) == &quot;_OPCServer&quot;)
		{
			dpGet(serverDpName + &quot;.ItemIds:_online.._value&quot;, items);
		}
	}
}

_fwGetDataType(int &amp;dataType, string dpe, string addressType)
{
	string dataTypeName;
 shape trans;
	switch(addressType)
	{
  case fwPeriphAddress_TYPE_OPC:
  		dataTypeName = dataTypeValue.text();
  		switch(dataTypeName)
  		{
  			case &quot;undefined&quot;:
  				dataType = 480;
  				break;
  			case &quot;integer16&quot;:
  				dataType = 481;
  				break;
  			case &quot;integer32&quot;:
  	 			dataType = 482;
  				break;
  			case &quot;uchar&quot;:
  				dataType = 483;
  				break;
  			case &quot;float32&quot;:
  				dataType = 484;
  				break;
  			case &quot;float64&quot;:
  				dataType = 485;
  				break;
  			case &quot;boolean&quot;:
  				dataType = 486;
  				break;
  			case &quot;string&quot;:
  				dataType = 487;
  				break;
  			case &quot;uinteger16&quot;:
  				dataType = 488;
  				break;
  			case &quot;uinteger32&quot;:
  				dataType = 489;
  				break;
  			case &quot;time&quot;:
  				dataType = 490;
  				break;
  			case &quot;bitstring&quot;:
  				dataType = 491;
  				break;
  			case &quot;default&quot;:
  				dataType = 0;
  				break;
  			default:
  				dataType = -1;
  				break;
  		}
 break;
 
 case fwPeriphAddress_TYPE_OPCUA:
     
    trans = getShape(&quot;fwPeriphAddressOPCUA.trans_art&quot;);
  		dataTypeName = trans.text;
  		switch(dataTypeName)
  		{
  			case &quot;boolean&quot;:
  				dataType = 751;
  				break;
  			case &quot;sbyte&quot;:
  				dataType = 752;
  				break;
  			case &quot;byte&quot;:
  				dataType = 753;
  				break;
  			case &quot;int16&quot;:
  				dataType = 754;
  				break;
  			case &quot;uint16&quot;:
  				dataType = 755;
  				break;
  			case &quot;int32&quot;:
  				dataType = 756;
  				break;
  			case &quot;uint32&quot;:
  				dataType = 757;
  				break;
  			case &quot;int64&quot;:
  				dataType = 758;
  				break;
  			case &quot;uint64&quot;:
  				dataType = 759;
  				break;
  			case &quot;float&quot;:
  				dataType = 760;
  				break;
  			case &quot;double&quot;:
  				dataType = 761;
  				break;
  			case &quot;string&quot;:
  				dataType = 762;
  				break;
  			case &quot;date time&quot;:
  				dataType = 763;
  				break;
  			case &quot;guid&quot;:
  				dataType = 764;
  				break;
  			case &quot;byte string&quot;:
  				dataType = 765;
  				break;
  			case &quot;xml element&quot;:
  				dataType = 766;
  				break;
  			case &quot;node id&quot;:
  				dataType = 767;
  				break;
  			case &quot;localized text&quot;:
  				dataType = 768;
  				break;
  			case &quot;default&quot;:
  				dataType = 750;
  				break;      
  			default:
  				dataType = -1;
  				break;
  		}   
 break;
 
	default:	
		switch(dpElementType(dpe))
		{
			case DPEL_BOOL:
				dataType = 2002;
				break;
			case DPEL_INT:
				dataType = 2002;
				break;
			case DPEL_STRING:  
	 			dataType = 2001;
				break;
			case DPEL_FLOAT:  
				dataType = 2003;
				break;
			case DPEL_DYN_BOOL:  
				dataType = 2004;
				break;
			case DPEL_DYN_FLOAT:  
				dataType = 2005;
				break;
			default:
				dataType = -1;
				break;
		}
 }
	
}

_fwCheckModbusReference(string reference, dyn_string &amp;exceptionInfo)
{
	bool isConsistent, hasMapping;
	int functionCall, direction, inputMode;
	dyn_string parts;
	int iPlcNumber, iReferenceNumber;
	
	parts = strsplit(reference, &quot;.&quot;);	

	if(dynlen(parts)!=4)
	{
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The MODBUS reference must contain exactly 4 parts seperated by the . character&quot;, &quot;&quot;);
		return;
	}
	
	functionCall = parts[3];
	iPlcNumber = parts[2];
	iReferenceNumber = parts[4];
	if(parts[1] == &quot;U&quot;)
		hasMapping = mappingHasKey(FUNCTIONCALL_UNICOS_INT_TO_TEXT, functionCall);
	else if(parts[1] == &quot;M&quot;)
		hasMapping = mappingHasKey(FUNCTIONCALL_MODBUS_INT_TO_TEXT, functionCall);
	else
	{
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The reference must begin with a M or U&quot;, &quot;&quot;);
		return;
	}

	if((iPlcNumber &lt; 1) || (iPlcNumber &gt; 65535))
	{
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The PLC number must be between 1 and 65535&quot;, &quot;&quot;);
		return;
	}

	if(!hasMapping)
	{
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The function call number &quot; + parts[3] + &quot; is not valid&quot;, &quot;&quot;);
		return;
	}

	if((iReferenceNumber &lt; 0) || (iReferenceNumber &gt; 65535))
	{
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The reference number must be between 0 and 65535&quot;, &quot;&quot;);
		return;
	}	
	
	direction = modbusInOut.number;
	inputMode = modbusInputMode.number;
	
	isConsistent = FALSE;
	
	if((direction == 1) || ((direction == 0) &amp;&amp; (inputMode == 0)))
	{
		if(parts[1] == &quot;U&quot;)
		{
			switch(functionCall)
			{
				case 1:
				case 18:
				case 17:
					isConsistent = TRUE;
					break;
				default:
					break;
			}
		}
		else
		{
			switch(functionCall)
			{
				case 5:
				case 6:
				case 15:
				case 16:
					isConsistent = TRUE;
					break;
				default:
					break;
			}
		}
	}
	else
	{
		switch(functionCall)
		{
			case 5:
			case 6:
			case 15:
			case 16:
				break;
			default:
				isConsistent = TRUE;
				break;
		}
	}
	
	if(!isConsistent)
		fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The function call number &quot; + parts[3] + &quot; is not comptible with the selected direction and receive mode&quot;, &quot;&quot;);
}

_fwGetDimValues(dyn_anytype configData, string drvType)
{
	dyn_string tempSplit;
	shape serviceCommandSwitch, serviceCommandName;
	int valTime;

	serviceCommandSwitch = DIM_COMMAND_SERVICE_SHAPE;
	serviceCommandName = DIM_NAME_SHAPE;

	if((configData[fwPeriphAddress_DRIVER_NUMBER] &gt;= drvNr.sbMinimum)
		&amp;&amp; (configData[fwPeriphAddress_DRIVER_NUMBER] &lt;= drvNr.sbMaximum))
		drvNr.text(configData[fwPeriphAddress_DRIVER_NUMBER]);

//DebugN(configData);
	if(drvType == fwPeriphAddress_TYPE_DIMSERVER)
	{
		if(configData[fwPeriphAddress_DIRECTION]==DPATTR_ADDR_MODE_OUTPUT_SINGLE)
			configData[fwPeriphAddress_DIRECTION]=DPATTR_ADDR_MODE_INPUT_SPONT;
		else
			configData[fwPeriphAddress_DIRECTION]=DPATTR_ADDR_MODE_OUTPUT_SINGLE;
	}
//DebugN(configData[fwPeriphAddress_DIRECTION]);
	if(configData[fwPeriphAddress_DIRECTION]==DPATTR_ADDR_MODE_INPUT_SPONT)
		serviceCommandSwitch.selectedPos(1);  //is service
	if(configData[fwPeriphAddress_DIRECTION]==DPATTR_ADDR_MODE_OUTPUT_SINGLE)
		serviceCommandSwitch.selectedPos(2);  //is command

	serviceCommandName.text(configData[fwPeriphAddress_ROOT_NAME]);
	if(strpos((string)configData[fwPeriphAddress_DIM_CONFIG_DP], getSystemName()) != 0)
		configData[fwPeriphAddress_DIM_CONFIG_DP] = getSystemName() + configData[fwPeriphAddress_DIM_CONFIG_DP];
			
	dimConfigDpList.text(configData[fwPeriphAddress_DIM_CONFIG_DP]);

	if(((drvType == fwPeriphAddress_TYPE_DIM)||(drvType == fwPeriphAddress_TYPE_DIMCLIENT))
				&amp;&amp;(configData[fwPeriphAddress_DIRECTION]==DPATTR_ADDR_MODE_INPUT_SPONT))
	{
		dimUpdateInterval.text = configData[fwPeriphAddress_DIM_TIMEOUT];
		dimDefaultValue.text = configData[fwPeriphAddress_DIM_DEFAULT_VALUE];
		
		if(configData[fwPeriphAddress_DIM_FLAG]==0)
			tStamp.state(0,FALSE);
		else
			tStamp.state(0,TRUE);

		if(configData[fwPeriphAddress_DIM_IMMEDIATE_UPDATE]==0)
			dimUpdate.state(0,FALSE);
		else
			dimUpdate.state(0,TRUE);
	}
}

_fwConvertOpcDataType(string &amp;dataType, int dataTypeNumber, string addressType)
{
 switch(addressType)
 {
   case fwPeriphAddress_TYPE_OPCCLIENT:
   case fwPeriphAddress_TYPE_OPC:
    	switch(dataTypeNumber)
    	{
    		case 480:
    			dataType = &quot;undefined&quot;;
    			break;
    		case 481:
    			dataType = &quot;integer16&quot;;
    			break;
    		case 482:
     			dataType = &quot;integer32&quot;;
    			break;
    		case 483:
    			dataType = &quot;uchar&quot;;
    			break;
    		case 484:
    			dataType = &quot;float32&quot;;
    			break;
    		case 485:
    			dataType = &quot;float64&quot;;
    			break;
    		case 486:
    			dataType = &quot;boolean&quot;;
    			break;
    		case 487:
    			dataType = &quot;string&quot;;
    			break;
    		case 488:
    			dataType = &quot;uinteger16&quot;;
    			break;
    		case 489:
    			dataType = &quot;uinteger32&quot;;
    			break;
    		case 490:
    			dataType = &quot;time&quot;;
    			break;
    		case 491:
    			dataType = &quot;bitstring&quot;;
    			break;
    		case 0:
    			dataType = &quot;default&quot;;
    			break;
    		default:
    			dataType = &quot;default&quot;;
    			break;
    	}
   break;
   
   case fwPeriphAddress_TYPE_OPCUACLIENT:
   case fwPeriphAddress_TYPE_OPCUA:
    	switch(dataTypeNumber)
    	{
  			case  750:
  				dataType = &quot;default&quot;;
  				break;
  			case  751:
  				dataType = &quot;boolean&quot;;
  				break;
  			case  752:
  				dataType = &quot;sbyte&quot;;
  				break;
  			case  753:
  				dataType = &quot;byte&quot;;
  				break;
  			case  754:
  				dataType = &quot;int16&quot;;
  				break;
  			case  755:
  				dataType = &quot;uint16&quot;;
  				break;
  			case  756:
  				dataType = &quot;int32&quot;;
  				break;
  			case  757:
  				dataType = &quot;uint32&quot;;
  				break;
  			case  758:
  				dataType = &quot;int64&quot;;
  				break;
  			case  759:
  				dataType = &quot;uint64&quot;;
  				break;
  			case  760:
  				dataType = &quot;float&quot;;
  				break;
  			case  761:
  				dataType = &quot;double&quot;;
  				break;
  			case  762:
  				dataType = &quot;string&quot;;
  				break;
  			case  763:
  				dataType = &quot;date time&quot;;
  				break;
  			case  764:
  				dataType = &quot;guid&quot;;
  				break;
  			case  765:
  				dataType = &quot;byte string&quot;;
  				break;
  			case  766:
  				dataType = &quot;xml element&quot;;
  				break;
  			case  767:
  				dataType = &quot;node id&quot;;
  				break;
  			case  768:
  				dataType = &quot;localized text&quot;;
  				break;
  			default:
  				dataType = &quot;default&quot;;
  				break;
    	}
   break;   
 }
}

_fwGetDefaultOpcDataType(int &amp;dataType)
{
	switch(dpElementType($sDpe))
	{
		case DPEL_BOOL:
			dataType = 486;
			break;
		case DPEL_INT:
			dataType = 481;
			break;
		case DPEL_UINT:
			dataType = 488;
			break;
		case DPEL_STRING:  
			dataType = 487;
			break;
		case DPEL_FLOAT:  
			dataType = 484;
			break;
		default:
			dataType = -1;
			break;
	}
}


















]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	string dollarContents;
	dyn_string addressTypes, newAddressTypes;
	bool cbEnabled, active, dataSource, configExists = FALSE, isAddressActive;
	int i, tempInt, dataTypeNumber, transformationType, subindex, maxSubindex, result, position, elementType;
	int updateRate, refreshTimer;
	float deadband, updateRateInSeconds;
	string dpe, opcGroupName, drvType, opcServerName, dataTypeName, dipItem, dipTag, errorString;
	dyn_string extraAddressTypes, panelNames, exceptionInfo, tempSplit, opcServers, opcGroups, items, configTypeSplit, systems;
	
	dyn_dyn_anytype dpeConfigObject;
 shape trans;

	if(isDollarDefined(&quot;$sDpe&quot;))
	{
		dpe = $sDpe;
		strreplace(dpe, &quot; &quot;, &quot;&quot;);
	    DPE_LIST = strsplit(dpe, &quot;|&quot;);
	}

	initShapes();
	_fwInitFunctionCallMappings();
	_fwInitTransformationMappings();

	hideAll();

	addressTypes = makeDynString(fwPeriphAddress_TYPE_NONE, fwPeriphAddress_TYPE_OPC, fwPeriphAddress_TYPE_MODBUS, fwPeriphAddress_TYPE_DIM, fwPeriphAddress_TYPE_DIP);

	getThirdPartyFiles(extraAddressTypes, panelNames);
	THIRD_PARTY_ADDRESS_TYPES = extraAddressTypes;
	dynAppend(addressTypes, extraAddressTypes);
	hideAllThirdPartySymbols();	
	if(isDollarDefined(&quot;$dsAddressTypes&quot;))
	{
		dollarContents = $dsAddressTypes;
		strreplace(dollarContents, &quot; | &quot;, &quot;|&quot;);
		newAddressTypes = strsplit(dollarContents, &quot;|&quot;);
	
		if(dynlen(newAddressTypes) &gt; 0)
		{
			addressTypes = makeDynString(&quot;None&quot;);
			dynAppend(addressTypes, newAddressTypes);
			dynUnique(addressTypes);
		}
	}

	fwInstallation_componentInstalled(&quot;fwDIP&quot;, &quot;1.0&quot;, result);
	if(result == 0)
	{
		position = dynContains(addressTypes, fwPeriphAddress_TYPE_DIP);
		if(position &gt; 0)
			dynRemove(addressTypes, position);
	}
	switch(dynlen(DPE_LIST))
	{
			case 0:
				if(isDollarDefined(&quot;$sDpeConfigObjectVarName&quot;))	// object passed to the panel
				{
					addressTypes = makeDynString(fwPeriphAddress_TYPE_NONE, fwPeriphAddress_TYPE_OPC, fwPeriphAddress_TYPE_DIM);

					if(getGlobalType($sDpeConfigObjectVarName) != DYN_DYN_ANYTYPE_VAR)
					{
						elementNameField.text(&quot;Wrong config object name&quot;);
						applyButton.enabled = FALSE;
						okButton.enabled = FALSE;
						fwException_raise(exceptionInfo, 
															&quot;WARNING&quot;, &quot;The config object &quot; + $sDpeConfigObjectVarName + 
															&quot; doesn't exists or hasn't got the proper format.&quot;, 
															&quot;&quot;);
						fwExceptionHandling_display(exceptionInfo);					
						return;
					}					
					
					panelMode = OBJECT;					
					fwGeneral_getGlobalValue($sDpeConfigObjectVarName, dpeConfigObject, exceptionInfo);
					// read from config object
					DPE_LIST[1] = dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_NAME][1];						
					DPE_TYPE		= dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_TYPE][1];	
					
					configData[fwPeriphAddress_TYPE] = dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1];			
					configData[fwPeriphAddress_DRIVER_NUMBER] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DRIVER_NUMBER][1];			
					configData[fwPeriphAddress_REFERENCE] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_REFERENCE][1];			
					configData[fwPeriphAddress_DIRECTION] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIRECTION][1];			
					configData[fwPeriphAddress_DATATYPE] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DATATYPE][1];			
					configData[fwPeriphAddress_ACTIVE] = (bool)dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1];			
					
					if((configData[fwPeriphAddress_TYPE] == fwPeriphAddress_TYPE_OPC) ||
										(configData[fwPeriphAddress_TYPE] == fwPeriphAddress_TYPE_OPCCLIENT))
					{
						configData[fwPeriphAddress_OPC_LOWLEVEL] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_LOWLEVEL][1];			
						configData[fwPeriphAddress_OPC_SUBINDEX] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_SUBINDEX][1];			
						configData[fwPeriphAddress_OPC_SERVER_NAME] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_SERVER_NAME][1];			
						configData[fwPeriphAddress_OPC_GROUP_IN] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_GROUP_IN][1];			
						configData[fwPeriphAddress_OPC_GROUP_OUT] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPC_GROUP_OUT][1];			
					}
					else if((configData[fwPeriphAddress_TYPE] == fwPeriphAddress_TYPE_OPCUA) ||
										(configData[fwPeriphAddress_TYPE] == fwPeriphAddress_TYPE_OPCUACLIENT))
					{
					configData[fwPeriphAddress_OPCUA_LOWLEVEL] =	dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_LOWLEVEL][1];			
					configData[fwPeriphAddress_OPCUA_SERVER_NAME] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_SERVER_NAME][1];			
					configData[fwPeriphAddress_OPCUA_SUBSCRIPTION] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_SUBSCRIPTION][1];			
					configData[fwPeriphAddress_OPCUA_KIND] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_KIND][1];			
					configData[fwPeriphAddress_OPCUA_VARIANT] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_VARIANT][1];			
					configData[fwPeriphAddress_OPCUA_POLL_GROUP] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_OPCUA_POLL_GROUP][1];			
					}
					else if((configData[fwPeriphAddress_TYPE] == fwPeriphAddress_TYPE_DIM) ||
										(configData[fwPeriphAddress_TYPE] == fwPeriphAddress_TYPE_DIMCLIENT))
					{
						configData[fwPeriphAddress_DRIVER_NUMBER] = fwPeriphAddress_DIM_DRIVER_NUMBER;			
						configData[fwPeriphAddress_DIM_CONFIG_DP] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_CONFIG_DP][1];			
						configData[fwPeriphAddress_DIM_DEFAULT_VALUE] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_DEFAULT_VALUE][1];			
						configData[fwPeriphAddress_DIM_TIMEOUT] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_TIMEOUT][1];			
						configData[fwPeriphAddress_DIM_FLAG] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_FLAG][1];			
						configData[fwPeriphAddress_DIM_IMMEDIATE_UPDATE] = dpeConfigObject[fwPeriphAddress_DPE_OBJECT_DIM_IMMEDIATE_UPDATE][1];			
					}
					else
						configData[fwPeriphAddress_TYPE] = &quot;&quot;;
					
					SYSTEM_NAME = getSystemName();
					elementNameField.text(DPE_LIST[1]);
					configExists = TRUE;
					DPES_OK = TRUE;
				}
				else // neither dpes nor object passed, nothing to do in the panel
				{
					elementNameField.text(&quot;No Data Point Elements&quot;);
					applyButton.enabled = FALSE;
					okButton.enabled = FALSE;
					fwException_raise(exceptionInfo, &quot;WARNING&quot;, getCatStr(&quot;fwConfigs&quot;, &quot;PANEL_NODATAPOINTSTOCONFIG&quot;), &quot;&quot;);
					fwExceptionHandling_display(exceptionInfo);					
					return;
				}
				break;
			case 1:
				panelMode = SINGLE_DPE;
				dpe = DPE_LIST[1];
				elementNameField.text(dpe);
				DPES_OK = _fwConfigs_checkDpeList(DPE_LIST, fwConfigs_PVSS_ADDRESS, DPE_TYPE, exceptionInfo, errorString);
				if(!DPES_OK)
				{
					configExists = FALSE;
					mainOkButton.enabled = FALSE;
					mainApplyButton.enabled = FALSE;
					addressType.items = makeDynString(fwPeriphAddress_TYPE_NONE);

					if(DPE_TYPE == fwConfigs_NOT_SUPPORTED)
						fwException_raise(exceptionInfo, &quot;ERROR&quot;, errorString, &quot;&quot;);
				}
				else
				{				
					fwPeriphAddress_get($sDpe, configExists, configData, isAddressActive, exceptionInfo);
					fwGeneral_getSystemName($sDpe, SYSTEM_NAME, exceptionInfo);
					if(SYSTEM_NAME == &quot;&quot;)
						SYSTEM_NAME = getSystemName();
					
					//get default OPC data type
					_fwGetDefaultOpcDataType(dataTypeNumber);
					_fwConvertOpcDataType(dataTypeName, dataTypeNumber, configData[fwPeriphAddress_TYPE]);
					//dataTypeValue.text(dataTypeName);
				}
				break;
			default:
				panelMode = MULTIPLE_DPES;
				addressTypes = makeDynString(fwPeriphAddress_TYPE_NONE, fwPeriphAddress_TYPE_OPC, fwPeriphAddress_TYPE_OPCUA, fwPeriphAddress_TYPE_DIM);
				dpe = DPE_LIST[1];

				_fwConfigs_getSystemsInDpeList(DPE_LIST, systems, exceptionInfo);
				
				if(dynlen(systems) == 1)
				{
					elementNameField.text(&quot;Multiple Data Point Elements (from &quot; + systems[1] + &quot;)&quot;);
					if(systems[1] == getSystemName())
						SYSTEM_NAME = systems[1];
				}
				else
				{
					elementNameField.text(&quot;Multiple Data Point Elements (from multiple systems)&quot;);
					SYSTEM_NAME = &quot;&quot;;
				}
				
				DPES_OK = _fwConfigs_checkDpeList(DPE_LIST, fwConfigs_PVSS_ADDRESS, DPE_TYPE, exceptionInfo, errorString);
				if(!DPES_OK)
				{
					configExists = FALSE;
					mainOkButton.enabled = FALSE;
					mainApplyButton.enabled = FALSE;
					addressType.items = makeDynString(fwPeriphAddress_TYPE_NONE);

					if(DPE_TYPE == fwConfigs_NOT_SUPPORTED)
						fwException_raise(exceptionInfo, &quot;ERROR&quot;, errorString, &quot;&quot;);
				}

				dpeDetails.visible = TRUE;
				break;
	}
	_fwEnableAllSettings();
	addressType.items = addressTypes;
	initModbusPollGroupNames();

	//Initial set up of OPC lists
	if(SYSTEM_NAME != getSystemName())
	{
		opcButton.enabled = FALSE;
		opcButton.toolTipText = &quot;This option is unavailable as you are configuring data points on a remote system.&quot;;
	}

//OPC server
  	opcServers = dpNames(SYSTEM_NAME + &quot;*&quot;,&quot;_OPCServer&quot;); 
  	for(i=1;i&lt;=dynlen(opcServers);i++)
  	{  
      opcServers[i] = dpSubStr(opcServers[i], DPSUB_DP);
      opcServers[i] = strltrim(opcServers[i], &quot;_&quot;);
    }

    opcServer.items(opcServers);
		opcServer.selectedPos(1);

//OPC group
  	opcGroups = dpNames(SYSTEM_NAME + &quot;*&quot;,&quot;_OPCGroup&quot;); 
  	for(i=1;i&lt;=dynlen(opcGroups);i++)  
		{
      opcGroups[i] = dpSubStr(opcGroups[i], DPSUB_DP);
      opcGroups[i] = strltrim(opcGroups[i], &quot;_&quot;);
    }

		if(panelMode == OBJECT)
			dynInsertAt(opcGroups, &quot;&quot;, 1);    
    opcGroup.items(opcGroups);
		opcGroup.selectedPos(1);

	if(dynlen(opcGroups) &gt; 0) {
		_fwGetOpcGroupData(SYSTEM_NAME + &quot;_&quot;+opcGroups[1], updateRate, deadband, cbEnabled,
												active, dataSource, refreshTimer, exceptionInfo);
	}
	else{
		updateRate = 0;
		deadband = 0.0;
		cbEnabled = FALSE;
		active = FALSE;
		dataSource = FALSE;
		refreshTimer = 0;
	}
	
	_fwShowOpcGroupData(updateRate, deadband, cbEnabled, active, dataSource, refreshTimer, exceptionInfo);

//OPC items
	opcServerName = opcServer.text();
	if(opcServerName != &quot;&quot;) {
		_fwGetOpcServerItems(SYSTEM_NAME +&quot;_&quot;+opcServerName, items, exceptionInfo);
	}
	opcItem.items(items);
	opcItem.selectedPos(1);

//DebugN(configExists, configData);
	if(configExists)
	{
		CURRENT_SAVED_ADDRESS_TYPE = configData[fwPeriphAddress_TYPE];
		switch(configData[fwPeriphAddress_TYPE])
		{
			case fwPeriphAddress_TYPE_OPC:
			case fwPeriphAddress_TYPE_OPCCLIENT:
				PREVIOUS_ADDRESS_TYPE = fwPeriphAddress_TYPE_OPCCLIENT;
				if(dynContains(addressTypes, fwPeriphAddress_TYPE_OPC) &lt;= 0)
					addressType.appendItem(fwPeriphAddress_TYPE_OPC);
								
				addressType.text = fwPeriphAddress_TYPE_OPC;
				if((configData[fwPeriphAddress_DRIVER_NUMBER] &gt;= drvNr.sbMinimum)
						&amp;&amp; (configData[fwPeriphAddress_DRIVER_NUMBER] &lt;= drvNr.sbMaximum))
					drvNr.text(configData[fwPeriphAddress_DRIVER_NUMBER]);

				hiddenDataType.text(configData[fwPeriphAddress_DATATYPE]);
	
				_fwConvertOpcDataType(dataTypeName, configData[fwPeriphAddress_DATATYPE],configData[fwPeriphAddress_TYPE]);
				dataTypeValue.text(dataTypeName);
				
				subindexValue.text = configData[fwPeriphAddress_OPC_SUBINDEX];
					
				opcServer.text(configData[fwPeriphAddress_OPC_SERVER_NAME]);
	
				opcServerName = opcServer.text();
				_fwGetOpcServerItems(SYSTEM_NAME +&quot;_&quot;+opcServerName, items, exceptionInfo);
		    opcItem.items(items);
				
				if(configData[fwPeriphAddress_DIRECTION] == DPATTR_ADDR_MODE_OUTPUT_SINGLE)
					opcGroupName = configData[fwPeriphAddress_OPC_GROUP_OUT];
				else
					opcGroupName = configData[fwPeriphAddress_OPC_GROUP_IN];
					
				opcGroup.text(opcGroupName);
				_fwGetOpcGroupData(SYSTEM_NAME + &quot;_&quot; + opcGroupName, updateRate, deadband, cbEnabled,
														active, dataSource, refreshTimer, exceptionInfo);
				
				_fwShowOpcGroupData(updateRate, deadband, cbEnabled, active, dataSource, refreshTimer, exceptionInfo);
	
				opcItem.text(configData[fwPeriphAddress_ROOT_NAME]);
					
				addressActive.state(0) = configData[fwPeriphAddress_ACTIVE];
				opclowLevel.state(0) = configData[fwPeriphAddress_OPC_LOWLEVEL];
				ADDRESS_PANEL_LOW_LEVEL = configData[fwPeriphAddress_OPC_LOWLEVEL];
				
				if(configData[fwPeriphAddress_DIRECTION] == DPATTR_ADDR_MODE_INPUT_SPONT)
					inOut.selectedPos = dynContains(inOut.items, &quot;In&quot;);
				else if(configData[fwPeriphAddress_DIRECTION] == DPATTR_ADDR_MODE_OUTPUT_SINGLE)
				{
					opclowLevel.enabled = FALSE;
					inOut.selectedPos = dynContains(inOut.items, &quot;Out&quot;);
				}
				else
					inOut.selectedPos = dynContains(inOut.items, &quot;In/Out&quot;);
				break;

			case fwPeriphAddress_TYPE_OPCUA:
			case fwPeriphAddress_TYPE_OPCUACLIENT:
        PREVIOUS_ADDRESS_TYPE = fwPeriphAddress_TYPE_OPCUACLIENT;

        if( dynContains(addressTypes, fwPeriphAddress_TYPE_OPCUA) &lt;= 0 )
        {
          addressType.appendItem(fwPeriphAddress_TYPE_OPCUA);
        }

        addressType.text = fwPeriphAddress_TYPE_OPCUA;
        var_name.text    = configData[fwPeriphAddress_REFERENCE];
        //showAddressOptions(configData[fwPeriphAddress_TYPE]);

        int iPosServer, iPosSubscriptions;
        dyn_string dsServers, dsSubscriptions;
        if( (configData[fwPeriphAddress_DRIVER_NUMBER] &gt;= Treiber.sbMinimum ) &amp;&amp;
            (configData[fwPeriphAddress_DRIVER_NUMBER] &lt;= Treiber.sbMaximum )   )
        {
          // Check the OPCUA server is registered in the same driver number like the DPE _distrib.._driver
          if( dpExists(&quot;_OPCUA&quot; + configData[fwPeriphAddress_DRIVER_NUMBER]) )
          {
            dpGet(&quot;_OPCUA&quot; + configData[fwPeriphAddress_DRIVER_NUMBER] + &quot;.Config.Servers&quot;, dsServers);
            if( dynlen(dsServers) &lt; 0 )
            {
              fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Error, no OPC UA servers registered in the internal DP: _OPCUA&quot; + configData[fwPeriphAddress_DRIVER_NUMBER], &quot;&quot;);
              fwExceptionHandling_display(exceptionInfo);
            }

            iPosServer = dynContains(dsServers, configData[fwPeriphAddress_OPCUA_SERVER_NAME]);
            if( iPosServer == 0 )
            {
              fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Error, DPE registered in an OPC UA server that is not on driver number: &quot; + configData[fwPeriphAddress_DRIVER_NUMBER], &quot;&quot;);
              fwExceptionHandling_display(exceptionInfo);
            }
          }
          else
          {
            fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Error, DP doesn't exist: _OPCUA&quot; + configData[fwPeriphAddress_DRIVER_NUMBER], &quot;&quot;);
            fwExceptionHandling_display(exceptionInfo);
          }

          Treiber.text(configData[fwPeriphAddress_DRIVER_NUMBER]);
          opcServerName = configData[fwPeriphAddress_OPCUA_SERVER_NAME];
          cmbEquipment.items(dsServers);
          cmbEquipment.selectedPos(iPosServer);
        }

        _fwConvertOpcDataType(dataTypeName, configData[fwPeriphAddress_DATATYPE], configData[fwPeriphAddress_TYPE]);
        trans      = getShape(&quot;fwPeriphAddressOPCUA.trans_art&quot;);
        trans.text = dataTypeName;


        if( dynlen(dsServers) &gt; 0 )
        {
          // Check if subscription belongs to the OPC UA server
          if( !dpExists(&quot;_&quot; + dsServers[iPosServer]) )
          {
            fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Error OPC UA server doesn't exist: _ &quot; + dsServer[iPosServer], &quot;&quot;);
            fwExceptionHandling_display(exceptionInfo);
          }
          else
          {
            dpGet(&quot;_&quot; + dsServers[iPosServer] + &quot;.Config.Subscriptions&quot;, dsSubscriptions);
            if( dynlen(dsSubscriptions) == 0 )
            {
              fwException_raise(exceptionInfo, &quot;WARNING&quot;, &quot;Warning, none subscription registered in OPCUA server: &quot; + dsServers[iPosServer], &quot;&quot;);
              fwExceptionHandling_display(exceptionInfo);
            }
            else
            {
              iPosSubscriptions = dynContains(dsSubscriptions, getSystemName() + &quot;_&quot; + configData[fwPeriphAddress_OPCUA_SUBSCRIPTION]);
              if( iPosSubscriptions == 0 )
              {
                fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;Error, subscription: _&quot; + configData[fwPeriphAddress_OPCUA_SUBSCRIPTION] + &quot; not registered in the OPCUA server: &quot; + dsServers[iPosServer], &quot;&quot;);
                fwExceptionHandling_display(exceptionInfo);
              }
            }
          }
        }

        string sPoll;
        if( panelMode == fwPeriphAddress_PANEL_MODE_OBJECT )
        {
          // Subscription
          txtSubscription.text = configData[fwPeriphAddress_OPCUA_SUBSCRIPTION];

          // Pollgroup
          txtPollGroup.text = configData[fwPeriphAddress_OPCUA_POLL_GROUP];
        }
        else
        {
          // Subscription
          cmbSubscription.text = configData[fwPeriphAddress_OPCUA_SUBSCRIPTION];

          // Pollgroup
          sPoll = dpSubStr(configData[fwPeriphAddress_OPCUA_POLL_GROUP], DPSUB_DP);
          if( strpos(sPoll,&quot;_&quot;) == 0 )
            sPoll = substr(sPoll, 1);
          cmbPollGroup.text = sPoll;
        }


        setMultiValue(&quot;txtItem&quot;,          &quot;text&quot;,   configData[fwPeriphAddress_ROOT_NAME],
                      &quot;radKind&quot;,          &quot;number&quot;, (int)configData[fwPeriphAddress_OPCUA_KIND]    - 1,
                      &quot;radVariant&quot;,       &quot;number&quot;, (int)configData[fwPeriphAddress_OPCUA_VARIANT] - 1,
                      &quot;cboAddressActive&quot;, &quot;state&quot;,   0,                                                 configData[fwPeriphAddress_ACTIVE],
                      &quot;lowlevel&quot;,         &quot;state&quot;,   0,                                                 configData[fwPeriphAddress_OPCUA_LOWLEVEL]);
        ADDRESS_PANEL_LOW_LEVEL = configData[fwPeriphAddress_OPCUA_LOWLEVEL];

        switch( configData[fwPeriphAddress_DIRECTION] )
        {
          case DPATTR_ADDR_MODE_INPUT_SPONT:
            setMultiValue(&quot;einaus&quot;, &quot;number&quot;, 1,
                          &quot;modus&quot;,  &quot;number&quot;, 0);
            break;

          case DPATTR_ADDR_MODE_OUTPUT_SINGLE:
            setMultiValue(&quot;einaus&quot;, &quot;number&quot;, 0,
                          &quot;modus&quot;,  &quot;number&quot;, 2);
            break;

          case DPATTR_ADDR_MODE_IO_POLL:
            setMultiValue(&quot;einaus&quot;, &quot;number&quot;, 2,
                          &quot;modus&quot;,  &quot;number&quot;, 1);
            break;

          case DPATTR_ADDR_MODE_IO_SQUERY:
            setMultiValue(&quot;einaus&quot;, &quot;number&quot;, 2,
                          &quot;modus&quot;,  &quot;number&quot;, 2);
            break;

          case DPATTR_ADDR_MODE_INPUT_POLL:
            setMultiValue(&quot;einaus&quot;, &quot;number&quot;, 1,
                          &quot;modus&quot;,  &quot;number&quot;, 1);
            break;

          case DPATTR_ADDR_MODE_INPUT_SQUERY:
            setMultiValue(&quot;einaus&quot;, &quot;number&quot;, 1,
                          &quot;modus&quot;,  &quot;number&quot;, 2);
            break;

          case 9: // DPATTR_ADDR_MODE_AM_ALERT:
            setMultiValue(&quot;einaus&quot;, &quot;number&quot;, 1,
                          &quot;modus&quot;,  &quot;number&quot;, 3);
            break;
         }

         //paUpdateViewOPCUA(paGetDirectionOPCUA());
         break;

   case fwPeriphAddress_TYPE_DIM:
			case fwPeriphAddress_TYPE_DIMCLIENT:
				PREVIOUS_ADDRESS_TYPE = fwPeriphAddress_TYPE_DIM;
				if(dynContains(addressTypes, fwPeriphAddress_TYPE_DIM) &lt;= 0)
					addressType.appendItem(fwPeriphAddress_TYPE_DIM);

				addressType.text = fwPeriphAddress_TYPE_DIM;
				hiddenDataType.text(configData[fwPeriphAddress_DATATYPE]);
							
				_fwGetDimValues(configData, configData[fwPeriphAddress_TYPE]);
				break;
			case fwPeriphAddress_TYPE_MODBUS:
				PREVIOUS_ADDRESS_TYPE = fwPeriphAddress_TYPE_MODBUS;
				if(dynContains(addressTypes, fwPeriphAddress_TYPE_MODBUS) &lt;= 0)
					addressType.appendItem(fwPeriphAddress_TYPE_MODBUS);

				addressType.text = fwPeriphAddress_TYPE_MODBUS;
				if((configData[fwPeriphAddress_DRIVER_NUMBER] &gt;= drvNr.sbMinimum)
						&amp;&amp; (configData[fwPeriphAddress_DRIVER_NUMBER] &lt;= drvNr.sbMaximum))
					drvNr.text(configData[fwPeriphAddress_DRIVER_NUMBER]);

				modbusReference.text = configData[fwPeriphAddress_ROOT_NAME];
				
				switch(configData[fwPeriphAddress_DIRECTION])
				{
					case DPATTR_ADDR_MODE_OUTPUT:
					case DPATTR_ADDR_MODE_OUTPUT_SINGLE:
						 modbusInOut.number = 1;
						 modbusInputMode.number = 0;
						 break;
					case DPATTR_ADDR_MODE_INPUT_SPONT:
						 modbusInOut.number = 0;
						 modbusInputMode.number = 0;
						 break;
					case DPATTR_ADDR_MODE_INPUT_SQUERY:
						 modbusInOut.number = 0;
						 modbusInputMode.number = 2;
						 break;
					case DPATTR_ADDR_MODE_INPUT_POLL:
						 modbusInOut.number = 0;
						 modbusInputMode.number = 1;
						 break;
					default:
						 modbusInOut.number = 0;
						 modbusInputMode.number = 0;
						 break;
				}
				
				addressActive.state(0) = configData[fwPeriphAddress_ACTIVE];
				transformationType = configData[fwPeriphAddress_DATATYPE];
				modbusTransformationSelector.text = TRANSFORM_MODBUS_INT_TO_TEXT[transformationType];
				_fwGetMaximumSubindex(TRANSFORM_MODBUS_INT_TO_TEXT[transformationType], maxSubindex);
				modbusSubindex.sbMaximum = maxSubindex;
				subindex = configData[fwPeriphAddress_MODBUS_SUBINDEX];
				modbusSubindex.text = subindex;
				modbusLowLevel.state(0) = configData[fwPeriphAddress_MODBUS_LOWLEVEL];
				MODBUS_LOW_LEVEL = modbusLowLevel.state(0);
				MODBUS_DIRECTION = modbusInOut.number;
				MODBUS_INPUT_MODE = modbusInputMode.number;
				MODBUS_SUBINDEX	= modbusSubindex.text;	
						
				if(configData[fwPeriphAddress_MODBUS_POLL_GROUP] != &quot;&quot;)
					modbusPollGroupName.text = substr(dpSubStr(configData[fwPeriphAddress_MODBUS_POLL_GROUP], DPSUB_DP), 1, strlen(dpSubStr(configData[fwPeriphAddress_MODBUS_POLL_GROUP], DPSUB_DP)));
												
				_fwDeconstructModbusReference();
				_fwShowModbusItems(TRUE);
				break;
			case fwPeriphAddress_TYPE_DIP:
				PREVIOUS_ADDRESS_TYPE = fwPeriphAddress_TYPE_DIP;
//DebugN(configData);
				if(result &gt; 0)
				{
					addressType.text = fwPeriphAddress_TYPE_DIP;
					dipConfigDpList.text = dpSubStr(configData[fwPeriphAddress_DIP_CONFIG_DP], DPSUB_SYS_DP);
					_fwDIP_splitAddress(configData[fwPeriphAddress_ROOT_NAME], dipItem, dipTag, exceptionInfo);
					dipItemName.text = dipItem;
					dipTagName.text = dipTag;
					
					if(dipTag != &quot;&quot;)
						dipTagRequired.state(0) = TRUE;
					else
						dipTagRequired.state(0) = FALSE;
				}
				else
					addressType.text = fwPeriphAddress_TYPE_NONE;

				break;
			default:
				if(configData[fwPeriphAddress_TYPE] != &quot;&quot;)
					configTypeSplit = strsplit(configData[fwPeriphAddress_TYPE], &quot;/&quot;);
				else
					configTypeSplit[1] = configData[fwPeriphAddress_TYPE];

				CURRENT_SAVED_ADDRESS_TYPE = configTypeSplit[1];
				if(dynContains(THIRD_PARTY_ADDRESS_TYPES, configTypeSplit[1]) &gt; 0)
				{
					//then add third party symbol
					PREVIOUS_ADDRESS_TYPE = configTypeSplit[1];
					showThirdPartySymbol(configTypeSplit[1]);
					addressType.text = configTypeSplit[1];
				}
				else 
				{
					if(dynContains(addressTypes, fwPeriphAddress_TYPE_NONE) &lt;= 0)
						addressType.appendItem(fwPeriphAddress_TYPE_NONE);

					PREVIOUS_ADDRESS_TYPE = configTypeSplit[1];
					addressType.text = fwPeriphAddress_TYPE_NONE;
				}
				break;
		}
		showAddressOptions(configData[fwPeriphAddress_TYPE]);
	}
	else
	{
		CURRENT_SAVED_ADDRESS_TYPE = fwPeriphAddress_TYPE_NONE;
		addressType.text = fwPeriphAddress_TYPE_NONE;
		showAddressOptions(&quot;&quot;);
	}
		
	if(dynlen(exceptionInfo)&gt;0)
	{
		if(exceptionInfo[dynlen(exceptionInfo)] != &quot;&quot;)
		{
			driverProblem.text = &quot;The current state of this config is unknown.\nThe config can not be accessed because\ndriver number &quot;
								+ exceptionInfo[dynlen(exceptionInfo)] + &quot; is not running.&quot;;
			driverProblem.visible = TRUE;
			exceptionInfo = makeDynString();
		}
		else
			fwExceptionHandling_display(exceptionInfo);
	}

	addressType.visible = TRUE;
}












]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="periphAddressPanelTitle" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">100</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">16 18</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">33</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,19,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,19,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Peripheral Address Configuration</prop>
     <prop name="en_US.iso88591">Peripheral Address Configuration</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="drvNrText" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">110</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">280 594</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">36</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">163 92</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Driver Nr:</prop>
     <prop name="en_US.iso88591">Driver Nr:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="hiddenDataType" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">143</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">305 95</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">46</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">307 97</prop>
    <prop name="Size">117 27</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">hiddenDataType</prop>
     <prop name="en_US.iso88591">hiddenDataType</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Text3" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">146</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">165 113</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">47</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 55</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">DP Element:</prop>
     <prop name="en_US.iso88591">DP Element:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="notSupported" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">161</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">235 264</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{255,0,51}</prop>
    <prop name="BackColor">{255,255,255}</prop>
    <prop name="TabOrder">56</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">197 139</prop>
    <prop name="Size">211 75</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">This panel does not 
currently support
parameterization of this 
type of address config</prop>
     <prop name="en_US.iso88591">This panel does not 
currently support
parameterization of this 
type of address config</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">True</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignHCenter]</prop>
   </properties>
  </shape>
  <shape Name="driverProblem" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">199</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">155 130</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{255,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">63</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">161 136</prop>
    <prop name="Size">279 53</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Driver problem</prop>
     <prop name="en_US.iso88591">Driver problem</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">6</prop>
    <prop name="Bordered">True</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignHCenter]</prop>
   </properties>
  </shape>
  <shape Name="addressActiveText" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">722</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">355 858</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">523</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">163 356</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Address active:</prop>
     <prop name="en_US.iso88591">Address active:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="closeButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">198</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1492 929</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">32</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">550 350</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Close</prop>
     <prop name="en_US.iso88591">Close</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOff();
}]]></script>
   </events>
  </shape>
  <shape Name="mainApplyButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">29</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 0</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">31</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">460 350</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Apply</prop>
     <prop name="en_US.iso88591">Apply</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	dyn_string exceptionInfo;
	
	this.enabled = FALSE;
	saveSettings(exceptionInfo);
	this.enabled = TRUE;
	if(dynlen(exceptionInfo) &gt; 0)
		fwExceptionHandling_display(exceptionInfo);
}]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	int x, y;

	if (isDollarDefined(&quot;$bHierarchyBrowser&quot;)) {
    if (strlen($bHierarchyBrowser) &gt; 0 &amp;&amp; $bHierarchyBrowser == false) {
			closeButton.visible = TRUE;
    }else {
			getValue(&quot;&quot;, &quot;position&quot;, x, y);
			this.position(x + 90,y);	
		}
	} else {
		closeButton.visible = TRUE;
  }
		
	this.visible = TRUE;	
}

]]></script>
   </events>
  </shape>
  <shape Name="addressActive" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">197</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">259 348</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">30</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">259 348</prop>
    <prop name="Size">22 33</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="drvNr" shapeType="SPIN_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">120</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">674 586</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">227 88</prop>
    <prop name="Size">64 24</prop>
    <prop name="MinimumID">1</prop>
    <prop name="MaximumID">255</prop>
    <prop name="IncrAccelerator">1</prop>
    <prop name="Position">1</prop>
   </properties>
  </shape>
  <shape Name="addressType" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">160</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 90</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 90</prop>
    <prop name="Size">96 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">(Address Types)</prop>
       <prop name="en_US.iso88591">(Address Types)</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
    </prop>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	string addressType = this.text;
	if(PREVIOUS_ADDRESS_TYPE == addressType)
		return;

	PREVIOUS_ADDRESS_TYPE = addressType;

  dyn_string exceptionInfo;

  if (addressType == fwPeriphAddress_TYPE_DIM || addressType == fwPeriphAddress_TYPE_DIMCLIENT || addressType == fwPeriphAddress_TYPE_DIMSERVER) {
    if (dynlen(dpTypes(&quot;_FwDimConfig&quot;))&lt;1) {
      fwException_raise(exceptionInfo,&quot;ERROR&quot;, &quot;Cannot display/edit DIM addresses - fwDIM not installed&quot;,&quot;&quot;);
    }
  }

  if (addressType == fwPeriphAddress_TYPE_DIP) {
    if (dynlen(dpTypes(&quot;_FwDipConfig&quot;))&lt;1) {
      fwException_raise(exceptionInfo,&quot;ERROR&quot;, &quot;Cannot display/edit DIP addresses - fwDIP not installed&quot;,&quot;&quot;);
    }
  }

  if (addressType == fwPeriphAddress_TYPE_CMW) {
    if (dynlen(dpTypes(&quot;_Un_CMWClient_Driver&quot;))&lt;1) {
      fwException_raise(exceptionInfo,&quot;ERROR&quot;, &quot;Cannot display/edit CMW addresses - unCMW not installed&quot;,&quot;&quot;);
    }
  }

  hideAllThirdPartySymbols();
  
  if(dynlen(exceptionInfo) &gt; 0){
    hideAll();
    notSupported.visible=true;
    fwExceptionHandling_display(exceptionInfo);
    return;
  }

  notSupported.visible=false;

	switch(addressType)
	{
  case fwPeriphAddress_TYPE_OPC:
  case fwPeriphAddress_TYPE_DIM:
	case fwPeriphAddress_TYPE_MODBUS:
	case fwPeriphAddress_TYPE_DIP:
			notSupported.visible = FALSE;
			showAddressOptions(addressType);
			break;
  case fwPeriphAddress_TYPE_NONE:	
			notSupported.visible = FALSE;
			hideAll();
			break;
	default:
			hideAll();
			if(dynContains(THIRD_PARTY_ADDRESS_TYPES, addressType) &gt; 0)
				showThirdPartySymbol(addressType);
			else
				notSupported.visible = TRUE;
			break;
	}
}


]]></script>
   </events>
  </shape>
  <shape Name="elementNameField" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">147</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">347 103</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">90 50</prop>
    <prop name="Size">541 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="mainOkButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">200</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 0</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">63</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">370 350</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OK</prop>
     <prop name="en_US.iso88591">OK</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	dyn_string exceptionInfo;

	saveSettings(exceptionInfo);
	if(dynlen(exceptionInfo) &gt; 0)
		fwExceptionHandling_display(exceptionInfo);
	else
		PanelOff();
}]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	if(isDollarDefined(&quot;$bHierarchyBrowser&quot;))
	{
//DebugN(&quot;MAIN&quot;, $bHierarchyBrowser);
		if(!$bHierarchyBrowser)
			this.visible = TRUE;
	}
	else
		this.visible = TRUE;	
}]]></script>
   </events>
  </shape>
  <reference parentSerial="-1" Name="Group6" referenceId="0">
   <properties>
    <prop name="FileName">objects/fwGeneral/fwHelpButton.pnl</prop>
    <prop name="Location">604 10</prop>
    <prop name="TabOrder">271</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sPanelRelativePath</prop>
      <prop name="Value">fwConfigs/fwPeriphAddress</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <shape Name="dpeDetails" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">719</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">460 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">521</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">460 10</prop>
    <prop name="Size">121 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Select Elements</prop>
     <prop name="en_US.iso88591">Select Elements</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string errorString;
	dyn_string returnedDpeList, systems, exceptionInfo;
	dyn_float cancelOrOk;

	ChildPanelOnCentralModalReturn(&quot;fwConfigs/fwDpeSelector.pnl&quot;, &quot;Choose Data Point Elements&quot;,
									makeDynString(&quot;$dsAllDpes:&quot;+$sDpe, &quot;$dsIncludedDpes:&quot;+DPE_LIST, &quot;$sConfigType:&quot;+fwConfigs_PVSS_ORIGINAL),
									cancelOrOk, returnedDpeList);
	if(cancelOrOk[1] &gt; 0.5)
	{
		if(DPE_LIST != returnedDpeList)
		{
			DPE_LIST = returnedDpeList;
			DPES_OK = _fwConfigs_checkDpeList(DPE_LIST, fwConfigs_PVSS_ADDRESS, DPE_TYPE, exceptionInfo, errorString);
			if(!DPES_OK)
			{
				if(DPE_TYPE == fwConfigs_NOT_SUPPORTED)
					fwException_raise(exceptionInfo, &quot;ERROR&quot;, errorString, &quot;&quot;);
			}

			_fwConfigs_getSystemsInDpeList(DPE_LIST, systems, exceptionInfo);

			if(dynlen(DPE_LIST)== 1)
				elementNameField.text(DPE_LIST[1]);
			else
			{
				if(dynlen(systems) == 1)
				{
					elementNameField.text(&quot;Multiple Data Point Elements (from &quot; + systems[1] + &quot;)&quot;);
					if(systems[1] == getSystemName())
						SYSTEM_NAME = systems[1];
				}
				else
				{
					elementNameField.text(&quot;Multiple Data Point Elements (from multiple systems)&quot;);
					SYSTEM_NAME = &quot;&quot;;
				}
			}

			okButton.enabled = (DPES_OK || (DPE_TYPE != fwConfigs_NOT_SUPPORTED));
			applyButton.enabled = (DPES_OK || (DPE_TYPE != fwConfigs_NOT_SUPPORTED));
		}
	}	
}]]></script>
   </events>
  </shape>
  <shape Name="setDriverNumber" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">720</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">142 85</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">521</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">142 85</prop>
    <prop name="Size">21 31</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="setActive" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">721</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">142 348</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">522</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">142 348</prop>
    <prop name="Size">21 31</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="COMBO_BOX1" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">888</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">280 560</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">623</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">280 560</prop>
    <prop name="Size">1 11</prop>
    <prop name="Listitems"/>
    <prop name="Editable">True</prop>
   </properties>
  </shape>
  <reference parentSerial="-1" Name="fwPeriphAddressS7" referenceId="1">
   <properties>
    <prop name="FileName">fwConfigs/fwPeriphAddressS7.pnl</prop>
    <prop name="Location">130 90</prop>
    <prop name="Geometry">1 0 0 1 -30 -20</prop>
    <prop name="TabOrder">624</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$bHierarchyBrowser</prop>
      <prop name="Value">$bHierarchyBrowser</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$sDpe</prop>
      <prop name="Value">$sDpe</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="fwPeriphAddressCMW" referenceId="2">
   <properties>
    <prop name="FileName">fwConfigs/fwPeriphAddressCMW.pnl</prop>
    <prop name="Location">130 90</prop>
    <prop name="Geometry">1 0 0 1 -30 -20</prop>
    <prop name="TabOrder">624</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$bHierarchyBrowser</prop>
      <prop name="Value">$bHierarchyBrowser</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$sDpe</prop>
      <prop name="Value">$sDpe</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="fwPeriphAddressSNMP" referenceId="3">
   <properties>
    <prop name="FileName">fwConfigs/fwPeriphAddressSNMP.pnl</prop>
    <prop name="Location">110 80</prop>
    <prop name="Geometry">1 0 0 1 -4.5 -10</prop>
    <prop name="TabOrder">711</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$bHierarchyBrowser</prop>
      <prop name="Value">$bHierarchyBrowser</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$sDpe</prop>
      <prop name="Value">$sDpe</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="fwPeriphAddressBACnet" referenceId="4">
   <properties>
    <prop name="FileName">fwConfigs/fwPeriphAddressBACnet.pnl</prop>
    <prop name="Location">302 359</prop>
    <prop name="Geometry">0.9997940690239777 0 0 1 8.06219115475877 0</prop>
    <prop name="TabOrder">711</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sDpe</prop>
      <prop name="Value">$sDpe</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <shape Name="dimConfigDpList" shapeType="COMBO_BOX" layerId="1">
   <properties>
    <prop name="serialId">1000</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">172 90</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">625</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">172 90</prop>
    <prop name="Size">211 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	string dpType, systemName;
	dyn_string configDps, exceptionInfo;

	dpType = &quot;_FwDimConfig&quot;;
  
  dyn_string dpTypesList = dpTypes();
  
  if (dynContains(dpTypesList, dpType)) {
    	fwGeneral_getSystemName($sDpe, systemName, exceptionInfo);
    	if(systemName == &quot;&quot;)
    		systemName = getSystemName();
	
    	if(systemName == getSystemName())
    	{
    		configDps = dpNames(systemName + &quot;*&quot;, dpType);
    	//	configDps = dpNames(systemName + &quot;*&quot;, dpType);
    		dimConfigDpList.items = configDps;
    		if(dynlen(configDps) &gt; 0)
    			dimConfigDpList.selectedPos = 1;
    	}
    	else
    	{
    		dimConfigDpList.items = makeDynString();
    		dimConfigDpList.text = &quot;Cannot set remote DPs for DIM&quot;;
    		dimConfigDpRefresh.enabled = FALSE;
    	}
  }
}]]></script>
   </events>
  </shape>
  <shape Name="servicecommand" shapeType="COMBO_BOX" layerId="1">
   <properties>
    <prop name="serialId">1001</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">172 124</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">626</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">172 124</prop>
    <prop name="Size">128 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">DIM Service</prop>
       <prop name="en_US.iso88591">DIM Service</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">DIM Command</prop>
       <prop name="en_US.iso88591">DIM Command</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	if(this.selectedPos == 1)
		toggleDimClientServiceOptions(TRUE);
	else
		toggleDimClientServiceOptions(FALSE);
}]]></script>
   </events>
  </shape>
  <shape Name="setDimConfigDp" shapeType="CHECK_BOX" layerId="1">
   <properties>
    <prop name="serialId">1002</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">142 88</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">627</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">142 88</prop>
    <prop name="Size">21 31</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="setDimDirection" shapeType="CHECK_BOX" layerId="1">
   <properties>
    <prop name="serialId">1003</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">142 118</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">628</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">142 118</prop>
    <prop name="Size">21 31</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="dimConfigDpRefresh" shapeType="PUSH_BUTTON" layerId="1">
   <properties>
    <prop name="serialId">1004</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">393 86</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">629</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">393 86</prop>
    <prop name="Size">71 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Refresh</prop>
     <prop name="en_US.iso88591">Refresh</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string dpType, currentSelection, systemName;
	dyn_string configDps, exceptionInfo;

	currentSelection = dimConfigDpList.text;

	dpType = &quot;_FwDimConfig&quot;;

  if (dynlen(dpTypes(dpType))&lt;1) {
    notSupported.visible=true;
    this.enabled=false;
    fwException_raise(exceptionInfo,&quot;ERROR&quot;,&quot;Cannot show/edit DIM address - fwDIM not installed&quot;,&quot;&quot;);
    fwExceptionHandling_display(exceptionInfo);
    return;    
  }

	fwGeneral_getSystemName($sDpe, systemName, exceptionInfo);
	configDps = dpNames(systemName + &quot;*&quot;, dpType);
	dimConfigDpList.items = configDps;

	dimConfigDpList.text = currentSelection;
}]]></script>
   </events>
  </shape>
  <shape Name="dimServicecommandTitle" shapeType="PRIMITIVE_TEXT" layerId="1">
   <properties>
    <prop name="serialId">1005</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">300 140</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">630</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">175 161</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(DIMServ/comm)</prop>
     <prop name="en_US.iso88591">(DIMServ/comm)</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dimServicecommand" shapeType="TEXT_FIELD" layerId="1">
   <properties>
    <prop name="serialId">1006</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">962 492</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">631</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">282 159</prop>
    <prop name="Size">195 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="dimUpdateIntervalTitle" shapeType="PRIMITIVE_TEXT" layerId="1">
   <properties>
    <prop name="serialId">1007</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">300 153</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">632</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">175 254</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Update Interval (seconds):</prop>
     <prop name="en_US.iso88591">Update Interval (seconds):</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dimUpdateIntervalInfo" shapeType="PRIMITIVE_TEXT" layerId="1">
   <properties>
    <prop name="serialId">1008</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">300 153</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">633</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">412 254</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">0 = On Change</prop>
     <prop name="en_US.iso88591">0 = On Change</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dimUpdateInterval" shapeType="TEXT_FIELD" layerId="1">
   <properties>
    <prop name="serialId">1009</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">333 250</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">634</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">333 250</prop>
    <prop name="Size">61 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[5d,False,False,AlignRight,False]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
this.text = 0;
}]]></script>
   </events>
  </shape>
  <shape Name="tStampText" shapeType="PRIMITIVE_TEXT" layerId="1">
   <properties>
    <prop name="serialId">1010</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">299 156</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">635</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">174 287</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Time Stamp and Quality Flag:</prop>
     <prop name="en_US.iso88591">Time Stamp and Quality Flag:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dimUpdateText" shapeType="PRIMITIVE_TEXT" layerId="1">
   <properties>
    <prop name="serialId">1011</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">299 156</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">636</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">174 317</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Update on First Connect:</prop>
     <prop name="en_US.iso88591">Update on First Connect:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="tStamp" shapeType="CHECK_BOX" layerId="1">
   <properties>
    <prop name="serialId">1012</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">473 870</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">637</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">357 281</prop>
    <prop name="Size">24 30</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="dimUpdate" shapeType="CHECK_BOX" layerId="1">
   <properties>
    <prop name="serialId">1013</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">473 899</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">638</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">357 310</prop>
    <prop name="Size">24 30</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="dimDefaultValueTitle" shapeType="PRIMITIVE_TEXT" layerId="1">
   <properties>
    <prop name="serialId">1014</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">299 153</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">639</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">174 223</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Default Value:</prop>
     <prop name="en_US.iso88591">Default Value:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dimDefaultValue" shapeType="TEXT_FIELD" layerId="1">
   <properties>
    <prop name="serialId">1015</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">667 551</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">640</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">282 218</prop>
    <prop name="Size">111 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="setDimDefaultValue" shapeType="CHECK_BOX" layerId="1">
   <properties>
    <prop name="serialId">1016</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">142 216</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">641</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">142 216</prop>
    <prop name="Size">21 31</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="setDimInterval" shapeType="CHECK_BOX" layerId="1">
   <properties>
    <prop name="serialId">1017</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">142 246</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">642</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">142 246</prop>
    <prop name="Size">21 31</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="setDimTimeStamp" shapeType="CHECK_BOX" layerId="1">
   <properties>
    <prop name="serialId">1018</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">142 276</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">643</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">142 276</prop>
    <prop name="Size">21 31</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="setDimUpdate" shapeType="CHECK_BOX" layerId="1">
   <properties>
    <prop name="serialId">1019</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">142 306</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">644</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">142 306</prop>
    <prop name="Size">21 31</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <reference parentSerial="-1" Name="fwPeriphAddressOPCUA" referenceId="5">
   <properties>
    <prop name="FileName">fwConfigs/fwPeriphAddressOPCUA.pnl</prop>
    <prop name="Location">-2 80</prop>
    <prop name="TabOrder">711</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sDpe</prop>
      <prop name="Value">$sDpe</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="fwPeriphAddressMQTT" referenceId="6">
   <properties>
    <prop name="FileName">fwConfigs/fwPeriphAddressMQTT.pnl</prop>
    <prop name="Location">101.4999999999999 75</prop>
    <prop name="Geometry">1 0 0 1 8.500000000000085 5</prop>
    <prop name="TabOrder">726</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$bHierarchyBrowser</prop>
      <prop name="Value">TRUE</prop>
     </prop>
     <prop name="dollarParameter">
      <prop name="Dollar">$sDpe</prop>
      <prop name="Value">$sDpe</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
   </properties>
  </reference>
  <shape Name="setOpcServer" shapeType="CHECK_BOX" layerId="2">
   <properties>
    <prop name="serialId">1020</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">140 120</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">645</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">140 120</prop>
    <prop name="Size">21 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="opcServer" shapeType="COMBO_BOX" layerId="2">
   <properties>
    <prop name="serialId">1021</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">561 339</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">646</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">225 117</prop>
    <prop name="Size">214 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	string server;
	dyn_string items, exceptionInfo;

	OPC_ITEM_UPDATE_IN_PROGRESS = FALSE;
	if(panelMode != SINGLE_DPE)
		return;

  getValue(&quot;&quot;,&quot;text&quot;,server);
 	if (server==&quot;&quot;) return;
 	server=SYSTEM_NAME+&quot;_&quot;+strltrim(strrtrim(server));
 	
  _fwGetOpcServerItems(server, items, exceptionInfo);
  opcItem.items = items;
  
	if(dynlen(items) &gt; 0)
		opcItem.selectedPos(1);
	else
		opcItem.text = &quot;&quot;;

	opcItem.enabled = TRUE;
}]]></script>
   </events>
  </shape>
  <shape Name="groupUpdateRate" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1022</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">759 759</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">647</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">463 203</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Update Rate:</prop>
     <prop name="en_US.iso88591">Update Rate:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupDeadband" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1023</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1046 1071</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">648</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">463 243</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Deadband:</prop>
     <prop name="en_US.iso88591">Deadband:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupDeadbandValue" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1025</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1167 1078</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">650</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">553 243</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(%)</prop>
     <prop name="en_US.iso88591">(%)</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupRefreshTimer" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1026</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1107 975</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">651</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">463 223</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Refresh Timer:</prop>
     <prop name="en_US.iso88591">Refresh Timer:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupRefreshTimerValue" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1027</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1618 1254</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">652</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">553 223</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(s)</prop>
     <prop name="en_US.iso88591">(s)</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="opcGroupDetails" shapeType="FRAME" layerId="2">
   <properties>
    <prop name="serialId">1028</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">452 299</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">653</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1 0 0 1 -1 -28</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OPC Group Details</prop>
     <prop name="en_US.iso88591">OPC Group Details</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">452 149</prop>
    <prop name="Size">180 150</prop>
   </properties>
  </shape>
  <shape Name="groupEnableCB" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1029</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1068 1011</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">654</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">463 183</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">CallBack Enabled:</prop>
     <prop name="en_US.iso88591">CallBack Enabled:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupStatus" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1030</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1421 1181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">655</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">463 143</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Group Status:</prop>
     <prop name="en_US.iso88591">Group Status:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupStatusValue" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1031</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1579 1187</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">656</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">548 143</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(in/active)</prop>
     <prop name="en_US.iso88591">(in/active)</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupSource" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1032</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1391 1201</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">657</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">463 163</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Source of Data:</prop>
     <prop name="en_US.iso88591">Source of Data:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupSourceValue" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1033</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1578 1207</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">658</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">556 163</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(cache/dev)</prop>
     <prop name="en_US.iso88591">(cache/dev)</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupEnableCBValue" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1034</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1179 1018</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">659</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">579 183</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(T/F)</prop>
     <prop name="en_US.iso88591">(T/F)</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="groupUpdateRateValue" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1035</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1171 1040</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">660</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">553 205</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(s)</prop>
     <prop name="en_US.iso88591">(s)</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="setOpcDataType" shapeType="CHECK_BOX" layerId="2">
   <properties>
    <prop name="serialId">1036</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">140 194.5</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">661</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">140 195</prop>
    <prop name="Size">21 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="dataTypeValue" shapeType="COMBO_BOX" layerId="2">
   <properties>
    <prop name="serialId">1037</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">240 195</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">662</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">240 195</prop>
    <prop name="Size">121 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">undefined</prop>
       <prop name="en_US.iso88591">undefined</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">default</prop>
       <prop name="en_US.iso88591">default</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">boolean</prop>
       <prop name="en_US.iso88591">boolean</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">integer16</prop>
       <prop name="en_US.iso88591">integer16</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">integer32</prop>
       <prop name="en_US.iso88591">integer32</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">float32</prop>
       <prop name="en_US.iso88591">float32</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">float64</prop>
       <prop name="en_US.iso88591">float64</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">string</prop>
       <prop name="en_US.iso88591">string</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">uchar</prop>
       <prop name="en_US.iso88591">uchar</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">uinteger16</prop>
       <prop name="en_US.iso88591">uinteger16</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">uinteger32</prop>
       <prop name="en_US.iso88591">uinteger32</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">time</prop>
       <prop name="en_US.iso88591">time</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">bitstring</prop>
       <prop name="en_US.iso88591">bitstring</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	if(dataTypeValue.text == &quot;bitstring&quot;)
		toggleBitstringOptions(TRUE);
	else
		toggleBitstringOptions(FALSE);
}]]></script>
   </events>
  </shape>
  <shape Name="inOut" shapeType="COMBO_BOX" layerId="2">
   <properties>
    <prop name="serialId">1039</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">223 249</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">664</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">223 249</prop>
    <prop name="Size">94 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">In</prop>
       <prop name="en_US.iso88591">In</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Out</prop>
       <prop name="en_US.iso88591">Out</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">In/Out</prop>
       <prop name="en_US.iso88591">In/Out</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	if(this.text == &quot;Out&quot;)
	{
		ADDRESS_PANEL_LOW_LEVEL = opclowLevel.state(0);
		opclowLevel.enabled = FALSE;
		opclowLevel.state(0, FALSE);
	}
	else
	{
		opclowLevel.enabled = TRUE;	
		opclowLevel.state(0, ADDRESS_PANEL_LOW_LEVEL);
	}
}
]]></script>
   </events>
  </shape>
  <shape Name="setOpcDirection" shapeType="CHECK_BOX" layerId="2">
   <properties>
    <prop name="serialId">1040</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">138 252</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">665</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">138 252</prop>
    <prop name="Size">21 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="lblOpcLowLevel" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1041</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">873 1112</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">666</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">158 284</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Low Level Comparison:</prop>
     <prop name="en_US.iso88591">Low Level Comparison:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="setOpcLowLevelComparison" shapeType="CHECK_BOX" layerId="2">
   <properties>
    <prop name="serialId">1042</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">138 282</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">667</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">138 282</prop>
    <prop name="Size">21 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="opclowLevel" shapeType="CHECK_BOX" layerId="2">
   <properties>
    <prop name="serialId">1043</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">396 867</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">668</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">296 278</prop>
    <prop name="Size">21 30</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, bool state)
{
	ADDRESS_PANEL_LOW_LEVEL = state;
}]]></script>
   </events>
  </shape>
  <shape Name="text5" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1044</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">213 637</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">669</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">90 316</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">OPC Item:</prop>
     <prop name="en_US.iso88591">OPC Item:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="refButton" shapeType="PUSH_BUTTON" layerId="2">
   <properties>
    <prop name="serialId">1045</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1213 602</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">670</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">532 309</prop>
    <prop name="Size">97 27</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Refresh IDs</prop>
     <prop name="en_US.iso88591">Refresh IDs</prop>
     <prop name="de_AT.iso88591">Get Item IDs</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{	
	bool timedOut;
	string server;
	dyn_string exceptionInfo;
	dyn_anytype returnValue;

 	getValue(&quot;opcServer&quot;,&quot;text&quot;,server);
 	if (server==&quot;&quot;) return;

 	server=SYSTEM_NAME + &quot;_&quot; + strltrim(strrtrim(server));

 	
 	opcItem.enabled = FALSE;
 	opcItem.text = &quot;Updating...&quot;;
	OPC_ITEM_UPDATE_IN_PROGRESS = TRUE;
 	dpSetWait(server+&quot;.GetItemIds:_original.._value&quot;,1);
 	dpWaitForValue(server+&quot;.ItemIds:_online.._value&quot;, makeDynAnytype(),
 									server+&quot;.ItemIds:_online.._value&quot;, returnValue, 20, timedOut);

	if(OPC_ITEM_UPDATE_IN_PROGRESS)
	{
		if(timedOut)
		  fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The OPC item refresh timed out.  Perhaps the OPC server is not connected.&quot;, &quot;&quot;);
		else
			opcItem.items(returnValue[1]);
	}
		
	if(dynlen(opcItem.items) &gt; 0)
	 	opcItem.selectedPos(1);
	else
		opcItem.text = &quot;&quot;;  	

	if(dynlen(exceptionInfo)&gt;0)
		fwExceptionHandling_display(exceptionInfo);

	opcItem.enabled = TRUE;
	OPC_ITEM_UPDATE_IN_PROGRESS = FALSE;
}]]></script>
   </events>
  </shape>
  <shape Name="opcItem" shapeType="COMBO_BOX" layerId="2">
   <properties>
    <prop name="serialId">1046</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">730 626</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">671</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">158 312</prop>
    <prop name="Size">366 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">True</prop>
   </properties>
  </shape>
  <shape Name="opcGroup" shapeType="COMBO_BOX" layerId="2">
   <properties>
    <prop name="serialId">1047</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">736 687</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">672</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">225 152</prop>
    <prop name="Size">214 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	bool cbEnabled, active, dataSource;
	int updateRate, refreshTimer;
	int pos;
	float deadband, updateRateInSeconds;
	string selectedGroup;
	dyn_string groupList, exceptionInfo;

	pos = this.selectedPos();
	groupList = this.items();
	selectedGroup = groupList[pos];

	_fwGetOpcGroupData(SYSTEM_NAME + &quot;_&quot; + selectedGroup, updateRate, deadband,
											cbEnabled, active, dataSource, refreshTimer, exceptionInfo);
	
	_fwShowOpcGroupData(updateRate, deadband, cbEnabled, active, dataSource, refreshTimer, exceptionInfo);
}]]></script>
   </events>
  </shape>
  <shape Name="opcButton" shapeType="PUSH_BUTTON" layerId="2">
   <properties>
    <prop name="serialId">1067</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">273 240</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">692</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">OPC driver configuration</prop>
     <prop name="en_US.iso88591">OPC driver configuration</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,19,5,69,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,19,5,69,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-bold-r-normal-*-*-160-100-100-*-*-iso8859-1</prop>
    </prop>
    <prop name="Location">18 220</prop>
    <prop name="Size">52 47</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Image" SharedPixmap="1">
     <prop name="BackgroundPixmap">SysMgm/40x40/OpcAEClient.png</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	if(!isModuleOpen(&quot;PVSS&quot;))
		ModuleOn(&quot;PVSS&quot;, 100, 100, 500, 500, 1, 1, &quot;None&quot;);
	RootPanelOnModule(&quot;para/opc.pnl&quot;, &quot;&quot;, &quot;PVSS&quot;, makeDynString(&quot;&quot;));
}]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	/*if(isModeExtended()) {
		this.enabled = true;
	}
	else {
		this.enabled = false;
	}*/
}]]></script>
   </events>
  </shape>
  <shape Name="opcGroupText" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1068</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">250 697</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">693</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">167 156</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Group:</prop>
     <prop name="en_US.iso88591">Group:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="text11" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1069</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">220 351</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">694</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">167 122</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Server:</prop>
     <prop name="en_US.iso88591">Server:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="opcDirection" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1070</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">472 1082</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">695</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">160 254</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Direction:</prop>
     <prop name="en_US.iso88591">Direction:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="setOpcGroup" shapeType="CHECK_BOX" layerId="2">
   <properties>
    <prop name="serialId">1079</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">140 152</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">704</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">140 152</prop>
    <prop name="Size">21 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8"></prop>
       <prop name="en_US.iso88591"></prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
  </shape>
  <shape Name="dataType" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1080</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">530 1027</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">705</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">167 199</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Data Type:</prop>
     <prop name="en_US.iso88591">Data Type:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="subindex" shapeType="PRIMITIVE_TEXT" layerId="2">
   <properties>
    <prop name="serialId">1084</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">598 1054</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">709</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">241 226</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Sub index:</prop>
     <prop name="en_US.iso88591">Sub index:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="subindexValue" shapeType="TEXT_FIELD" layerId="2">
   <properties>
    <prop name="serialId">1085</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">306 222</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">710</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">306 222</prop>
    <prop name="Size">51 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="modbusUnicosSelector" shapeType="RADIO_BOX" layerId="3">
   <properties>
    <prop name="serialId">1048</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">148 129</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">673</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">148 129</prop>
    <prop name="Size">81 61</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">MODBUS</prop>
       <prop name="en_US.iso88591">MODBUS</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">UNICOS</prop>
       <prop name="en_US.iso88591">UNICOS</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button)
{
	_fwShowModbusItems(TRUE);
}]]></script>
   </events>
  </shape>
  <shape Name="modbusLowLevel" shapeType="CHECK_BOX" layerId="3">
   <properties>
    <prop name="serialId">1064</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">1081 795</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">689</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">377 206</prop>
    <prop name="Size">141 30</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">low level comparison</prop>
       <prop name="en_US.iso88591">low level comparison</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, bool state)
{
	if(button == 0)
		MODBUS_LOW_LEVEL = state;
}]]></script>
   </events>
  </shape>
  <shape Name="modbusPlcNumber" shapeType="SPIN_BUTTON" layerId="3">
   <properties>
    <prop name="serialId">1050</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">240 147</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">675</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">240 147</prop>
    <prop name="Size">66 24</prop>
    <prop name="MinimumID">1</prop>
    <prop name="MaximumID">65535</prop>
    <prop name="IncrAccelerator">1</prop>
    <prop name="Position">1</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	_fwConstructModbusReference();
}]]></script>
   </events>
  </shape>
  <shape Name="modbusWriteFunctionCalls" shapeType="COMBO_BOX" layerId="3">
   <properties>
    <prop name="serialId">1052</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">330 147</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">677</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">330 147</prop>
    <prop name="Size">191 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Write Coil</prop>
       <prop name="en_US.iso88591">Write Coil</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Write Single Register</prop>
       <prop name="en_US.iso88591">Write Single Register</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Force Multiple Coils</prop>
       <prop name="en_US.iso88591">Force Multiple Coils</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Write Multiple Registers</prop>
       <prop name="en_US.iso88591">Write Multiple Registers</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	_fwConstructModbusReference();
}]]></script>
   </events>
  </shape>
  <shape Name="modbusReferenceNumber" shapeType="SPIN_BUTTON" layerId="3">
   <properties>
    <prop name="serialId">1054</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">535.5 145</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">679</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">536 145</prop>
    <prop name="Size">72 24</prop>
    <prop name="MinimumID">0</prop>
    <prop name="MaximumID">65535</prop>
    <prop name="IncrAccelerator">1</prop>
    <prop name="Position">0</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	_fwConstructModbusReference();
}]]></script>
   </events>
  </shape>
  <shape Name="modbusReferenceTitle" shapeType="FRAME" layerId="3">
   <properties>
    <prop name="serialId">1055</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">413 123</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">680</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1 0 0 1 -12 -7</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">413 78</prop>
    <prop name="Size">220 45</prop>
   </properties>
  </shape>
  <shape Name="referenceTitle" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1056</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">411 86</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">681</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">413 88</prop>
    <prop name="Size">87 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Reference:</prop>
     <prop name="en_US.iso88591">Reference:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="modbusReference" shapeType="TEXT_FIELD" layerId="3">
   <properties>
    <prop name="serialId">1057</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">484 86</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">682</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">484 86</prop>
    <prop name="Size">131 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="modbusInOut" shapeType="RADIO_BOX" layerId="3">
   <properties>
    <prop name="serialId">1058</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">148 257</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">683</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">148 257</prop>
    <prop name="Size">51 61</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">In</prop>
       <prop name="en_US.iso88591">In</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Out</prop>
       <prop name="en_US.iso88591">Out</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button)
{
	MODBUS_DIRECTION = button;
	_fwShowModbusItems(TRUE);
}]]></script>
   </events>
  </shape>
  <shape Name="modbusInputMode" shapeType="RADIO_BOX" layerId="3">
   <properties>
    <prop name="serialId">1059</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">231 260</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">684</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">231 260</prop>
    <prop name="Size">111 81</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Spontaneous</prop>
       <prop name="en_US.iso88591">Spontaneous</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Polling</prop>
       <prop name="en_US.iso88591">Polling</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Single Query</prop>
       <prop name="en_US.iso88591">Single Query</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button)
{
	MODBUS_INPUT_MODE = button;
	_fwShowModbusItems(TRUE);
}
]]></script>
   </events>
  </shape>
  <shape Name="modbusPollGroupName" shapeType="COMBO_BOX" layerId="3">
   <properties>
    <prop name="serialId">1060</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">371 264</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">685</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">371 264</prop>
    <prop name="Size">238 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
  </shape>
  <shape Name="modbusPollGroupButton" shapeType="PUSH_BUTTON" layerId="3">
   <properties>
    <prop name="serialId">1061</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">497 301</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">686</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">497 301</prop>
    <prop name="Size">111 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Poll Groups...</prop>
     <prop name="en_US.iso88591">Poll Groups...</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  dyn_float  df;
  dyn_string ds;
  
//!!!pollgroup
  ChildPanelOnCentralModalReturn(&quot;para/poll_groups.pnl&quot;,
    &quot;Poll groups&quot;,
    makeDynString(&quot;$fromPara:&quot;+modbusPollGroupName.text), df, ds);

  if ( dynlen(df) &gt; 0 &amp;&amp; df[1] )
  {
    int iPos = dynContains(modbusPollGroupName.items, ds[1]);
    
    if ( iPos &lt; 1 )
      modbusPollGroupName.appendItem(ds[1]);
    modbusPollGroupName.text = ds[1];
  }
}
]]></script>
   </events>
  </shape>
  <shape Name="modbusTransformationSelector" shapeType="COMBO_BOX" layerId="3">
   <properties>
    <prop name="serialId">1063</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">150 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">688</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">150 210</prop>
    <prop name="Size">141 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">undefined</prop>
       <prop name="en_US.iso88591">undefined</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">int 16</prop>
       <prop name="en_US.iso88591">int 16</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">int 32</prop>
       <prop name="en_US.iso88591">int 32</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">uint 16</prop>
       <prop name="en_US.iso88591">uint 16</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">uint 32</prop>
       <prop name="en_US.iso88591">uint 32</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">byte</prop>
       <prop name="en_US.iso88591">byte</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">float</prop>
       <prop name="en_US.iso88591">float</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">boolean</prop>
       <prop name="en_US.iso88591">boolean</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">boolean as byte</prop>
       <prop name="en_US.iso88591">boolean as byte</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">string</prop>
       <prop name="en_US.iso88591">string</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">blob</prop>
       <prop name="en_US.iso88591">blob</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	_fwShowModbusItems(TRUE);
}]]></script>
   </events>
  </shape>
  <shape Name="modbusSubindex" shapeType="SPIN_BUTTON" layerId="3">
   <properties>
    <prop name="serialId">1066</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">300 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">691</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">300 210</prop>
    <prop name="Size">66 24</prop>
    <prop name="MinimumID">0</prop>
    <prop name="MaximumID">59</prop>
    <prop name="IncrAccelerator">1</prop>
    <prop name="Position">0</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	MODBUS_SUBINDEX = this.text;
	_fwConstructModbusReference();
}]]></script>
   </events>
  </shape>
  <shape Name="modbusReadFunctionCalls" shapeType="COMBO_BOX" layerId="3">
   <properties>
    <prop name="serialId">1081</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">330 147</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">706</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">330 147</prop>
    <prop name="Size">191 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Read Coils</prop>
       <prop name="en_US.iso88591">Read Coils</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Read Input Discretes</prop>
       <prop name="en_US.iso88591">Read Input Discretes</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Read Multiple Registers</prop>
       <prop name="en_US.iso88591">Read Multiple Registers</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Read Input Registers</prop>
       <prop name="en_US.iso88591">Read Input Registers</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Read Exception Status</prop>
       <prop name="en_US.iso88591">Read Exception Status</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Read FIFO Queue</prop>
       <prop name="en_US.iso88591">Read FIFO Queue</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	_fwConstructModbusReference();
}]]></script>
   </events>
  </shape>
  <shape Name="unicosFunctionCalls" shapeType="COMBO_BOX" layerId="3">
   <properties>
    <prop name="serialId">1082</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">330 147</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">707</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">330 147</prop>
    <prop name="Size">191 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Status</prop>
       <prop name="en_US.iso88591">Status</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Events</prop>
       <prop name="en_US.iso88591">Events</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Events32</prop>
       <prop name="en_US.iso88591">Events32</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	_fwConstructModbusReference();
}]]></script>
   </events>
  </shape>
  <shape Name="MODBUS_Frame3" shapeType="RECTANGLE" layerId="3">
   <properties>
    <prop name="serialId">1259</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 20</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">713</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">0.1403846153846154 0 0 2.25 138.5961538461539 208</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">10 20</prop>
    <prop name="Size">521 41</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="MODBUS_FrameText4" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1260</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">145 245</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">714</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">145 245</prop>
    <prop name="Font">
     <prop name="en_US.utf8">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Direction</prop>
     <prop name="en_US.iso88591">Direction</prop>
     <prop name="de_AT.iso88591"> Referenz </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">0</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="MODBUS_Frame_receiveMode" shapeType="RECTANGLE" layerId="3">
   <properties>
    <prop name="serialId">1261</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 20</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">715</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1 0 0 0.9574468085106383 44 66.29787234042554</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">173 195</prop>
    <prop name="Size">139 95</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="MODBUS_FrameText_receiveMode" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1262</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">222.63815862974 244.5299306066886</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">716</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">222.63815862974 244.5299306066886</prop>
    <prop name="Font">
     <prop name="en_US.utf8">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Receive Mode</prop>
     <prop name="en_US.iso88591">Receive Mode</prop>
     <prop name="de_AT.iso88591"> Referenz </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">0</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="MODBUS_Frame2" shapeType="RECTANGLE" layerId="3">
   <properties>
    <prop name="serialId">1263</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 20</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">717</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">0.9230769230769229 0 0 0.9460608344343293 130.7692307692308 182.6575666226268</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">10 20</prop>
    <prop name="Size">521 41</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="modbusTransformationTitle" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1062</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">144 191</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">687</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">146 193</prop>
    <prop name="Size">127 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Transformation Type</prop>
     <prop name="en_US.iso88591">Transformation Type</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="MODBUS_Frame_pollingGroup" shapeType="RECTANGLE" layerId="3">
   <properties>
    <prop name="serialId">1264</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 20</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">718</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1.869565217391304 0 0 0.9574468085106378 35.30434782608695 66.29787234042556</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">173 195</prop>
    <prop name="Size">139 95</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="modbusPollGroupTitle" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1083</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">370 243</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">708</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">372 245</prop>
    <prop name="Size">87 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Polling Group</prop>
     <prop name="en_US.iso88591">Polling Group</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="modbusSubindexTitle" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1267</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">297 192.5</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">721</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">297 192.5</prop>
    <prop name="Font">
     <prop name="en_US.utf8">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Subindex</prop>
     <prop name="en_US.iso88591">Subindex</prop>
     <prop name="de_AT.iso88591"> Referenz </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">0</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="MODBUS_Frame1" shapeType="RECTANGLE" layerId="3">
   <properties>
    <prop name="serialId">1268</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 20</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">722</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">0.923076923076923 0 0 1.5 130.7692307692307 97</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">10 20</prop>
    <prop name="Size">521 41</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="modbusPlcNumberTitle" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1270</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">240 120.3424333773732</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">724</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">240 120.3424333773732</prop>
    <prop name="Font">
     <prop name="en_US.utf8">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">PLC No.</prop>
     <prop name="en_US.iso88591">PLC No.</prop>
     <prop name="de_AT.iso88591"> Referenz </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">0</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="MODBUS_FrameText1" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1271</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">154 117</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">725</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">154 117</prop>
    <prop name="Font">
     <prop name="en_US.utf8">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">MS Shell Dlg,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="de_AT.iso88591">-microsoft windows-arial-medium-r-normal-*-*-120-100-100-*-*-iso8859-1</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Type</prop>
     <prop name="en_US.iso88591">Type</prop>
     <prop name="de_AT.iso88591"> Referenz </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">0</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="functionCallsTitle" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1051</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">327 118</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">676</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">329 120</prop>
    <prop name="Size">87 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Function Call</prop>
     <prop name="en_US.iso88591">Function Call</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="modbusReferenceNumberTitle" shapeType="PRIMITIVE_TEXT" layerId="3">
   <properties>
    <prop name="serialId">1053</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">523.5 118</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">678</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">525.5 120</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Reference No.</prop>
     <prop name="en_US.iso88591">Reference No.</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dipTagNameTitle" shapeType="PRIMITIVE_TEXT" layerId="4">
   <properties>
    <prop name="serialId">1071</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">180 256</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">696</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">182 258</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Tag Name:</prop>
     <prop name="en_US.iso88591">Tag Name:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dipTagName" shapeType="TEXT_FIELD" layerId="4">
   <properties>
    <prop name="serialId">1072</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">250 252</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">697</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">250 252</prop>
    <prop name="Size">221 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="dipTagRequired" shapeType="CHECK_BOX" layerId="4">
   <properties>
    <prop name="serialId">1073</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">161.5 217</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">698</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">162 217</prop>
    <prop name="Size">101 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Specific Tag</prop>
       <prop name="en_US.iso88591">Specific Tag</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, bool state)
{
	if(state)
	{
		dipTagName.visible = TRUE;
		dipTagNameTitle.visible = TRUE;
	}
	else
	{
		dipTagName.visible = FALSE;
		dipTagNameTitle.visible = FALSE;
	}
}]]></script>
   </events>
  </shape>
  <shape Name="dipItemNameTitle" shapeType="PRIMITIVE_TEXT" layerId="4">
   <properties>
    <prop name="serialId">1074</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">162 159</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">699</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">164 161</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">DIP Item:</prop>
     <prop name="en_US.iso88591">DIP Item:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dipItemName" shapeType="TEXT_FIELD" layerId="4">
   <properties>
    <prop name="serialId">1075</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">232 155</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">700</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">232 155</prop>
    <prop name="Size">221 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="dipConfigDpRefresh" shapeType="PUSH_BUTTON" layerId="4">
   <properties>
    <prop name="serialId">1076</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">382 84.5</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">701</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">382 85</prop>
    <prop name="Size">71 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Refresh</prop>
     <prop name="en_US.iso88591">Refresh</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string dpType, currentSelection;
	dyn_string configDps;

	currentSelection = dipConfigDpList.text;

	dpType = &quot;_FwDipConfig&quot;;
  if (dynlen(dpTypes(dpType))&lt;1) {
    notSupported.visible=true;
    this.enabled=false;
    fwException_raise(exceptionInfo,&quot;ERROR&quot;,&quot;Cannot show/edit DIP address - fwDIP not installed&quot;,&quot;&quot;);
    fwExceptionHandling_display(exceptionInfo);
    return;    
  }
	configDps = dpNames(&quot;*:*&quot;, dpType);
	dipConfigDpList.items = configDps;

	dipConfigDpList.text = currentSelection;
}]]></script>
   </events>
  </shape>
  <shape Name="dipConfigDpList" shapeType="COMBO_BOX" layerId="4">
   <properties>
    <prop name="serialId">1077</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">162 88.5</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">702</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,40,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,40,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">162 89</prop>
    <prop name="Size">211 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	string dpType;
	dyn_string configDps;

	dpType = &quot;_FwDipConfig&quot;;
  
  dyn_string dpTypes = dpTypes();
  
  if (dynContains(dpTypes, dpType)) {
	  configDps = dpNames(&quot;*:*&quot;, dpType);
	  dipConfigDpList.items = configDps;
 	  if(dynlen(configDps) &gt; 0) {
		  dipConfigDpList.selectedPos = 1;
    }
  }
}]]></script>
   </events>
  </shape>
 </shapes>
</panel>
