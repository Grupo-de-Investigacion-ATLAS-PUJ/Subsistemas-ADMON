<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.iso88591"></prop>
  </prop>
  <prop name="Size">269 586</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">0 0</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[mapping g_AliasToDp;
dyn_string g_expandedSystems;

dyn_string g_initiallySelectedItems; // initial selection
dyn_string g_selectedItems; // current selection
dyn_string g_maskedItems; // contains those in the g_selectedItems that are not visible now

const string SYSTEM_ICON = &quot;dptree/system.png&quot;;
const string NODE_ICON = &quot;dptree/struct.png&quot;;
const string DEVICE_ICON = &quot;dptree/dp.png&quot;;
const string SYS_PREFIX=&quot;SYSTEM:&quot;;
const string NONFWDP_PREFIX=&quot;/OTHERS&quot;;
const string INTERNAL_PREFIX=&quot;/INTERNAL&quot;;


/**
  Various initialization tasks...
  We want to react on the fact that systems connect/disconnect.
  We will make use of _unDistributedControl to track these
*/
void Initialize()
{

  
  AliasesTree.addColumn(&quot;ALIAS&quot;);
  AliasesTree.showHeader(FALSE);  
  
  dyn_string exceptionInfo;
    
  
     if (isDollarDefined(&quot;$explainSelected&quot;)) {
     if ($explainSelected) {
       SelectedAlias.visible=TRUE;
       SelectedDp.visible=TRUE;
       NumSelected.visible=TRUE;
     } else {
       SelectedAlias.visible=FALSE;
       SelectedDp.visible=FALSE;
       NumSelected.visible=FALSE;       
       // move the items that are below a bit up...
       dyn_string shapesToMove=makeDynString(&quot;AliasFilter&quot;,&quot;FilterText&quot;,&quot;PressEnter&quot;,
                                             &quot;ShowNonFw&quot;,&quot;ShowInternal&quot;,&quot;ResetSelectionButton&quot;);
       for (int i=1;i&lt;=dynlen(shapesToMove);i++) {
         int x,y;
         getValue(shapesToMove[i],&quot;position&quot;,x,y);
         setValue(shapesToMove[i],&quot;position&quot;,x,y-65);
       }  
     }
   }

          
    //AliasesTree.selectionMode(&quot;Extended&quot;);
    AliasesTree.selectionMode(&quot;Multi&quot;); // default is multi-selection

     if (isDollarDefined(&quot;$selectionMode&quot;)){
       if ($selectionMode==0) {
         // no selection should be done at all
         AliasesTree.selectionMode(&quot;NoSelection&quot;);
         NumSelected.visible=FALSE;
       } else if ($selectionMode==1) {
          // single item selection
         AliasesTree.selectionMode(&quot;Single&quot;);
         NumSelected.visible=FALSE;
       } else {
             // multi-selection 
         AliasesTree.selectionMode(&quot;Multi&quot;);
       }
     }
     
     
   if (isDollarDefined(&quot;$resetButton&quot;)) {
    if ($resetButton) ResetSelectionButton.visible=TRUE; else ResetSelectionButton.visible=FALSE;;
   }

     
   if (isDollarDefined(&quot;$showFilter&quot;)) {
     if ($showFilter) {
       AliasFilter.visible=TRUE;
       ShowNonFw.visible=TRUE;
       ShowInternal.visible=TRUE;
       FilterText.visible=TRUE;
       PressEnter.visible=TRUE;
     } else {
       AliasFilter.visible=FALSE;
       ShowNonFw.visible=FALSE;
       ShowInternal.visible=FALSE;
       FilterText.visible=FALSE;
       PressEnter.visible=FALSE;
       int x,y;       
       getValue(&quot;ResetSelectionButton&quot;,&quot;position&quot;,x,y);
       setValue(&quot;ResetSelectionButton&quot;,&quot;position&quot;,x,y-85);
     }
   }

   if (isDollarDefined(&quot;$showNonFw&quot;)) {
    if ($showNonFw) ShowNonFw.state(0,TRUE); else ShowNonFw.state(0,FALSE);
   }
   
   if (isDollarDefined(&quot;$showInternal&quot;)) {
    if ($showInternal) ShowInternal.state(0,TRUE); else ShowInternal.state(0,FALSE);
   }

   if (isDollarDefined(&quot;$aliasFilter&quot;)) {
     AliasFilter.text=$aliasFilter;
   }
  
  
  if (isDollarDefined(&quot;$varName&quot;)) {
   // ie. this comes from an embeded panel, and needs to
   // communicate data via a global variable which name is
   // passed in this dollarParameter 

    if (!globalExists($varName)){
       fwException_raise(exceptionInfo,&quot;ERROR&quot;,
			&quot;Global variable &quot;+$varName+&quot; passed in $varName&quot;+
			&quot; is not defined&quot;,&quot;&quot;);	
      fwExceptionHandling_display(exceptionInfo); 
      return;
    }
        
   // check the type for the variable 
   if(getGlobalType($varName) != DYN_STRING_VAR) {
      fwException_raise(exceptionInfo,&quot;ERROR&quot;,
			&quot;Global variable &quot;+$varName+&quot; passed in $varName&quot;+
			&quot; has a wrong type:&quot;+getGlobalType($varName),&quot;&quot;);	
      fwExceptionHandling_display(exceptionInfo); 
      return;
    }
   
    fwGeneral_getGlobalValue($varName, g_initiallySelectedItems, exceptionInfo);
    if (dynlen(exceptionInfo)) {
       fwExceptionHandling_display(exceptionInfo);
       return; 
    }

    
     if (isDollarDefined(&quot;$selectionMode&quot;)){
       // if we have selectionMode disabled...
       if ($selectionMode==0) dynClear(g_initiallySelectedItems);
     }

    
    // bring aliases to canonical form, with system and &quot;@&quot;
    string mySys=getSystemName();
    for (int i=1;i&lt;=dynlen(g_initiallySelectedItems);i++) {
      if (!patternMatch(&quot;*:@*&quot;,g_initiallySelectedItems[i])) 
          g_initiallySelectedItems[i]=mySys+&quot;@&quot;+g_initiallySelectedItems[i];
    }

        
    g_selectedItems=g_initiallySelectedItems;
    NumSelected.text=&quot;Selected: &quot;+dynlen(g_selectedItems)+&quot; devices&quot;;
  }
  
  
  if (isDollarDefined(&quot;$localSystemOnly&quot;) &amp;&amp; $localSystemOnly) {
    string sys=strrtrim(getSystemName(),&quot;:&quot;);
    string node=SYS_PREFIX+sys;
      AliasesTree.insertItem(&quot;&quot;,node,sys);
      AliasesTree.setExpandable(node,TRUE);
      AliasesTree.setIcon(node,0,SYSTEM_ICON);
      SystemExpanded(node);
  } else {
    
   string query=&quot;SELECT '_original.._value' FROM '*.connected' &quot; +
        &quot;WHERE _DPT=\&quot;_UnDistributedControl\&quot; &quot;;
          
   dpQueryConnectSingle(&quot;DistSystemConnectionChanged&quot;,true,
                        &quot;DIST_SYSTEM_CONNECTION&quot;,
                       query);
 }
}

/** Called when a new system connects,
  and also once per every already-connected
  system when the panel initialized
*/
void DistSystemConnectionChanged(string what, dyn_dyn_mixed data)
{
  for (int i=2;i&lt;=dynlen(data);i++) {
    // we start at 2, because the first line is the legend
    string sys=data[i][1];
    // extract system name
    sys=dpSubStr(sys,DPSUB_DP);
    sys=substr(sys,22);
    bool connected=data[i][2];
    string node=SYS_PREFIX+sys;
    if (connected) {       
      AliasesTree.insertItem(&quot;&quot;,node,sys);
      AliasesTree.setExpandable(node,TRUE);
      AliasesTree.setIcon(node,0,SYSTEM_ICON);
      
      // we need to move the item so that it is in order
      dyn_string allTopItems=AliasesTree.children(&quot;&quot;);
      dynSortAsc(allTopItems);
      int idx=dynContains(allTopItems,node);
      if (idx&gt;1) AliasesTree.moveItem(node,allTopItems[idx-1]);

    } else {
      AliasesTree.removeItem(node);
      dyn_string mkeys=mappingKeys(g_AliasToDp);
      dyn_string toRemove=dynPatternMatch(sys+&quot;:@*&quot;,mkeys);
      for (int i=1;i&lt;=dynlen(toRemove);i++) mappingRemove(g_AliasToDp,toRemove[i]);
      int idx=dynContains(g_expandedSystems,sys);
      if (idx&gt;0) dynRemove(g_expandedSystems,idx);
    }
  }
}




/** When the system-node is expanded,
  we get all aliases for it and populate the sub-tree
 */
void SystemExpanded(string id)
{
 string sysName=substr(id,7);
 if (dynContains(g_expandedSystems,sysName)){
//  DebugN(&quot;Already expanded...&quot;,sysName);
  return; 
 }
 dyn_string datapoints, aliases;    
 int num=dpGetAllAliases (datapoints, aliases,&quot;*&quot;,sysName+&quot;:*.**&quot;);

if (num&lt;0) {
	fwException_raise(exceptionInfo,&quot;ERROR&quot;,
		&quot;Cannot retrieve the list of aliases for system &quot;+sysName,&quot;&quot;);
	fwExceptionHandling_display(exceptionInfo);
}

 // Store all the aliases in the global variable,
 // prefixing the aliases with system name...
for (int i=1;i&lt;=dynlen(aliases);i++) {
  g_AliasToDp[sysName+&quot;:@&quot;+aliases[i]]=datapoints[i];
}

dynAppend(g_expandedSystems,sysName);
RepaintTree(sysName);
AliasesTree.setOpen(SYS_PREFIX+sysName,TRUE);
}

/** Repaints the tree
  if sysid parameter is specified,
  only the subtree for this system is repainted
  */
void RepaintTree(string sysid=&quot;&quot;)
{

  // remember which is the current item
 string curItem=AliasesTree.currentItem;
 // but only if this is not the toplevel item
 if (AliasesTree.parent(curItem)==&quot;&quot;) curItem=&quot;&quot;;
      
 bool showInternal=ShowInternal.state(0);
 bool showNonFw=ShowNonFw.state(0);
 string aliasFilter=AliasFilter.text;
 dyn_string allTopNodes=AliasesTree.children(&quot;&quot;);
 dynSortAsc(allTopNodes);
 
    // remove the children, but leave all top-level ones!
  dyn_string topNodes;
  if (sysid!=&quot;&quot;) {
    topNodes=makeDynString(SYS_PREFIX+sysid);
  } else {
    topNodes=allTopNodes;
  }
  
  for (int i=1;i&lt;=dynlen(topNodes);i++) {
    string sysName=AliasesTree.getText(topNodes[i],0);
    AliasesTree.removeItem(topNodes[i]);
    // and recreate it at once
      AliasesTree.insertItem(&quot;&quot;,topNodes[i],sysName);
      AliasesTree.setExpandable(topNodes[i],TRUE);
      AliasesTree.setIcon(topNodes[i],0,SYSTEM_ICON);
    // then recreate &quot;special&quot; sub-nodes
  if (showNonFw) {      
    AliasesTree.appendItem(topNodes[i],topNodes[i]+NONFWDP_PREFIX,&quot;OTHER ALIASES&quot;); 
  }
  if (showInternal) {
    AliasesTree.appendItem(topNodes[i],topNodes[i]+INTERNAL_PREFIX,&quot;INTERNAL ALIASES&quot;); 
  }
  }
  
  if (sysid!=&quot;&quot;) {
   // we need to place the system item in the appropriate place,
   // so the list is sorted 
   int idx=dynContains(allTopNodes,topNodes[1]);
   if (idx&gt;1) AliasesTree.moveItem(topNodes[1],allTopNodes[idx-1]);
//   else AliasesTree.moveItem(topNodes[1],&quot;&quot;);
  }
  

  // now process the list
  dyn_string allAliases=mappingKeys(g_AliasToDp); 

  // do initial processing, so that only the
  // items that are needed are left.
  // this is important for filtering, where
  // the parent devices needs to be included
  // if a child matches the pattern.
  // we also already create list of parent nodes to use
  dynSortAsc(allAliases);
  dyn_string aliases,parents,texts,icons;
  for (int i=1;i&lt;=dynlen(allAliases);i++) {
    string nodeName=allAliases[i];
    string dpName=g_AliasToDp[nodeName];
    string dpT=dpTypeName(dpName);
    // extract sys name
    dyn_string ds=strsplit(nodeName,&quot;:&quot;);
    string sys=ds[1];
    bool isInternal=FALSE;
    if (dpT[0]==&quot;_&quot;) isInternal=TRUE;
    string text=substr(nodeName,strlen(sys)+2);
    
    if (aliasFilter!=&quot;&quot; &amp;&amp; patternMatch(&quot;*&quot;+aliasFilter+&quot;*&quot;,nodeName)==FALSE) continue;
    if (showInternal==FALSE &amp;&amp; isInternal) continue;
    if (sysid!=&quot;&quot; &amp;&amp; sys!=sysid) continue;
    
    dynAppend(aliases,nodeName);
    dynAppend(texts,text);
    dynAppend(icons,DEVICE_ICON);
    // set the default parent...
    if (isInternal) {
      dynAppend(parents,SYS_PREFIX+sys+INTERNAL_PREFIX);
    } else {
      dynAppend(parents,SYS_PREFIX+sys+NONFWDP_PREFIX);
    }
  }
  // for FW-devices, we might need to add parent devices that match the filter
    dyn_string parentsToAdd, grandParents,parentTexts,parentIcons;
    for (int i=1;i&lt;=dynlen(aliases);i++) {
      // extract FW parents and check/add them...
      dyn_string ds=strsplit(aliases[i],&quot;/&quot;);
      if (dynlen(ds)&lt;2) continue; // definitely not a Fw-device
      // reconstruct all parents, and check if they exist. Only if
      // they all exist, we add them
      dyn_string parlist,ptexts,picons;
      string parent=&quot;&quot;; 
      bool allParentsOK=TRUE;
      for (int j=1;j&lt;dynlen(ds);j++) {
        parent+=ds[j];
        string ptext=ds[j];
        if (j==1) {
         // to get the text we need to cut-away the system pfx
          dyn_string dq=strsplit(ptext,&quot;@&quot;);
          if (dynlen(dq)&gt;=2) ptext=dq[2];
        }
        if (dynContains(allAliases,parent)) {
          dynAppend(parlist,parent);
          dynAppend(ptexts,ptext);
          dynAppend(picons,NODE_ICON);
        } else {
          allParentsOK=FALSE;
          break;
        }
        parent+=&quot;/&quot;;
      }
      if (allParentsOK) {
        // reset the parent of this item
        parents[i]=parlist[dynlen(parlist)];
        texts[i]=ds[dynlen(ds)];
        for (int j=1;j&lt;=dynlen(parlist);j++) {
          if (!dynContains(parentsToAdd,parlist[j])) {
            dynAppend(parentsToAdd,parlist[j]);
            dynAppend(parentTexts,ptexts[j]);
            dynAppend(parentIcons,picons[j]);

            if (j&gt;1) {
              dynAppend(grandParents,parlist[j-1]);
            } else {
              // this is more complicated: we need to
              // find out the root node
              dyn_string dq=strsplit(parlist[1],&quot;:&quot;);
              dynAppend(grandParents,SYS_PREFIX+dq[1]);
            }  
          }
        }

      }
    }
  
  if (dynlen(parentsToAdd)!=0) {
  for (int i=dynlen(parentsToAdd);i&gt;=1;i--){
    int idx=dynContains(aliases,parentsToAdd[i]);
    if (idx&gt;=1) {
      texts[idx]=parentTexts[i];
      parents[idx]=grandParents[i];
      icons[idx]=parentIcons[i];
    } else {
      dynInsertAt(aliases,parentsToAdd[i],1);
      dynInsertAt(texts,parentTexts[i],1);
      dynInsertAt(parents,grandParents[i],1);
      dynInsertAt(icons,parentIcons[i],1);
    }
  }
}


  if (showNonFw==FALSE) {
   // remove all the ones that are in the NONFW subtree
    for (int i=1;i&lt;=dynlen(parents);i++) {
      if (patternMatch(SYS_PREFIX+&quot;*&quot;+NONFWDP_PREFIX,parents[i])) {
        dynRemove(aliases,i);
        dynRemove(texts,i);
        dynRemove(parents,i);
        dynRemove(icons,i);
        i--;// reset the iterator!
      }
    } 
  }


    // find the selected and the masked devices!
  dyn_string toSelect=dynIntersect(g_selectedItems,aliases);  
  dynClear(g_maskedItems);
  for (int i=1;i&lt;=dynlen(g_selectedItems);i++) {
    if (!dynContains(toSelect,g_selectedItems[i])) dynAppend(g_maskedItems,g_selectedItems[i]);
 }

  
  
  
//  DebugN(aliases,texts,parents);
  
for (int i=1;i&lt;=dynlen(aliases);i++) {
    
    AliasesTree.appendItem(parents[i],aliases[i],texts[i]);
    if (icons[i]!=&quot;&quot;) AliasesTree.setIcon(aliases[i],0,icons[i]);
}

// set the selection
  AliasesTree.setSelectedItems(toSelect,TRUE);

  // make sure that all nodes that have something selected below them
  // are open
  for (int i=1;i&lt;=dynlen(toSelect);i++) {
    AliasesTree.ensureItemVisible(toSelect[i]);
  }
  
  
  // restore the currentItem  
  if (curItem!=&quot;&quot; &amp;&amp; dynContains(aliases,curItem)){ 
    AliasesTree.ensureItemVisible(curItem);
    AliasesTree.currentItem(curItem);
 }

  
  }



void ResetSelection()
{
   g_selectedItems=g_initiallySelectedItems;
   NumSelected.text=&quot;Selected: &quot;+dynlen(g_selectedItems)+&quot; devices&quot;;
 
   if (isDollarDefined(&quot;$varName&quot;)) {
     dyn_string exceptionInfo;
     fwGeneral_setGlobalValue($varName, g_selectedItems, exceptionInfo);
     if (dynlen(exceptionInfo)){
       fwExceptionHandling_display(exceptionInfo);
       return;
     }
   } 
      
  RepaintTree();
}

]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
  Initialize();
}]]></script>
 </events>
 <shapes>
  <shape Name="AliasFilter" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">15</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">18.47471369210501 453</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">51</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">45 430</prop>
    <prop name="Size">191 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Command" isEscaped="1"><![CDATA[main()
{
  RepaintTree();
}]]></script>
   </events>
  </shape>
  <shape Name="PressEnter" shapeType="RECTANGLE" layerId="0">
   <properties>
    <prop name="serialId">20</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">320 140</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">lightgrey</prop>
    <prop name="BackColor">lightgrey</prop>
    <prop name="TabOrder">57</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591">Remember to press ENTER after you type-in the description</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType" SharedPixmap="1">[pattern,[fit,any,pictures/returnIndicator.gif]]</prop>
    <prop name="Geometry">1 0 0 1 -150 20</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">385 410</prop>
    <prop name="Size">24 24</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="AliasesTree" shapeType="TREE" layerId="0">
   <properties>
    <prop name="serialId">22</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 0</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">61</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.iso88591">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 10</prop>
    <prop name="Size">250 350</prop>
    <extended>
     <prop type="ENUM" name="defaultRenameAction">1</prop>
     <prop type="BOOL" name="showSortIndicator">True</prop>
     <prop type="ENUM" name="selectionMode">2</prop>
     <script name="expanded" isEscaped="1"><![CDATA[expanded(string id)
{
  if(this.parent(id)==&quot;&quot;) { // i.e. this is one of the toplevel nodes
    SystemExpanded(id); 
  }
}]]></script>
     <script name="selectionChanged" isEscaped="1"><![CDATA[selectionChanged(string id)
{

 // if this is system node, remove it from selection:
   dyn_string selItems=this.selectedItems;
   dyn_string sysItems=dynPatternMatch(&quot;SYSTEM:*&quot;,selItems);
  
   if (dynlen(sysItems)) {
     this.setSelectedItems(sysItems,FALSE);
   }
   
   
   dyn_string selItems=this.selectedItems;
   dyn_string masked=g_maskedItems;// make a local copy! dynAppend() clears it!!!
   dynAppend(selItems,masked);
   dynUnique(selItems);
   g_selectedItems=selItems;
   
   NumSelected.text=&quot;Selected: &quot;+dynlen(g_selectedItems)+&quot; devices&quot;;
   
   if (isDollarDefined(&quot;$varName&quot;)) {
     dyn_string exceptionInfo;
     fwGeneral_setGlobalValue($varName, g_selectedItems, exceptionInfo);
     if (dynlen(exceptionInfo)){
       fwExceptionHandling_display(exceptionInfo);
       return;
     }
   }

}]]></script>
     <script name="clicked" isEscaped="1"><![CDATA[clicked(string id, int column)
{
 
 string aliastext=&quot;&quot;;
 string dptext=&quot;&quot;; 
 if (id!=&quot;&quot; &amp;&amp; mappingHasKey(g_AliasToDp,id)) {
   aliastext=&quot;Alias: &quot;+id;
   dptext=&quot;Points to: &quot;+g_AliasToDp[id];
}
SelectedAlias.text=aliastext;
SelectedDp.text=dptext;


}]]></script>
    </extended>
   </properties>
  </shape>
  <shape Name="ShowNonFw" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">24</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 460</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">62</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 460</prop>
    <prop name="Size">221 26</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.iso88591">Show non-Framework devices</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, int state)
{
  RepaintTree();
}]]></script>
   </events>
  </shape>
  <shape Name="ShowInternal" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">25</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 485</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">64</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 485</prop>
    <prop name="Size">136 26</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.iso88591">Show internal DPs</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, int state)
{
  RepaintTree();
}]]></script>
   </events>
  </shape>
  <shape Name="ResetSelectionButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">31</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">7.5 513</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">70</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 515</prop>
    <prop name="Size">96 27</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.iso88591">Reset Selection</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  
ResetSelection();
}]]></script>
   </events>
  </shape>
  <shape Name="SelectedAlias" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">33</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">15 565</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">73</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.iso88591">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 365</prop>
    <prop name="Size">250 20</prop>
    <extended>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="ENUM" name="vScrollBarMode">1</prop>
     <prop type="ENUM" name="wrapPolicy">1</prop>
     <prop type="ENUM" name="wordWrap">1</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="ENUM" name="textFormat">0</prop>
     <prop type="BOOL" name="tabChangesFocus">True</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="autoFormatting">0</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="SelectedDp" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">34</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">15 560</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">75</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.iso88591">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 385</prop>
    <prop name="Size">250 20</prop>
    <extended>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="ENUM" name="vScrollBarMode">1</prop>
     <prop type="ENUM" name="wrapPolicy">1</prop>
     <prop type="ENUM" name="wordWrap">1</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="ENUM" name="textFormat">0</prop>
     <prop type="BOOL" name="tabChangesFocus">True</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="autoFormatting">0</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="NumSelected" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">35</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">15 580</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">77</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.iso88591">MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 405</prop>
    <prop name="Size">250 20</prop>
    <extended>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="ENUM" name="vScrollBarMode">1</prop>
     <prop type="ENUM" name="wrapPolicy">1</prop>
     <prop type="ENUM" name="wordWrap">1</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="ENUM" name="textFormat">0</prop>
     <prop type="BOOL" name="tabChangesFocus">True</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="autoFormatting">0</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="FilterText" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">38</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">5 0</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">80</prop>
    <prop name="ToolTipText">
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 430</prop>
    <prop name="Size">35 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
  this.text=&quot;Filter:&quot;;
}]]></script>
   </events>
  </shape>
 </shapes>
</panel>
