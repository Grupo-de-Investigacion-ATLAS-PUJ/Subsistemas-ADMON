<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
	<prop name="en_US.utf8">(NoName)</prop>
  </prop>
  <prop name="Size">630 270</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">499 24</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="DPI">98.05147058823529</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="Close" isEscaped="1"><![CDATA[main()
{
	int i;
}]]></script>
  <script name="Terminate" isEscaped="1"><![CDATA[main()
{
	int i;
}]]></script>
 <script name="ScopeLib" isEscaped="1"><![CDATA[

#uses &quot;panel.ctl&quot;

]]></script></events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="lblBus" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">25</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">14</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Size">177 18</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Create multiple ELMBs in bus:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{

}]]></script>
   </events>
  </shape>
  <shape Name="lblNameConvention" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">10</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">11 77</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">15</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">13 79</prop>
    <prop name="Size">116 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Naming Convention:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblBusName" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">1</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">360 54</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">16</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">362 56</prop>
    <prop name="Size">66 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Bus Name:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblDeviceType" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">21</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">360 80</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">17</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">362 82</prop>
    <prop name="Size">75 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Device Type:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblFixed1" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">2</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">120 112</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">18</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">122 114</prop>
    <prop name="Size">32 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">fixed </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblChanging1" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">5</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">254 110</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">19</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">256 112</prop>
    <prop name="Size">53 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">changing</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblFixed2" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">3</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">408 110</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">20</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">410 112</prop>
    <prop name="Size">32 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">fixed </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblChanging2" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">4</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">532 110</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">21</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">534 112</prop>
    <prop name="Size">53 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">changing</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblTo" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">6</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 230</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">22</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 182</prop>
    <prop name="Size">19 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">To:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblFrom" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">7</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 180</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">23</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 132</prop>
    <prop name="Size">35 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">From:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblExamples" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">8</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">24</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 212</prop>
    <prop name="Size">99 49</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Examples:
ELMB_1
ELMB_1_BUS_3</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <reference parentSerial="-1" Name="Group2" referenceId="0">
   <properties>
    <prop name="FileName">gedi/EP_enter.ref</prop>
    <prop name="Location">160 210</prop>
    <prop name="Geometry">1 0 0 1 70 -80</prop>
    <prop name="TabOrder">25</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="Group4" referenceId="1">
   <properties>
    <prop name="FileName">gedi/EP_enter.ref</prop>
    <prop name="Location">230 140</prop>
    <prop name="Geometry">1 0 0 1 90 -10</prop>
    <prop name="TabOrder">26</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="Group6" referenceId="2">
   <properties>
    <prop name="FileName">gedi/EP_enter.ref</prop>
    <prop name="Location">230 140</prop>
    <prop name="Geometry">1 0 0 1 90 40</prop>
    <prop name="TabOrder">27</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="Group9" referenceId="3">
   <properties>
    <prop name="FileName">gedi/EP_enter.ref</prop>
    <prop name="Location">320 130</prop>
    <prop name="Geometry">1 0 0 1 284 0</prop>
    <prop name="TabOrder">28</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="Group10" referenceId="4">
   <properties>
    <prop name="FileName">gedi/EP_enter.ref</prop>
    <prop name="Location">320 180</prop>
    <prop name="Geometry">1 0 0 1 284 0</prop>
    <prop name="TabOrder">29</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <reference parentSerial="-1" Name="Group12" referenceId="5">
   <properties>
    <prop name="FileName">gedi/EP_enter.ref</prop>
    <prop name="Location">230 130</prop>
    <prop name="Geometry">1 0 0 1 280 0</prop>
    <prop name="TabOrder">30</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <shape Name="createButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">12</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">450 230</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">12</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">450 230</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Next &gt;</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[//Create the bunch of dp's specified: range = 'from' -&gt; 'to'.

main()
{
// Local Variables
// ---------------
	int fromInFirstLoop, fromInSecondLoop, toInFirstLoop, toInSecondLoop;
	
	string firstFixedDpNamePart, secondFixedDpNamePart, dpNameToBeCreated;
	string deviceType;
	
	dyn_string devicesToBeCreatedList;
	
// Executable Code
// ---------------
	//create dynamic field of strings
	devicesToBeCreatedList = makeDynString();
	
	//assign deviceType to the input of the 'shape'
	deviceType = txtDeviceType.text;
	
	//put name of bunch in first slot - HISTORICAL - therefore name of bunch is empty
	dynAppend(devicesToBeCreatedList, &quot;&quot;);
/**************/
		
	//Read in (and convert string to int) all necessary values to be used locally
	fromInFirstLoop = changingDpNameEntry1.text;
	toInFirstLoop = changingDpNameEntry3.text;
	
	fromInSecondLoop = changingDpNameEntry2.text;
	toInSecondLoop = changingDpNameEntry4.text;
	
	//Fixed texts are assigned as follows
	firstFixedDpNamePart = fixedDpNameEntry1.text;
	secondFixedDpNamePart = fixedDpNameEntry2.text;
	
	
	//Make sure that the dynamic values are REALLY dynamic - don't need to check for this...
	//Just check which is larger...


	//execute one or two loops. Check changingDpNameEntry1.text and changingDpNameEntry3.text
	//is not empty (user input error possible eg text!)
	if ((changingDpNameEntry1.text != &quot;&quot;) &amp;&amp; (changingDpNameEntry2.text != &quot;&quot;) &amp;&amp;
			(changingDpNameEntry3.text != &quot;&quot;) &amp;&amp; (changingDpNameEntry4.text != &quot;&quot;)) {
		entry1Entry2Exist(fromInFirstLoop, toInFirstLoop,
											fromInSecondLoop, toInSecondLoop,
											firstFixedDpNamePart, secondFixedDpNamePart,
											devicesToBeCreatedList);
		popUpListPanel(devicesToBeCreatedList, deviceType);
	} else if (	(changingDpNameEntry1.text != &quot;&quot;) &amp;&amp; (changingDpNameEntry2.text == &quot;&quot;) &amp;&amp;
							(changingDpNameEntry3.text != &quot;&quot;) &amp;&amp; (changingDpNameEntry4.text == &quot;&quot;)) {
		entry1Exists( fromInFirstLoop, toInFirstLoop,
									firstFixedDpNamePart, secondFixedDpNamePart,
									devicesToBeCreatedList);			
		popUpListPanel(devicesToBeCreatedList, deviceType);
	} else if (	(changingDpNameEntry1.text == &quot;&quot;) &amp;&amp; (changingDpNameEntry2.text != &quot;&quot;) &amp;&amp;
							(changingDpNameEntry3.text == &quot;&quot;) &amp;&amp; (changingDpNameEntry4.text != &quot;&quot;)) {
		entry2Exists( fromInSecondLoop, toInSecondLoop,
									firstFixedDpNamePart, secondFixedDpNamePart,
									devicesToBeCreatedList);
		popUpListPanel(devicesToBeCreatedList, deviceType);
	} else {
		DebugN(&quot;\n\nExpecting changing fields to have integer values\n\n&quot;);
	}
	
/******************************
	//clean up entries - because they are no longer valid even if visible
	fixedDpNameEntry1.text=&quot;&quot;;
	fixedDpNameEntry2.text=&quot;&quot;;
	fixedDpNameEntry3.text=&quot;&quot;;
	fixedDpNameEntry4.text=&quot;&quot;;
	changingDpNameEntry1.text==&quot;&quot;;
	changingDpNameEntry2.text==&quot;&quot;;
	changingDpNameEntry3.text==&quot;&quot;;
	changingDpNameEntry4.text==&quot;&quot;;
**********************************/

	// Return to calling routine
	return;
}

//functions-----------------------------------------------------------------------------------
entry1Entry2Exist( int fromInFirstLoop, int toInFirstLoop,
					  int fromInSecondLoop, int toInSecondLoop,
						string firstFixedDpNamePart, string secondFixedDpNamePart,
							dyn_string &amp;devicesToBeCreatedList)
{
	int i, j;
	string dpNameToBeCreated;
	
	//Check which value is larger, the 'from' or the 'to' field
	if(toInFirstLoop &gt; fromInFirstLoop)
	{
		//ascending order
		for(i = fromInFirstLoop; i &lt;= toInFirstLoop; i++)
		{
			//Second loop:
			//Check which value is larger, the 'from' or the 'to' field
			if(toInSecondLoop &gt; fromInSecondLoop)
			{
				for(j = fromInSecondLoop; j &lt;= toInSecondLoop; j++)
				{
					dpNameToBeCreated = firstFixedDpNamePart + i + secondFixedDpNamePart + j;			
					dynAppend(devicesToBeCreatedList, dpNameToBeCreated);
					
				}
			}
			else 
			{
				//decending order or else equal values
				for(j = fromInSecondLoop; j &gt;= toInSecondLoop; j--)
				{
					dpNameToBeCreated = firstFixedDpNamePart + i + secondFixedDpNamePart + j;
					dynAppend(devicesToBeCreatedList, dpNameToBeCreated);
				}
			}			
		}
	}
	else
	{
		//decending order or else equal values
		for(i = fromInFirstLoop; i &gt;= toInFirstLoop; i--)
		{
			//Second loop:
			//Check which value is larger, the 'from' or the 'to' field
			if(toInSecondLoop &gt; fromInSecondLoop)
			{
				//ascending order
				for(j = fromInSecondLoop; j &lt;= toInSecondLoop; j++)
				{
					dpNameToBeCreated = firstFixedDpNamePart + i + secondFixedDpNamePart + j;
					dynAppend(devicesToBeCreatedList, dpNameToBeCreated);
				}
			}
			else
			{
				//decending order or else equal values
				for(j = fromInSecondLoop; j &gt;= toInSecondLoop; j--)
				{
					dpNameToBeCreated = firstFixedDpNamePart + i + secondFixedDpNamePart + j;
					dynAppend(devicesToBeCreatedList, dpNameToBeCreated);
				}
			}
			
		}
	}

}

//firstFixedDpNamePart or secondFixedDpNamePart may be empty
entry1Exists( int fromInFirstLoop, int toInFirstLoop,
					string firstFixedDpNamePart, string secondFixedDpNamePart,
						dyn_string &amp;devicesToBeCreatedList)
{
	int i;
	string dpNameToBeCreated;
	
	//Check which value is larger, the 'from' or the 'to' field
	if(toInFirstLoop &gt; fromInFirstLoop)
	{
		//ascending order
		for(i = fromInFirstLoop; i &lt;= toInFirstLoop; i++)
		{
			dpNameToBeCreated = firstFixedDpNamePart + i + secondFixedDpNamePart;
			dynAppend(devicesToBeCreatedList, dpNameToBeCreated);				
		}
	}
	else
	{
		//decending order or else equal values
		for(i = fromInFirstLoop; i &gt;= toInFirstLoop; i--)
		{
			dpNameToBeCreated = firstFixedDpNamePart + i + secondFixedDpNamePart;
			dynAppend(devicesToBeCreatedList, dpNameToBeCreated);
		}
	}
}


entry2Exists( int fromInSecondLoop, int toInSecondLoop,
				string firstFixedDpNamePart, string secondFixedDpNamePart,
					dyn_string &amp;devicesToBeCreatedList)
{
	int i;
	string dpNameToBeCreated;

	//Check which value is larger, the 'from' or the 'to' field
	if(toInSecondLoop &gt; fromInSecondLoop)
	{
		//ascending order
		for(i = fromInSecondLoop; i &lt;= toInSecondLoop; i++)
		{
			dpNameToBeCreated = secondFixedDpNamePart + i;						
			dynAppend(devicesToBeCreatedList, dpNameToBeCreated);
					
		}
	}
	else
	{
		//decending order or else equal values
		for(i = fromInSecondLoop; i &gt;= toInSecondLoop; i--)
		{
			dpNameToBeCreated = secondFixedDpNamePart + i;
			dynAppend(devicesToBeCreatedList, dpNameToBeCreated);			
		}
	}
}

popUpListPanel(dyn_string devicesToBeCreatedList, string deviceTypeText )
{
	//pop up list of devices in another window. Will be sent as long string delimited by |
	ModuleOn(&quot;selectElmbLabelsModule&quot;, 0, 0,600, 800, 0, 0, &quot;&quot;);
	RootPanelOnModule(&quot;fwElmb/objects/fwElmbMassConfigurationListCreateDeviceBunch.pnl&quot;,
						&quot;fwElmbMassConfigurationListCreateDeviceBunch&quot;, &quot;selectElmbLabelsModule&quot;,
				 		   makeDynString(&quot;$sDpName:&quot; + $sDpName, &quot;$passedPackedString:&quot; + devicesToBeCreatedList, 
				 		 					&quot;$passedDeviceType:&quot; + deviceTypeText));

	ModuleOff(myModuleName());
}




]]></script>
   </events>
  </shape>
  <shape Name="cancelButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">20</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">540 230</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">540 230</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Cancel</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{	
	//cancel button has been pressed
	PanelOff();
}]]></script>
   </events>
  </shape>
  <shape Name="changingDpNameEntry4" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">17</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">531 180</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">531 180</prop>
    <prop name="Size">71 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Command" isEscaped="1"><![CDATA[main()
{

	string changingString4;
	int dValue;
	
	
	//changingDpNameEntry4.text = this.text;
	//DebugN(&quot;changingDpNameEntry4 =&quot;, changingDpNameEntry4.text);
	//No need to explicitly set this graphic object's value.

	
	changingString4 = this.text;
	
	//convert changingString4 to integer 
	if( sscanf( changingString4, &quot;%d&quot;, dValue)== 0 ||
		sscanf( changingString4, &quot;%d&quot;, dValue)== -1)
	{
		DebugN(&quot;Invalid Value - Expecting integer&quot;, changingString4); 
		createButton.enabled = 0;
		return;
	}
	else
	{
		createButton.enabled = 1;
	}
	
}
]]></script>
   </events>
  </shape>
  <shape Name="fixedDpNameEntry4" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">19</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">340 180</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">10</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">340 180</prop>
    <prop name="Size">172 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="changingDpNameEntry3" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">18</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">250 180</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">9</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">250 180</prop>
    <prop name="Size">71 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[4s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Command" isEscaped="1"><![CDATA[main()
{

	string changingString3;
	int dValue;
	
	
	//changingDpNameEntry3.text = this.text;
	//DebugN(&quot;changingDpNameEntry3 =&quot;, changingDpNameEntry3.text);
	//No need to explicitly set this graphic object's value.

	
	changingString3 = this.text;
	
	//convert changingString3 to integer 
	if( sscanf( changingString3, &quot;%d&quot;, dValue)== 0 ||
		sscanf( changingString3, &quot;%d&quot;, dValue)== -1)
	{
		DebugN(&quot;Invalid Value - Expecting integer&quot;, changingString3); 
		createButton.enabled = 0;
		return;
	}
	else
	{
		createButton.enabled = 1;
	}
	
}

]]></script>
   </events>
  </shape>
  <shape Name="fixedDpNameEntry3" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">16</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">60 180</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">8</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">60 180</prop>
    <prop name="Size">171 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="changingDpNameEntry2" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">13</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">530 130</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">530 130</prop>
    <prop name="Size">71 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Command" isEscaped="1"><![CDATA[main()
{
	string changingString2, changingString4;
	int dValue;
	
	changingString2 = this.text;
	//DebugN(&quot;changingString2 =&quot;, changingString2);
	
	//convert changingString2 to integer 
	if( sscanf( changingString2, &quot;%d&quot;, dValue)== 0 ||
		sscanf( changingString2, &quot;%d&quot;, dValue)== -1)
	{
		DebugN(&quot;Invalid Value &quot;, changingString2); 
		createButton.enabled = 0;
		return;
	}
	else
	{
		createButton.enabled = 1;
	}
	
	dValue = dValue + 1;
	//DebugN( &quot;dValue= &quot;, dValue);
	
	//copy the integer value to the end of sequence changing string field
	changingString4 = dValue;
	
	//CAN'T scan integer to put into a string! sscanf( dValue, &quot;%s&quot;, changingString2); 
	//DebugN( &quot;changingString4= &quot;, changingString4);
 	changingDpNameEntry4.text = changingString4;
}]]></script>
   </events>
  </shape>
  <shape Name="fixedDpNameEntry2" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">15</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">340 130</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">340 130</prop>
    <prop name="Size">171 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Command" isEscaped="1"><![CDATA[//user has typed in the fixed string, copy this to fixed string at end of sequence
main()
{
	string fixedString2;
	
	fixedString2 = this.text;
	//DebugN(&quot;fixedString2=&quot;, fixedString2);

	//copy this fixed string to the end of sequence fixed string
	fixedDpNameEntry4.text = this.text;

}]]></script>
   </events>
  </shape>
  <shape Name="changingDpNameEntry1" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">14</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">250 130</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">250 130</prop>
    <prop name="Size">71 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Command" isEscaped="1"><![CDATA[

main()
{
	string changingString1, changingString3;
	int dValue;
	
	changingString1 = this.text;
	//DebugN(changingString1);
	
	//convert changingString1 to integer 
	if( sscanf( changingString1, &quot;%d&quot;, dValue)== 0 ||
		sscanf( changingString1, &quot;%d&quot;, dValue)== -1)
	{
		DebugN(&quot;Invalid Value &quot;, changingString1); 
		createButton.enabled = 0;
		return;
	}
	else
	{
		createButton.enabled = 1;
	}
	
	dValue = dValue + 1;
	//DebugN( &quot;dValue= &quot;, dValue);
	
	//copy the integer value to the end of sequence changing string field
	changingString3 = dValue;
	
	//sscanf( dValue, &quot;%s&quot;, changingString3); 
	//DebugN( &quot;changingString3= &quot;, changingString3);
 	changingDpNameEntry3.text = changingString3;
}

]]></script>
   </events>
  </shape>
  <shape Name="fixedDpNameEntry1" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">11</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">60 130</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">4</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">60 130</prop>
    <prop name="Size">171 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Command" isEscaped="1"><![CDATA[//user has typed in the fixed string, copy this to fixed string at end of sequence
main()
{
	string fixedString1;
	
	fixedString1 = this.text;
	//DebugN( fixedString1);

	//copy this fixed string to the end of sequence fixed string
	fixedDpNameEntry3.text = this.text;

}]]></script>
   </events>
  </shape>
  <shape Name="txtDeviceType" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">22</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">439 76</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">439 76</prop>
    <prop name="Size">121 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
// this.text = $sDeviceType;
	this.text = &quot;dummy&quot;;
}]]></script>
   </events>
  </shape>
  <shape Name="txtBusName" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">0</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">439 50</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">439 50</prop>
    <prop name="Size">121 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
this.text = $sDpName;
}]]></script>
   </events>
  </shape>
  <shape Name="txtParentName" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">27</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">190 10</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">190 10</prop>
    <prop name="Size">269 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
this.text = $sDpName;
}]]></script>
   </events>
  </shape>
 </shapes>
</panel>