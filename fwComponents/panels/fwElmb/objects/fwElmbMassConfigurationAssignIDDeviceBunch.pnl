<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
	<prop name="en_US.utf8">(NoName)</prop>
  </prop>
  <prop name="Size">530 530</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">0 0</prop>
  <prop name="InitAndTermRef">False</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="DPI">98.05147058823529</prop>
  <prop name="layoutType">None</prop>
 </properties>
<events>
	<script name="ScopeLib" isEscaped="1"><![CDATA[

#uses &quot;fwElmb/fwElmbUser.ctl&quot;
#uses &quot;fwGeneral/fwGeneral.ctl&quot;
#uses &quot;fwGeneral/fwProgressBar.ctl&quot;
#uses &quot;panel.ctl&quot;
#uses &quot;fwElmb/fwElmb.ctl&quot;
#uses &quot;fwGeneral/fwExceptionHandling.ctl&quot;
		#uses &quot;fwGeneral/fwGeneral.ctl&quot;
		#uses &quot;fwGeneral/fwExceptionHandling.ctl&quot;
		#uses &quot;fwElmb/fwElmb.ctl&quot;
		#uses &quot;fwElmb/fwElmbUser.ctl&quot;
		#uses &quot;fwGeneral/fwProgressBar.ctl&quot;
	]]></script>
</events>

 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="Text3" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">3</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 81</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">4</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Size">261 23</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Assign IDs to the ELMB nodes</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="txtResultCreationCaption" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">54</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 545</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">52</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">2 502</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblAvailableNodeIds" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">60</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">450 190</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">57</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">452 192</prop>
    <prop name="Size">67 37</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Available
node IDs:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignHCenter]</prop>
   </properties>
  </shape>
  <shape Name="lblParentLabel" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">68</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 53</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">64</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 55</prop>
    <prop name="Size">179 15</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Create multiple ELMBs in bus:   </prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblComment" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">74</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 80</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">70</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 82</prop>
    <prop name="Size">107 19</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Default comment:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblElmbNamesAndIds" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">137</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">132</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 212</prop>
    <prop name="Size">137 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">ELMB Names and IDs</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="lblInstructions" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">140</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 140</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">134</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 142</prop>
    <prop name="Size">397 67</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">To alter a node ID:
1) Select the required ELMB node from the table 'ELMB Names and IDs'
2) Select the required node ID from the list of 'Available node IDs'
3) Click the button labelled '&lt;'</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="closeButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">4</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">430 490</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">430 490</prop>
    <prop name="Size">91 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Close</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{	
	PanelOff();
}]]></script>
   </events>
  </shape>
  <shape Name="lstAvailableIds" shapeType="SELECTION_LIST" layerId="0">
   <properties>
    <prop name="serialId">59</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">450 230</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">56</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">450 230</prop>
    <prop name="Size">71 251</prop>
    <prop name="Listitems"></prop>
    <prop name="SelectionMode">SingleSelection</prop>
    <prop name="alternatingRowColors">False</prop>
   </properties>
  </shape>
  <shape Name="tblDeviceInfo" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">64</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 230</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">60</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 230</prop>
    <prop name="Size">401 250</prop>
    <prop name="ShowColumnHeader">False</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">26</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">label</prop>
     <prop name="Width">330</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Label</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">To change the node ID, double click on the table</prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">id</prop>
     <prop name="Width">50</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">ID</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">To change the node ID, double click on the table</prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
	<prop name="en_US.utf8">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	bool bStandardElmb = $bStandardElmb;
	
	int i;
	int iDevices;
	int iLenBefore;
	int iLenAfter;
	int iTemp;
	int iRemove;
	
	string sTemp;
	
	dyn_bool dbCreate;
	
	dyn_int diAvailableNodeIdList;
	dyn_int diNodeIDsToAdd;

	dyn_string dsAvailableNodeIdList;
	dyn_string dsDeviceList;
	dyn_string dsDevicesToAdd;
	dyn_string dsDevicesToSort;

// Executable Code
// ---------------
	// Get list of nodes that are to be created
	fwGeneral_stringToDynString($sDeviceList, dsDeviceList);

	// Set table mode
	tblDeviceInfo.selectByClick(TABLE_SELECT_LINE);
	tblDeviceInfo.tableMode(TABLE_SELECT_BROWSE);

	// Get all available node IDs
	fwElmb_getAvailableNodeIdList($sDpName, dsAvailableNodeIdList, bStandardElmb);
	for (i = 1; i &lt;= dynlen(dsAvailableNodeIdList); i++)
		dynAppend(diAvailableNodeIdList, dsAvailableNodeIdList[i]);

	// For each node to be created, if it ends with a number, then use this
	// as the node ID (if possible)
	for (i = 1; i &lt;= dynlen(dsDeviceList); i++) {
	
		// Some first investigation to find out whether the name ends with numbers
		sTemp = dsDeviceList[i];
		iLenBefore = strlen(sTemp);
		sTemp = strrtrim(sTemp, &quot;0123456789&quot;);
		iLenAfter = strlen(sTemp);
		
		// Check if the device name ends with numbers
		if (iLenBefore &gt; iLenAfter) {
			sTemp = substr(dsDeviceList[i], iLenAfter, iLenBefore - iLenAfter);
			iTemp = sTemp;
			iRemove = dynContains(diAvailableNodeIdList, iTemp);
			if (iRemove &gt; 0) {
				// If the node ID is available, add the device name to the list
				// and make this node ID unavailable
				dynAppend(dsDevicesToAdd, dsDeviceList[i]);
				dynAppend(diNodeIDsToAdd, iTemp);
				dynRemove(diAvailableNodeIdList, iRemove);
			} else {
				// If node ID is taken, put this device 'to the side'
				dynAppend(dsDevicesToSort, dsDeviceList[i]);
			}
		} else {
			// Name does not end with numbers, put this device 'to the side'
			dynAppend(dsDevicesToSort, dsDeviceList[i]);
		}
	}

	// Now add the devices whose node ID was taken
	dynSortAsc(dsDevicesToSort);
	for (i = 1; i &lt;= dynlen(dsDevicesToSort); i++) {
		dynAppend(dsDevicesToAdd, dsDevicesToSort[i]);
		dynAppend(diNodeIDsToAdd, diAvailableNodeIdList[1]);
		dynRemove(diAvailableNodeIdList, 1);
	}

	// Add the devices to the list	
	for (i = 1; i &lt;= dynlen(dsDevicesToAdd); i++) {
		tblDeviceInfo.appendLine(&quot;label&quot;, dsDevicesToAdd[i], &quot;id&quot;, diNodeIDsToAdd[i]);
	}

	// Sort the list by name	
	tblDeviceInfo.sort(&quot;label&quot;);
	
	// Select the first row
	if (tblDeviceInfo.lineCount &gt; 0)
		tblDeviceInfo.selectLineN(0);
	else
		cmdAssign.enabled = false;

	// Enter the remaining available node IDs to the list
	dynClear(dsAvailableNodeIdList);
	for (i = 1; i &lt;= dynlen(diAvailableNodeIdList); i++)
		dynAppend(dsAvailableNodeIdList, diAvailableNodeIdList[i]);
 	lstAvailableIds.items = dsAvailableNodeIdList;
 	
 	// Return to calling routine
 	return;
}]]></script>
   </events>
  </shape>
  <shape Name="txtParentLabel" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">70</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">190 50</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">66</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">190 50</prop>
    <prop name="Size">221 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.text = $sDpName;
}]]></script>
   </events>
  </shape>
  <shape Name="txtDpTypeSelector" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">71</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">290 10</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">67</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">290 10</prop>
    <prop name="Size">121 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.text = ELMB_TYPE_NAME;
}]]></script>
   </events>
  </shape>
  <shape Name="txtComment" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">73</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">190 80</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">69</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">190 80</prop>
    <prop name="Size">221 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="chbCreateChannels" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">77</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">190 110</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">73</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">190 110</prop>
    <prop name="Size">211 27</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
	<prop name="en_US.utf8">Create ELMB channels as well?</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, bool state)
{
// Local Variables
// ---------------
	dyn_float df;
	dyn_string ds;
	
// Executable Code
// ---------------
	// Check whether the check-box is ticked or not
	if (!state) {
		// Give a warning to the user
		ChildPanelOnCentralReturn(&quot;vision/MessageInfo&quot;,
															&quot;Question&quot;,
															makeDynString(&quot;Unselecting this option you'll have to create\nthe channels by hand.\nAre you sure you want to do it?&quot;, &quot;Yes&quot;, &quot;No&quot;),
															df, ds);
																
		// Check whether the user has changed their mind
		if (df[1] != 1)
			this.state(button) = true;
	}
	
	return;
}]]></script>
   </events>
  </shape>
  <shape Name="cmdCreateNodes" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">136</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">330 490</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">131</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">330 490</prop>
    <prop name="Size">91 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Create Nodes</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	bool bIsRunning;
	bool bDefaultAddressing;
	
	int i;
	int iDriverNumber;
	int iDevices;
	
	float fAll;
	float fCompleted;
	float fPercentage;
	
	string sElmbComment;
	string sDpLabel;
	string sNodeID;
	string sElmbLabels = &quot;&quot;;
	string sMessage;
	
	dyn_float df;
	
	dyn_string ds;
	dyn_string dsExceptionInfo;
	dyn_string dsElmbNames;
	dyn_string dsNodeIDs;

// Executable Code
// ---------------
	// Disable the button
	this.enabled = false;
	
	// Check correct driver is running
	bIsRunning = fwElmbUser_checkDefaultDriver(iDriverNumber, dsExceptionInfo);
	if (dynlen(dsExceptionInfo) &gt; 0) {
		fwExceptionHandling_display(dsExceptionInfo);
		this.enabled = true;
		return;
	} else if (!bIsRunning) {
		// Display panel indicating what the problem is and how to fix it
		ChildPanelOnCentralReturn(&quot;fwElmb/fwElmbDriverMessage.pnl&quot;, 
															&quot;Warning&quot;,
															makeDynString(&quot;$drvNum:&quot; + iDriverNumber),
															df, ds);
		this.enabled = true;
		return;
	}
	
	// Start progress bar to indicate system is busy
	fwOpenProgressBar(&quot;Create ELMB Nodes&quot;, &quot;In progress. Please wait...&quot;, 2);
	
	// Get the number of devices
	iDevices = tblDeviceInfo.lineCount;
	fAll = iDevices;
	fCompleted = 0.0;
	fPercentage = 0.0;
	bDefaultAddressing = chbOPCAddressing.state(0);
	sElmbComment = txtComment.text;
	
	// Get all information for each device
	for (i = 0; i &lt; iDevices; i++) {
		
		// Get the device label from the table as well as the Node ID entered
		getMultiValue(&quot;tblDeviceInfo&quot;, &quot;cellValueRC&quot;, i, &quot;label&quot;, sDpLabel,
									&quot;tblDeviceInfo&quot;, &quot;cellValueRC&quot;, i, &quot;id&quot;, sNodeID);
									
		if (strlen(sElmbLabels) == 0)
			sElmbLabels = sDpLabel;	
		else
			sElmbLabels += &quot;|&quot; + sDpLabel;	
		
		fPercentage = fCompleted * 100.0 / fAll;
		sMessage = &quot;Creating &quot; + sDpLabel;
		fwShowProgressBar(sMessage, fPercentage);
	
		// Create ELMB
		fwElmbUser_createElmb(sDpLabel,
													sElmbComment,
													$sDpName,
													sNodeID,
													bDefaultAddressing,
													dsExceptionInfo);
		
		fCompleted += 1.0;
		
	}//end on loop on devices.
	
	// Display any errors
	if (dynlen(dsExceptionInfo) &gt; 0) {
		fwCloseProgressBar(&quot;ELMB Node creation encountered errors&quot;);
		fwExceptionHandling_display(dsExceptionInfo);
	} else {
		fwCloseProgressBar(&quot;ELMB Node creation completed successfully&quot;);
	}	
	
	// Re-enable the button
	this.enabled = true;

	// Display channel create panel if required
	if (chbCreateChannels.state(0)) {
		ModuleOn(&quot;NodeConfigurationModule&quot;, 0,0,600,800, 0,0,&quot;&quot;);
		/* JRC Should try to use this panel instead in the future (less panels to maintain!)
		RootPanelOnModule(&quot;fwElmb/fwElmbChannelManage.pnl&quot;,
											&quot;Create Signals&quot;,
											&quot;NodeConfigurationModule&quot;,
											makeDynString(&quot;$sElmbLabels:&quot; + sElmbLabels,
																		&quot;$sDpName:&quot; + $sDpName));
		*/
		RootPanelOnModule(&quot;fwElmb/fwElmbNodeConfiguration.pnl&quot;,
											&quot;Create Signals&quot;,
											&quot;NodeConfigurationModule&quot;,
											makeDynString(&quot;$sElmbLabels:&quot; + sElmbLabels,
																		&quot;$sDpName:&quot; + $sDpName));
	}
	
	// Close the module
	ModuleOff(myModuleName());

	// Return to calling routine
	return;
}//end of main]]></script>
   </events>
  </shape>
  <shape Name="cmdAssign" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">139</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">420 350</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">133</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">420 350</prop>
    <prop name="Size">21 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">&lt;</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	int iNodeIdPos;
	int iNodePos;
	int iNodeId;
	int iOldId;
	
	dyn_int diLines;
	dyn_int diNodeIds;

// Executable Code
// ---------------
	// Get current list of available node IDs
	diNodeIds = lstAvailableIds.items;
	
	// Get selections
	iNodeIdPos = lstAvailableIds.selectedPos;
	diLines = tblDeviceInfo.getSelectedLines();
	
	// Check that both a node and a node ID have been selected
	if ((dynlen(diLines) &gt; 0) &amp;&amp; (iNodeIdPos &gt; 0)) {
		// Get old ID to be changed
		iNodePos = diLines[1];
		getValue(&quot;tblDeviceInfo&quot;, &quot;cellValueRC&quot;, iNodePos, &quot;id&quot;, iOldId);
		
		// Get new ID to be assigned to node
		iNodeId = diNodeIds[iNodeIdPos];
		
		// Remove ID to be assigned from 'available' list
		dynRemove(diNodeIds, iNodeIdPos);
		
		// Add the old ID to the now available list
		dynAppend(diNodeIds, iOldId);
		
		// Sort data and display
		dynSortAsc(diNodeIds);
		lstAvailableIds.items = diNodeIds;
		
		// Change ID of node
		tblDeviceInfo.cellValueRC(iNodePos, &quot;id&quot;, iNodeId);
	} else {
		ChildPanelOnCentral(&quot;vision/MessageInfo1&quot;,
												&quot;Information&quot;,
												makeDynString(&quot;Please select a Node and a Node ID&quot;));
	}

	// Return to calling routine
	return;
}]]></script>
   </events>
  </shape>
  <shape Name="chbOPCAddressing" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">141</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 500</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">135</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 500</prop>
    <prop name="Size">169 21</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
	<prop name="en_US.utf8">Default OPC addressing?</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, bool state)
{
// Local Variables
// ---------------
	dyn_float df;
	dyn_string ds;
	
// Executable Code
// ---------------
	// Check state of button
	if (!state) {
		// Give warning to user if de-selecting this optyion
		ChildPanelOnCentralReturn(&quot;vision/MessageInfo&quot;,
															&quot;Question&quot;,
															makeDynString(&quot;Unselecting this option you'll have to address\nyour devices by hand.\nAre you sure you want to do it?&quot;, &quot;Yes&quot;, &quot;No&quot;),
															df, ds);
		if (df[1] != 1.0)
			this.state(button) = true;
	}
	
	// Return to calling routine
	return;
}]]></script>
   </events>
  </shape>
 </shapes>
</panel>
