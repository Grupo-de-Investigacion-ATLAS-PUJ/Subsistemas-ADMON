<?xml version='1.0' encoding='UTF-8'?>
<panel version="14">
 <properties>
  <prop name="Name">
	<prop name="en_US.utf8">(NoName)</prop>
  </prop>
  <prop name="Size">671 546</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">0 0</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"/>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">98.05147058823529</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[#uses &quot;fwElmb/fwElmb.ctl&quot;

void pnlSendBusCommand(int iAction)
{
// Local Variables
// ---------------
  string sBusName;
  string sBusDpName;
  string sDpe = &quot;.management&quot;;

  dyn_int diRows;

// Executable Code
// ---------------
  // Before doing anything, check that the action value is valid. If any other commands need
  // to be allowed, you must add them to this 'list'
  if ((iAction != 1) &amp;&amp; (iAction != 2) &amp;&amp; (iAction != 129)) {
    ChildPanelOnCentral(&quot;vision/MessageInfo1&quot;,
                        &quot;Warning&quot;,
                        makeDynString(&quot;Bus command value is invalid. Please contact component developer.&quot;));
    return;
  }

  // Get the selected bus name
  diRows = tabCANSystem.getSelectedLines();
  if (dynlen(diRows) &gt; 0) {
    sBusName = tabCANSystem.cellValueRC(diRows[1], &quot;busName&quot;);
    sBusDpName = tabCANSystem.cellValueRC(diRows[1], &quot;busDpName&quot;);

    // Set value into DP, first find the dp name for the bus (from bus name)
    dpSet(sBusDpName + sDpe, iAction);

    // Check the correct DP has been found
    if (dpExists(sBusDpName)) {
      switch (iAction) {
        case 129:  // Reset
          txtBusStatus.text = &quot;All Elmbs in bus &quot; + sBusName + &quot; have been reset&quot;;
          break;
        case 1:	// Start/Operational
          txtBusStatus.text = &quot;All Elmbs in bus &quot; + sBusName + &quot; have been started&quot;;
          break;
        case 2:	// Stop
          txtBusStatus.text = &quot;All Elmbs in bus &quot; + sBusName + &quot; have been stopped&quot;;
          break;
      }
    } else {
      ChildPanelOnCentral(&quot;vision/MessageInfo1&quot;,
                          &quot;Warning&quot;,
                          makeDynString(&quot;Bus &quot; + sBusName + &quot; not found in this system.&quot;));
    }
    txtBusStatus.visible = true;
  } else {
    ChildPanelOnCentral(&quot;vision/MessageInfo1&quot;, &quot;Warning&quot;, makeDynString(&quot;No bus selected&quot;));
  }

  // Return to calling routine
  return;
}
void pnlSendBusCommandToAll(int iAction)
{
// Local Variables
// ---------------
  int i;

  string sBusDpName;
  string sDpe = &quot;.management&quot;;

  dyn_string dsBuses;

// Executable Code
// ---------------
  // Before doing anything, check that the action value is valid. If any other commands need
  // to be allowed, you must add them to this 'list'
  if ((iAction != 1) &amp;&amp; (iAction != 2) &amp;&amp; (iAction != 129)) {
    ChildPanelOnCentral(&quot;vision/MessageInfo1&quot;,
                        &quot;Warning&quot;,
                        makeDynString(&quot;Bus command value is invalid. Please contact component developer.&quot;));
    return;
  }

  // Get all buses in this system
  dsBuses = dpNames(getSystemName() + &quot;*&quot;, ELMB_CAN_BUS_TYPE_NAME);
  if (dynlen(dsBuses) &gt; 0) {
    for (i = 1; i &lt;= dynlen(dsBuses); i++) {
      sBusDpName = dsBuses[i];
      dpSet(sBusDpName + sDpe, iAction);
    }

    switch (iAction) {
      case 129:  // Reset
        txtBusStatus.text = &quot;All buses have been reset&quot;;
        break;
      case 1:	// Start/Operational
        txtBusStatus.text = &quot;All buses have been started&quot;;
        break;
      case 2:	// Stop
        txtBusStatus.text = &quot;All buses have been stopped&quot;;
        break;
    }
    txtBusStatus.visible = true;
  } else {
    ChildPanelOnCentral(&quot;vision/MessageInfo1&quot;, &quot;Warning&quot;, makeDynString(&quot;No buses in system&quot;));
  }

  // Return to calling routine
  return;
}
]]></script>
  <script name="Close" isEscaped="1"><![CDATA[main()
{
	int i;
}]]></script>
  <script name="Terminate" isEscaped="1"><![CDATA[main()
{
	int i;
}]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="txtTitle" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">0</prop>
    <prop name="Type"/>
    <prop name="RefPoint">60 40</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">schwarz</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"/>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 22</prop>
    <prop name="Size">367 25</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8">Elmb CANbus System Operation Panel</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="frmSendMessage" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">1</prop>
    <prop name="Type"/>
    <prop name="RefPoint">10 470</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8">Select a CANbus on the table to send a management message</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1 0 0 1 360 0</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Send message to selected CANbus</prop>
    </prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 410</prop>
    <prop name="Size">291 60</prop>
   </properties>
  </shape>
  <shape Name="txtBusStatus" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">6</prop>
    <prop name="Type"/>
    <prop name="RefPoint">370 480</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"/>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">0.822857142857143 0 0 0.9 116.56 49.8</prop>
    <prop name="Location">310 480</prop>
    <prop name="Size">347 17</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
	<prop name="en_US.utf8"/>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="frmShowColumns" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">9</prop>
    <prop name="Type"/>
    <prop name="RefPoint">490 77</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">8</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"/>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Show Columns</prop>
    </prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">490 10</prop>
    <prop name="Size">140 70</prop>
   </properties>
  </shape>
  <shape Name="tabCANSystem" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">2</prop>
    <prop name="Type"/>
    <prop name="RefPoint">-10 36</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"/>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 90</prop>
    <prop name="Size">655 311</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">26</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">busName</prop>
     <prop name="Width">185</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Bus Name</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8"/>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">comment</prop>
     <prop name="Width">185</prop>
     <prop name="Visible">False</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Comment</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">Any comment is displayed here</prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">noOfElmbs</prop>
     <prop name="Width">79</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Elmb Count</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">Number of ELMBs in this bus</prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">interface</prop>
     <prop name="Width">66</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Interface</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">Type of interface used for this bus</prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">port</prop>
     <prop name="Width">39</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Port</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">Port of the interface card used for this bus</prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">busSpeed</prop>
     <prop name="Width">53</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Speed</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">Bus speed (Click to modify)</prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">syncInterval</prop>
     <prop name="Width">71</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Sync. Int.</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">SYNC interval or readout rate (Click to modify)</prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">nodeGuardInterval</prop>
     <prop name="Width">71</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Guard Int</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">Node Guard Interval (Click to modify)</prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">portError</prop>
     <prop name="Width">73</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">Port Error</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8">Error code of the interface port (0 means no error)</prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">busDpName</prop>
     <prop name="Width">73</prop>
     <prop name="Visible">False</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
	<prop name="en_US.utf8">BusDpName</prop>
     </prop>
     <prop name="ToolTipText">
	<prop name="en_US.utf8"/>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"/>
     <prop name="Label">
	<prop name="en_US.utf8">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int argiRow, string argsColumn, string argsValue)
{
// Local Variables
// ---------------
	bool bValid = false;
	
	int iValue;
	int i;
	
	string sBusName;
	string sAction;
	string sActionDPE;
	string sOriginalValue;
	string sBusDpName;
	
	dyn_float dfReturn;
	
	dyn_string dsReturn;

// Executable Code
// ---------------
	// Get bus name and bus DP name
	getMultiValue(&quot;&quot;, &quot;cellValueRC&quot;, argiRow, &quot;busName&quot;, sBusName,
								&quot;&quot;, &quot;cellValueRC&quot;, argiRow, &quot;busDpName&quot;, sBusDpName);
							
	// Check the DP exists
	if (dpExists(sBusDpName)) {
		// Check which column has been selected
		switch (argsColumn) {
			case &quot;syncInterval&quot;:
				sAction = &quot;Set Sync. Interval&quot;;
				sActionDPE = &quot;.syncInterval&quot;;
				bValid = true;
				getValue(&quot;&quot;, &quot;cellValueRC&quot;, argiRow, &quot;syncInterval&quot;, sOriginalValue);
				break;
			case &quot;nodeGuardInterval&quot;:
				sAction = &quot;Set Node Guard Interval&quot;;
				sActionDPE = &quot;.nodeGuardInterval&quot;;
				bValid = true;
				getValue(&quot;&quot;, &quot;cellValueRC&quot;, argiRow, &quot;nodeGuardInterval&quot;, sOriginalValue);
				break;
			case &quot;busSpeed&quot;:
				sAction = &quot;Set bus speed&quot;;
				sActionDPE = &quot;.busSpeed&quot;;
				bValid = true;
				getValue(&quot;&quot;, &quot;cellValueRC&quot;, argiRow, &quot;busSpeed&quot;, sOriginalValue);
				break;
			default: 
				break;	
		}
	
		if (bValid) {
			ChildPanelOnCentralReturn(&quot;vision/MessageInput&quot;,
																sAction,
																makeDynString(&quot;Press OK for bus &quot; + sBusName, &quot;%10d&quot;, sOriginalValue),
																dfReturn,
																dsReturn);
															
			// Get value returned
			iValue = dfReturn[1];
		
			// Set value into DP
			dpSet(sBusDpName + sActionDPE, iValue);	
		}
	}

	// Return to calling routine
	return;
}

]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	int i;
	
	string sBusDpName;
	
	dyn_string dsChildren;
	
// Executable Code
// ---------------
	// Connect to the children of the view
	this.tableMode = TABLE_SELECT_BROWSE;
	this.selectByClick = 1;

	// Clear table before appending lines
	this.deleteAllLines();

	// Check if any children exist
	dsChildren = dpNames(&quot;*&quot;, ELMB_CAN_BUS_TYPE_NAME);
	if (dynlen(dsChildren) &lt;= 0)
		return;

	// Loop through all children
	for (i = 1; i &lt;= dynlen(dsChildren); i++) {
	
		// Get DpName
		sBusDpName = dsChildren[i];
				
		// Connect to required DPs for this bus, according to dp type ** sBusDpName + &quot;.management&quot;,
		dpConnect(&quot;cbkUpdateLine&quot;,
		 			 		sBusDpName + &quot;.syncInterval&quot;,
							sBusDpName + &quot;.nodeGuardInterval&quot;,
							sBusDpName + &quot;.busSpeed&quot;,
							sBusDpName + &quot;.interfacePort&quot;,
							sBusDpName + &quot;.id&quot;,
							sBusDpName + &quot;.portError&quot;);
	}
	
	// Return to calling routine
	return;
}

void cbkUpdateLine( string argsSyncInterval, int arg_iSyncInterval,
										string argsNodeGuardInterval, int arg_iNodeGuardInterval,
										string argsBusSpeed, int arg_iBusSpeed,
										string argsInterfacePort, string arg_sInterfacePort,
										string argsInterfaceCard, string arg_sInterfaceCard,
										string argsPortError, int arg_iPortError)
					     
{
					
// Local Variables
// ---------------
	string sBusDpName;
	string sBusName;
	string sElmbCount;
	string sBusSpeed;
	string sSyncInterval;
	string sNodeGuardInterval;
	string sPortError;
	
	langString lsComment;
		
	dyn_string dsTemp;
	
// Executable Code
// ---------------
	// Get the name of the bus DP
	sBusDpName = dpSubStr(argsSyncInterval, DPSUB_SYS_DP);
	lsComment = dpGetDescription(sBusDpName + &quot;.&quot;);
	
	// Get the bus name
	dsTemp = strsplit(sBusDpName, fwDevice_HIERARCHY_SEPARATOR);
	sBusName = dsTemp[dynlen(dsTemp)];
			
	// Get the number of Elmbs on this bus
	dsTemp = dpNames(sBusDpName + &quot;*&quot;, ELMB_TYPE_NAME);
			
	if (dynlen(dsTemp) &lt;= 0) {
		sElmbCount = &quot;None&quot;;
	} else {
		sprintf(sElmbCount, &quot;%d&quot;, dynlen(dsTemp));
	}														
	
	// Format information about the bus
	sprintf(sBusSpeed, &quot;%d&quot;,  arg_iBusSpeed);
	sprintf(sSyncInterval, &quot;%d&quot;, arg_iSyncInterval);
	sprintf(sNodeGuardInterval, &quot;%d&quot;, arg_iNodeGuardInterval);
	sprintf(sPortError, &quot;%d&quot;, arg_iPortError);

	// Update the information into the relevant row
	tabCANSystem.updateLine(1,
													&quot;busName&quot;, sBusName,
													&quot;comment&quot;, lsComment,
													&quot;noOfElmbs&quot;, sElmbCount,
													&quot;interface&quot;, arg_sInterfaceCard,
													&quot;port&quot;, arg_sInterfacePort,
													&quot;busSpeed&quot;, sBusSpeed,
													&quot;syncInterval&quot;, sSyncInterval,
													&quot;nodeGuardInterval&quot;, sNodeGuardInterval,
													&quot;portError&quot;, sPortError,
													&quot;busDpName&quot;, sBusDpName);

	// Return to calling routine
	return;
}

]]></script>
   </events>
  </shape>
  <shape Name="cmdStart" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">3</prop>
    <prop name="Type"/>
    <prop name="RefPoint">381 430</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">4</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8">Select a CANbus on the table to send a management message</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">381 430</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Start</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	// Call function to start (set operational) all ELMBs on the selected bus
	pnlSendBusCommand(1);
}]]></script>
   </events>
  </shape>
  <shape Name="cmdStop" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">4</prop>
    <prop name="Type"/>
    <prop name="RefPoint">471 430</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8">Select a CANbus on the table to send a management message</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">471 430</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Stop</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	// Call function to stop all ELMBs on the selected bus
	pnlSendBusCommand(2);
}]]></script>
   </events>
  </shape>
  <shape Name="cmdReset" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">5</prop>
    <prop name="Type"/>
    <prop name="RefPoint">561 430</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8">Select a CANbus on the table to send a management message</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">561 430</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Reset</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	// Call function to reset all ELMBs on the selected bus
	pnlSendBusCommand(129);
}]]></script>
   </events>
  </shape>
  <shape Name="cmdClose" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">7</prop>
    <prop name="Type"/>
    <prop name="RefPoint">580 510</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">8</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"/>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">580 510</prop>
    <prop name="Size">85 27</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Close</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOff(myPanelName());
}]]></script>
   </events>
  </shape>
  <reference parentSerial="-1" Name="Group2" referenceId="0">
   <properties>
    <prop name="FileName">objects/fwGeneral/fwHelpButton.pnl</prop>
    <prop name="Location">405 10</prop>
    <prop name="Geometry">1 0 0 1 233 0</prop>
    <prop name="TabOrder">8</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sPanelRelativePath</prop>
      <prop name="Value">fwElmb/fwElmbCANSystemViewOperation</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <shape Name="chkShowDescription" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">10</prop>
    <prop name="Type"/>
    <prop name="RefPoint">500 30</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">9</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"/>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">500 30</prop>
    <prop name="Size">121 41</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
	<prop name="en_US.utf8">Bus Name</prop>
      </prop>
      <prop name="Select">True</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
	<prop name="en_US.utf8">Comment</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, bool state)
{
	switch (button) {
		case 0:	// Bus name
			if (state)
				tabCANSystem.namedColumnVisibility(&quot;busName&quot;, true);
			else
				tabCANSystem.namedColumnVisibility(&quot;busName&quot;, false);
			break;
		case 1:	// Comment
			if (state)
				tabCANSystem.namedColumnVisibility(&quot;comment&quot;, true);
			else
				tabCANSystem.namedColumnVisibility(&quot;comment&quot;, false);
			break;
	}
}]]></script>
   </events>
  </shape>
  <shape Name="frmSendNmtToAll" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">12</prop>
    <prop name="Type"/>
    <prop name="RefPoint">10 470</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8"/>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Send message to all CANbuses</prop>
    </prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 410</prop>
    <prop name="Size">291 60</prop>
   </properties>
  </shape>
  <shape Name="cmdStartAll" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">13</prop>
    <prop name="Type"/>
    <prop name="RefPoint">21 430</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8">Select a CANbus on the table to send a management message</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">21 430</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Start</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  // Call function to start (set operational) all buses
  pnlSendBusCommandToAll(1);
}]]></script>
   </events>
  </shape>
  <shape Name="cmdStopAll" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">14</prop>
    <prop name="Type"/>
    <prop name="RefPoint">111 430</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">15</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8">Select a CANbus on the table to send a management message</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">111 430</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Stop</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  // Call function to stop all buses
  pnlSendBusCommandToAll(2);
}]]></script>
   </events>
  </shape>
  <shape Name="cmdResetAll" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">15</prop>
    <prop name="Type"/>
    <prop name="RefPoint">201 430</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">17</prop>
    <prop name="ToolTipText">
	<prop name="en_US.utf8">Select a CANbus on the table to send a management message</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
	<prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">201 430</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
	<prop name="en_US.utf8">Reset</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  // Call function to reset all buses
  pnlSendBusCommandToAll(129);
}]]></script>
   </events>
  </shape>
 </shapes>
</panel>