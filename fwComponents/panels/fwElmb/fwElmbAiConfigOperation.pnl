<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8">fwElmbAiConfigOperation</prop>
  </prop>
  <prop name="Size">430 490</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">0 0</prop>
  <prop name="InitAndTermRef">False</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">98.05147058823529</prop>
  <prop name="PDPI">98.05147058823529</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[#uses &quot;fwDevice/fwDevice.ctl&quot;
#uses &quot;fwElmb/fwElmbUser.ctl&quot;
#uses &quot;fwGeneral/fwProgressBar.ctl&quot;
#uses &quot;panel.ctl&quot;
#uses &quot;fwElmb/fwElmb.ctl&quot;
#uses &quot;fwGeneral/fwExceptionHandling.ctl&quot;
		#uses &quot;fwGeneral/fwExceptionHandling.ctl&quot;
		#uses &quot;fwElmb/fwElmb.ctl&quot;
		#uses &quot;fwDevice/fwDevice.ctl&quot;
		#uses &quot;fwElmb/fwElmbUser.ctl&quot;
		#uses &quot;fwGeneral/fwProgressBar.ctl&quot;
	]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="txtTitle" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">1</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">44 30</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">schwarz</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Size">257 25</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Elmb ADC Operation Panel</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="txtRate" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">8</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 190</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">22 192</prop>
    <prop name="Size">67 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Rate (Hz):</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="txtRange" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">9</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 220</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">22 222</prop>
    <prop name="Size">63 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Range (V):</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="frmMode" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">10</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">310 260</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Mode</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">310 190</prop>
    <prop name="Size">100 70</prop>
   </properties>
  </shape>
  <shape Name="txtHighestChannelNum" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">15</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 250</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">10</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">22 252</prop>
    <prop name="Size">145 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Highest channel number:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="frmAdcTransmissionType" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">17</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 400</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">12</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Analog Input Transmission Type</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 290</prop>
    <prop name="Size">210 110</prop>
   </properties>
  </shape>
  <shape Name="txtEventTimer" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">18</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 370</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">22 372</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Event timer (s):</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="frmADCResetAndCalibrate" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">24</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">230 400</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">19</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Reset and Calibrate</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">230 290</prop>
    <prop name="Size">190 110</prop>
   </properties>
  </shape>
  <shape Name="lblNodeID" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">30</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 50</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">23</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 52</prop>
    <prop name="Size">47 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Node Id:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="txtNodeID" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">36</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">70 50</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">29</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">72 52</prop>
    <prop name="Size">57 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	string sDpName = $sDpName;
	string nodeId;
	
// Executable Code
// ---------------
	// Remove the config part from the DP name to get the ELMB DP name
	strreplace(sDpName, fwDevice_HIERARCHY_SEPARATOR + ELMB_AI_CONFIG_NAME, &quot;&quot;);
	
	// Get the node ID
	dpGet(sDpName + &quot;.id&quot;, nodeId);
	
	// Display the text
	this.text = nodeId;
	
	// Return to calling routine
	return;
}]]></script>
   </events>
  </shape>
  <shape Name="txtMessage" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">39</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 410</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">30</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 412</prop>
    <prop name="Size">267 27</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="frmADCSettings" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">47</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 280</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">38</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">ADC Settings</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 170</prop>
    <prop name="Size">410 110</prop>
   </properties>
  </shape>
  <reference parentSerial="-1" Name="" referenceId="2">
   <properties>
    <prop name="FileName">fwElmb/objects/fwElmbVersionsRef.pnl</prop>
    <prop name="Location">240 90</prop>
    <prop name="Geometry">1 0 0 1 -60 10</prop>
    <prop name="TabOrder">40</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sDpName</prop>
      <prop name="Value">$sDpName</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <shape Name="cmbRate" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">4</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">180 190</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">180 190</prop>
    <prop name="Size">111 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
  int i;
	
  string sTemp;
	
  dyn_float dfRates;
	
  dyn_string dsRates;

// Executable Code
// ---------------
  // Set up the rates that are allowed
  dfRates = makeDynFloat(15.0, 30.0, 61.6, 84.5, 101.1, 1.88, 3.76, 7.51);
  dynSortAsc(dfRates);
  dynClear(dsRates);
		
  // Loop through all rates, formatting the text
  dynAppend(dsRates, &quot;&quot;);
  for (i = 1; i &lt;= dynlen(dfRates); i++) {
    sprintf(sTemp, &quot;%1.2f&quot;, dfRates[i]);
    dynAppend(dsRates, sTemp);
  }
		
  // Set the valid rates into the combo box
  this.items = dsRates;
  this.selectedPos = 1;

  // Return to calling routine
  return;
}
]]></script>
   </events>
  </shape>
  <shape Name="cmbRange" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">6</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">180 220</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">180 220</prop>
    <prop name="Size">111 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
  int i;
	
  string sTemp;
	
  dyn_float dfRanges;
	
  dyn_string dsRanges;

// Executable Code
// ---------------
  // Set up the ranges that are allowed
  dfRanges = makeDynFloat(0.1, 0.055, 0.025, 1.0, 5.0, 2.5);
  dynClear(dsRanges);
		
  // Loop through all ranges, formatting the text
  dynAppend(dsRanges, &quot;&quot;);
  for (i = 1; i &lt;= dynlen(dfRanges); i++) {
    sprintf(sTemp, &quot;%1.3f&quot;, dfRanges[i]);
    dynAppend(dsRanges, sTemp);
  }
  dynSortAsc(dsRanges);	

  // Set the valid ranges into the combo box
  this.items = dsRanges;
  this.selectedPos = 1;
	
  // Return to calling routine
  return;
}

]]></script>
   </events>
  </shape>
  <shape Name="radMode" shapeType="RADIO_BOX" layerId="0">
   <properties>
    <prop name="serialId">7</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">320 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">4</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">320 210</prop>
    <prop name="Size">81 41</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Unipolar</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Bipolar</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	// Ensure that none of the radio buttons are selected, by setting the value
	// to one that doesn't exist
	this.number = 2;
}]]></script>
   </events>
  </shape>
  <shape Name="cmbHighestChannelNum" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">16</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">180 250</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">This will override the value calculated by the application</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">180 250</prop>
    <prop name="Size">61 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	int i;
	
	string sTemp;
	
	dyn_string dsChannels;

// Executable Code
// ---------------
	// Create list of available values
	dynAppend(dsChannels, &quot;&quot;);
	for (i = 0; i &lt;= 64; i++) {
		sprintf(sTemp, &quot;%d&quot;, i);
		dynAppend(dsChannels, sTemp);
	}
		
	// Enter values into combo box
	this.items = dsChannels;
	this.selectedPos = 1;
	
	// Return to calling routine
	return;
}
]]></script>
   </events>
  </shape>
  <shape Name="cmbEventTimer" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">19</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">120 370</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">14</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">120 370</prop>
    <prop name="Size">81 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	int i;
	
	string sTemp;
	
	dyn_string dsEventTimerValues;

// Executable Code
// ---------------
	// Enter all allowed values into the event timer array
	dynAppend(dsEventTimerValues, &quot;&quot;);
	for (i = 0; i &lt;= 32; i++) {
		sprintf(sTemp, &quot;%d&quot;, i);
		dynAppend(dsEventTimerValues, sTemp);
	}
	
	// Enter the values into the combo box
	this.items = dsEventTimerValues;
	this.selectedPos = 1;

	// Return to calling routine
	return;
}
]]></script>
   </events>
  </shape>
  <shape Name="radTransmissionType" shapeType="RADIO_BOX" layerId="0">
   <properties>
    <prop name="serialId">20</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 310</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">15</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">For normal operation use -After Sync. message- On RTR transmission the data triggered by the event timer rollover</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">20 310</prop>
    <prop name="Size">181 51</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">After Sync. message only</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">After RTR message</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int argiButton)
{
// Local Variables
// ---------------
// None

// Executable Code
// ---------------
	// Check which selection has been made
	switch (argiButton) {
		case 0:
			// Make the event timer combo box disabled
			cmbEventTimer.enabled = false;
			txtEventTimer.enabled = false;
			break;
		case 1:
			// Enable the event timer combo box
			cmbEventTimer.enabled = true;
			txtEventTimer.enabled = true;
			break;
	}

	// Return to calling routine
	return;
}]]></script>
   </events>
  </shape>
  <shape Name="cmdResetAndCalibrateNow" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">25</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">240 310</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">20</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">240 310</prop>
    <prop name="Size">171 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Reset and Calibrate now</prop>
    </prop>
   </properties>
  </shape>
  <shape Name="cmdForEachChannelScan" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">26</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">240 360</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">21</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">240 360</prop>
    <prop name="Size">171 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Before each channel scan</prop>
    </prop>
   </properties>
  </shape>
  <shape Name="cmdWrite" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">27</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">358 410</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">22</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">358 410</prop>
    <prop name="Size">63 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Write</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	int iMode;
	int radModePos = radMode.number;
	int iHighestChannelNum = cmbHighestChannelNum.text;
	int iTransmissionTypePos = radTransmissionType.number;
	int iTransmissionType;
	int iEventTimer = -1;
	int iRate;
	int iRange;
	int i;

	unsigned uState;

	float fRate = cmbRate.text;
	float fRange = cmbRange.text;

	string sElmbDpName = $sDpName;

	dyn_float df;

	dyn_string dsTemp;
	dyn_string ds;

  dyn_string dsExceptionInfo;

// Executable Code
// ---------------
	// Check if values should be saved to EEPROM

	ChildPanelOnCentralReturn(&quot;vision/MessageInfo3&quot;,
														&quot;Question&quot;,
														makeDynString(&quot;Save these settings to the EEPROM? \n(i.e. make default settings)&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;Cancel&quot;),
														df, ds);

	// If cancel clicked, do not set configuration
	if (df[1] == 2)
		return;

	// Disable necessary controls until configuration set
	this.enabled = false;
	cmdRead.enabled = false;

	// Remove the config part from the DP name to get the ELMB DP name
	strreplace(sElmbDpName, fwDevice_HIERARCHY_SEPARATOR + ELMB_AI_CONFIG_NAME, &quot;&quot;);

  fwOpenProgressBar(&quot;Writing ADC Settings&quot;, &quot;In progress. Please wait...&quot;, 1);

	// Get current state of ELMB
	dpGet(sElmbDpName + &quot;.state.value&quot;, uState);

	// Set ELMB pre-operational
//	dpSet(sElmbDpName + &quot;.management&quot;, 128);
  uint elmbState;
  string nominalElmbState;
  dpGet(sElmbDpName + &quot;.requestedState&quot;, nominalElmbState);
  dpGet(sElmbDpName + &quot;.state.noToggle&quot;, elmbState);
  if (elmbState!=127 || nominalElmbState!=&quot;PREOPERATIONAL&quot;) {
    dpSetWait(sElmbDpName + &quot;.requestedState&quot;, &quot;PREOPERATIONAL&quot;);
    int timeout = 60; // FIXME: check dependency of state updates in UA server..
    while (elmbState!=127) { // waiting for the ELMB state going to PREOPERATIONAL
      dpGet(sElmbDpName + &quot;.state.noToggle&quot;, elmbState);
      if (timeout&lt;0) {
        DebugTN(&quot;fwElmbAiConfigOperation.pnl: timeout waiting for ELMB going to PREOPERATIONAL!&quot;);
        dynAppend(dsExceptionInfo, &quot;timeout waiting for ELMB going to PREOPERATIONAL&quot;);
        break;
      }
      --timeout;
      delay(0,500);
    }
  }

	txtMessage.text = &quot;This will take a few seconds. Please wait...&quot;;

	// iMode == 2 means do not set
	if (radModePos == 0)
		iMode = 1;
	else if (radModePos == 1)
		iMode = 0;
	else
		iMode = 2;

	// iTransmissionType == 2 means do not set
	if (iTransmissionTypePos == 0)
		iTransmissionType = 1;
	else if (iTransmissionTypePos == 1)
		iTransmissionType = 255;
	else
		iTransmissionType = 2;

	if ((cmbEventTimer.text != &quot;&quot;) &amp;&amp; (radTransmissionType.number == &quot;1&quot;))
		iEventTimer = cmbEventTimer.text;

	// start saving those parameters that have values
	// mode
	if (iMode != 2) {
		dpSet($sDpName + &quot;.mode.write&quot;, iMode);
		delay(0,50);
	}

	// range
	switch(fRange) {
		case 0.100:
			iRange = 0;
			break;
		case 0.055:
			iRange = 1;
			break;
		case 0.025:
			iRange = 2;
			break;
		case 1.000:
			iRange = 3;
			break;
		case 5.000:
			iRange = 4;
			break;
		case 2.500:
		iRange = 5;
			break;
		default:
			iRange = -1;
			break;
	}

	if ((iRange &gt;= 0) &amp;&amp; (iRange &lt;= 5)) {
		dpSet($sDpName + &quot;.range.byte.write&quot;, iRange);
		delay(0,50);
	}

	// rate
	switch (fRate) {
		case 15.00:
			iRate = 0;
			break;
		case 30.00:
			iRate = 1;
			break;
		case 61.60:
			iRate = 2;
			break;
		case 84.50:
			iRate = 3;
			break;
		case 101.10:
			iRate = 4;
			break;
		case 1.88:
			iRate = 5;
			break;
		case 3.76:
			iRate = 6;
			break;
		case 7.51:
			iRate = 7;
			break;
		default:
			iRate = -1;
			break;
	}

	if ((iRate &gt;= 0) &amp;&amp; (iRate &lt;= 7)) {
		dpSet($sDpName + &quot;.rate.byte.write&quot;, iRate);
		delay(0,50);
	}

	// transmission type
	if (iTransmissionType != 2) {
		dpSet($sDpName + &quot;.transmissionType.write&quot;, iTransmissionType);
		delay(0,50);
	}

	// maxchannels
	if (iHighestChannelNum) {
		dpSet($sDpName + &quot;.chNumber.write&quot;, iHighestChannelNum);
		delay(0,50);
	}

	// event timer
	if (iEventTimer) {
		if ((iEventTimer != -1) &amp;&amp; (radTransmissionType.number == &quot;1&quot;)) {
			dpSet($sDpName + &quot;.eventTimer.write&quot;, iEventTimer);
			delay(0,50);
		}
	}

	if (df[1] == 1.0) {
		dpSet(sElmbDpName + &quot;.eeprom.save&quot;, ELMB_SAVE_EEPROM);
		delay(0, 50);
	}

	// Set the ELMB back to it's original state, but only if it was stopped or operational.
	// Otherwise, leave it as preoperational
// 	if ((uState == 0x84) || (uState == 0x04))
// 		dpSet(sElmbDpName + &quot;.management&quot;, 2);
// 	else if ((uState  == 0x85) || (uState == 0x05))
// 		dpSet(sElmbDpName + &quot;.management&quot;, 1);
  if (nominalElmbState==&quot;OPERATIONAL&quot;) { // FIXME: assuming here OPERATIONAL is target
    dpSetWait(sElmbDpName + &quot;.requestedState&quot;, nominalElmbState);
    int timeout = 60; // FIXME: check dependency of state updates in UA server..
    while (elmbState!=5) { // waiting for the ELMB state going back to OPERATIONAL
      dpGet(sElmbDpName + &quot;.state.noToggle&quot;, elmbState);
      if (timeout&lt;0) {
        DebugTN(&quot;fwElmbAiConfigOperation.pnl: timeout waiting for ELMB going to OPERATIONAL!&quot;);
        dynAppend(dsExceptionInfo, &quot;timeout waiting for ELMB going to OPERATIONAL&quot;);
        break;
      }
      --timeout;
      delay(0,500);
    }
  } else if(nominalElmbState == &quot;STOPPED&quot;){
    dpSetWait(sElmbDpName + &quot;.requestedState&quot;, nominalElmbState);
    int timeout = 60; // FIXME: check dependency of state updates in UA server..
    while (elmbState!=4) { // waiting for the ELMB state going back to OPERATIONAL
      dpGet(sElmbDpName + &quot;.state.noToggle&quot;, elmbState);
      if (timeout&lt;0) {
        DebugTN(&quot;fwElmbAiConfigOperation.pnl: timeout waiting for ELMB going to OPERATIONAL!&quot;);
        dynAppend(dsExceptionInfo, &quot;timeout waiting for ELMB going to OPERATIONAL&quot;);
        break;
      }
      --timeout;
      delay(0,500);
    }
  }

  // Check for errors
  if (dynlen(dsExceptionInfo) &gt; 0) {
    fwCloseProgressBar(&quot;Problems writing ADC settings&quot;);
    txtMessage.text = &quot;Problems writing ADC settings&quot;;
    fwExceptionHandling_display(dsExceptionInfo);
  } else {
    txtMessage.text = &quot;ADC settings successfully written&quot;;
    fwCloseProgressBar(&quot;ADC settings successfully written&quot;);
  }

  // Re-enable controls
	this.enabled = true;
	cmdRead.enabled = true;

	// Return to calling routine
	return;
}
]]></script>
   </events>
  </shape>
  <shape Name="cmdRead" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">28</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">290 410</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">22</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">290 410</prop>
    <prop name="Size">63 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Read</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
  bool bMode;
  bool bReading;

  int i;
  int iChannelMax;
  int iTemp;

  unsigned uState;
  unsigned uTransmissionType;
  unsigned uEventTimer;

  float fRange;
  float fRate;

  string sElmbName;
  string sTemp;
  string sTemp2;
  string sMessage;

  anytype aValue;

  dyn_string dsTemp;
  dyn_string dsExceptionTemp;
  dyn_string dsExceptionInfo;

// Executable Code
// ---------------
  // Disable certain controls while the read takes place
  this.enabled = false;
  cmdWrite.enabled = false;

  // Give some information to the user
  txtMessage.text = &quot;This may take up to 10 seconds. Please wait...&quot;;
  fwOpenProgressBar(&quot;Reading ADC Settings&quot;, &quot;In progress. Please wait...&quot;, 1);

  // Get the parent (ELMB) that this config comes from
  fwDevice_getParent($sDpName, sElmbName, dsExceptionInfo);

  DebugN(&quot;This is the dpname &quot; + sElmbName);

  // Get current state of ELMB
//   dpGet(sElmbName + &quot;.state.value&quot;, uState);

  // Get node nominal state and set to Pre-Operational:

//  dpSetWait(sElmbName + &quot;.management&quot;, 128);

  uint elmbState;
  string nominalElmbState;
  dpGet(sElmbName + &quot;.requestedState&quot;, nominalElmbState);
  dpGet(sElmbName + &quot;.state.noToggle&quot;, elmbState);
  if (elmbState!=127 || nominalElmbState!=&quot;PREOPERATIONAL&quot;) {
    dpSetWait(sElmbName + &quot;.requestedState&quot;, &quot;PREOPERATIONAL&quot;);
    int timeout = 60; // FIXME: check dependency of state updates in UA server..
    while (elmbState!=127) { // waiting for the ELMB state going to PREOPERATIONAL
      dpGet(sElmbName + &quot;.state.noToggle&quot;, elmbState);
      if (timeout&lt;0) {
        DebugTN(&quot;fwElmbAiConfigOperation.pnl: timeout waiting for ELMB going to PREOPERATIONAL!&quot;);
        dynAppend(dsExceptionInfo, &quot;timeout waiting for ELMB going to PREOPERATIONAL&quot;);
        break;
      }
      --timeout;
      delay(0,500);
    }
  }

  // Input range
  fwElmb_elementSQ($sDpName + &quot;.range.byte.read&quot;, 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    dpGet($sDpName + &quot;.range.volt&quot;, fRange);
    cmbRange.enabled = true;
    txtRange.enabled = true;
    dsTemp = cmbRange.items;
    sprintf(sTemp, &quot;%1.3f&quot;, fRange);
    iTemp = dynContains(dsTemp, sTemp);
    if (iTemp &gt; 0)
      cmbRange.selectedPos = iTemp;
  } else {
    cmbRange.enabled = false;
    txtRange.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }

  // Conversion rate
  fwElmb_elementSQ($sDpName + &quot;.rate.byte.read&quot;, 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    dpGet($sDpName + &quot;.rate.hz&quot;, fRate);
    cmbRate.enabled = true;
    txtRate.enabled = true;
    dsTemp = cmbRate.items;
    sprintf(sTemp, &quot;%1.2f&quot;, fRate);
    iTemp = dynContains(dsTemp, sTemp);
    if (iTemp &gt; 0)
      cmbRate.selectedPos = iTemp;
  } else {
    cmbRate.enabled = false;
    txtRate.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }

  // Mode
  fwElmb_elementSQ($sDpName + &quot;.mode.read&quot;, 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    bMode = aValue;
    radMode.enabled = true;
    switch (bMode) {
      case 0:
        radMode.number = 1;
        break;
      case 1:
        radMode.number = 0;
        break;
    }
  } else {
    radMode.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }

  // Max Channel
  fwElmb_elementSQ($sDpName + &quot;.chNumber.read&quot;, 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    iChannelMax = aValue;
    cmbHighestChannelNum.enabled = true;
    txtHighestChannelNum.enabled = true;
    dsTemp = cmbHighestChannelNum.items;
    sprintf(sTemp, &quot;%d&quot;, iChannelMax);
    iTemp = dynContains(dsTemp, sTemp);
    if (iTemp &gt; 0)
      cmbHighestChannelNum.selectedPos = iTemp;
    else if (iTemp == 0)
      cmbHighestChannelNum.selectedPos = 1;
  } else {
    cmbHighestChannelNum.enabled = false;
    txtHighestChannelNum.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }

  // Transmission type and event timer
  fwElmb_elementSQ($sDpName + &quot;.transmissionType.read&quot;, 2, aValue, dsExceptionTemp);
  if (dynlen(dsExceptionTemp) == 0) {
    uTransmissionType = aValue;
    switch (uTransmissionType) {
      case 1: // Sync response only
        radTransmissionType.number = 0;
        txtEventTimer.enabled = false;
        cmbEventTimer.enabled = false;
        break;
      case 255: // Sync response and event timer
        fwElmb_elementSQ($sDpName + &quot;.eventTimer.read&quot;, 2, aValue, dsExceptionTemp);
        if (dynlen(dsExceptionTemp) == 0) {
          uEventTimer = aValue;
          dsTemp = cmbEventTimer.items;
          sprintf(sTemp, &quot;%d&quot;, uEventTimer);
          iTemp = dynContains(dsTemp, sTemp);
          if (iTemp &gt; 0)
            cmbEventTimer.selectedPos = iTemp;
          radTransmissionType.number = 1;
          txtEventTimer.enabled = true;
          cmbEventTimer.enabled = true;
        } else {
          radTransmissionType.enabled = false;
          txtEventTimer.enabled = false;
          cmbEventTimer.enabled = false;
          dynAppend(dsExceptionInfo, dsExceptionTemp);
        }
        break;
    }
  } else {
    radTransmissionType.enabled = false;
    txtEventTimer.enabled = false;
    cmbEventTimer.enabled = false;
    dynAppend(dsExceptionInfo, dsExceptionTemp);
  }

  fwElmbUser_updateFirmwareInfo(sElmbName);

  // Set the ELMB back to it's original state, but only if it was stopped or operational.
  // Otherwise, leave it as preoperational
//   if ((uState == 0x84) || (uState == 0x04))
//     dpSet(sElmbName + &quot;.management&quot;, 2);
//   else if ((uState  == 0x85) || (uState == 0x05))
//     dpSet(sElmbName + &quot;.management&quot;, 1);

  if (nominalElmbState==&quot;OPERATIONAL&quot;) { // FIXME: assuming here OPERATIONAL is target
    dpSetWait(sElmbName + &quot;.requestedState&quot;, nominalElmbState);
    int timeout = 60; // FIXME: check dependency of state updates in UA server..
    while (elmbState!=5) { // waiting for the ELMB state going back to OPERATIONAL
      dpGet(sElmbName + &quot;.state.noToggle&quot;, elmbState);
      if (timeout&lt;0) {
        DebugTN(&quot;fwElmbAiConfigOperation.pnl: timeout waiting for ELMB going to OPERATIONAL!&quot;);
        dynAppend(dsExceptionInfo, &quot;timeout waiting for ELMB going to OPERATIONAL&quot;);
        break;
      }
      --timeout;
      delay(0,500);
    }
  } else if(nominalElmbState == &quot;STOPPED&quot;){
    dpSetWait(sElmbName + &quot;.requestedState&quot;, nominalElmbState);
    int timeout = 60; // FIXME: check dependency of state updates in UA server..
    while (elmbState!=4) { // waiting for the ELMB state going back to OPERATIONAL
      dpGet(sElmbName + &quot;.state.noToggle&quot;, elmbState);
      if (timeout&lt;0) {
        DebugTN(&quot;fwElmbAiConfigOperation.pnl: timeout waiting for ELMB going to OPERATIONAL!&quot;);
        dynAppend(dsExceptionInfo, &quot;timeout waiting for ELMB going to OPERATIONAL&quot;);
        break;
      }
      --timeout;
      delay(0,500);
    }
  }


  // Check for errors
  if (dynlen(dsExceptionInfo) &gt; 0) {
    fwCloseProgressBar(&quot;Problems reading ADC settings&quot;);
    txtMessage.text = &quot;Problems reading ADC settings&quot;;
    fwExceptionHandling_display(dsExceptionInfo);
  } else {
    txtMessage.text = &quot;ADC settings successfully read&quot;;
    fwCloseProgressBar(&quot;ADC settings successfully read&quot;);
  }

  // Re-enable controls
  this.enabled = true;
  cmdWrite.enabled = true;

  // Return to calling routine
  return;
}
]]></script>
   </events>
  </shape>
  <shape Name="cmdClose" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">41</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">290 450</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">32</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">290 450</prop>
    <prop name="Size">131 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Close</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOff(myPanelName());
}]]></script>
   </events>
  </shape>
  <reference parentSerial="-1" Name="Group2" referenceId="0">
   <properties>
    <prop name="FileName">objects/fwGeneral/fwHelpButton.pnl</prop>
    <prop name="Location">614 10</prop>
    <prop name="Geometry">1 0 0 1 -220 0</prop>
    <prop name="TabOrder">33</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sPanelRelativePath</prop>
      <prop name="Value">fwElmb/fwElmbAiConfigOperation</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
 </shapes>
</panel>
