<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8">(NoName)</prop>
  </prop>
  <prop name="Size">560 300</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">30 20</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[

#uses &quot;fwGeneral/fwGeneral.ctl&quot;
#uses &quot;fwGeneral/fwGeneral.ctl&quot;
	]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="Text1" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">4</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Size">321 37</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Bus Init parameters view</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Table1" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">2</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 60</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 60</prop>
    <prop name="Size">541 191</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">26</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">BusName</prop>
     <prop name="Width">130</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Bus Name</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">SyncInterval</prop>
     <prop name="Width">120</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Sync Interval (ms)</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">NodeGuarding</prop>
     <prop name="Width">155</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Node Guard Interval (ms)</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">Management</prop>
     <prop name="Width">113</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Management</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	int i;
	
	unsigned uSyncInterval;
	unsigned uNodeGuard;
	unsigned uManagement; // TODO remove, unused
	
	string sBuses = $sBusNames;
	string sManagement;
	
	dyn_string dsBusList;

// Executable Code
// ---------------
	// Get a list of the buses
	fwGeneral_stringToDynString(sBuses, dsBusList);

	// Loop through all buses
	for (i = 1; i &lt;= dynlen(dsBusList); i++) {
	
		// Get buses parameters from the DP
		dpGet(dsBusList[i] + &quot;.syncInterval&quot;, uSyncInterval,
					dsBusList[i] + &quot;.nodeGuardInterval&quot;, uNodeGuard,
					dsBusList[i] + &quot;.managementOnServerStart&quot;, sManagement);
					
		
		// Enter the data into the table
		this.updateLine(1, 	&quot;BusName&quot;, dsBusList[i],
												&quot;SyncInterval&quot;, uSyncInterval,
												&quot;NodeGuarding&quot;, uNodeGuard,
												&quot;Management&quot;, sManagement);
 	}
 	
 	// Return to calling routine
 	return;
}]]></script>
    <script name="DoubleClicked" isEscaped="1"><![CDATA[main(int row, string column)
{
  string sOut;
  if (column == &quot;Management&quot;)
  {
    switch (this.cellValue)
    {
      case &quot;&quot;: 
        sOut=&quot;START&quot;;
        break;
      case &quot;START&quot;:
        sOut=&quot;RESET&quot;;
        break;
      case &quot;RESET&quot;:
        sOut=&quot;STOP&quot;;
        break;
      case &quot;STOP&quot;:
        sOut=&quot;&quot;;
        break;
      default:
        sOut=&quot;&quot;;
    }
    

    this.cellValue(sOut);
  }
  
}
]]></script>
   </events>
  </shape>
  <shape Name="CancelButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">5</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">490 260</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">490 260</prop>
    <prop name="Size">61 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Cancel</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOffReturn(makeDynFloat(0.0), makeDynString(&quot;false&quot;));
}]]></script>
   </events>
  </shape>
  <shape Name="ContinueButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">6</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">420 260</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">420 260</prop>
    <prop name="Size">61 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Next &gt;</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
// Local Variables
// ---------------
	int i;
	
	unsigned uSyncInterval;
	unsigned uNodeGuard;
	unsigned uManagement;
 string sManagement;
	
	string sBus;
	
	dyn_string dsLine;
	
// Executable Code
// ---------------
	// The changes are applied on the DP elements
	for (i = 0; i &lt; Table1.lineCount; i++) {
	
		// Get row from the table
		dsLine = Table1.getLineN(i);
		
		// Get data from the row
		sBus = dsLine[1];
		uSyncInterval = dsLine[2];
		uNodeGuard = dsLine[3];
  sManagement = dsLine[4];
//   		switch (dsLine[4]) {
//   			case &quot;STARTED&quot;:
//   				uManagement = 1;
//   				break;
//   			case &quot;STOPPED&quot;:
//   				uManagement = 2;
//   				break;
//   			case &quot;RESET&quot;:
//   				uManagement = 129;
//   				break;
//   			default:
//   				break;
//   		}
		
		dpSet(sBus + &quot;.syncInterval&quot;, uSyncInterval, 
					sBus + &quot;.nodeGuardInterval&quot;, uNodeGuard, 
				  sBus + &quot;.managementOnServerStart&quot;, sManagement); 
 	} 
  
   
	// Return to calling routine
	PanelOffReturn(makeDynFloat(1.0), makeDynString(&quot;true&quot;));
}]]></script>
   </events>
  </shape>
 </shapes>
</panel>
