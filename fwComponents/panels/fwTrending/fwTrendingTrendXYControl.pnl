<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8">(NoName)</prop>
   <prop name="en_US.iso88591">(NoName)</prop>
  </prop>
  <prop name="Size">445 95</prop>
  <prop name="BackColor">FwTrendingViewBackground</prop>
  <prop name="RefPoint">0 0</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[#uses &quot;fwTrending/fwTrending.ctl&quot;
#uses &quot;fwTrending/fwTrendingTree.ctl&quot;

int REFRESH_DELAY = 100;
]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape layerId="0" Name="Border1" shapeType="RECTANGLE">
   <properties>
    <prop name="serialId">39</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">304 11</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">FwTrendingFaceplateBackground</prop>
    <prop name="BackColor">FwTrendingFaceplateBackground</prop>
    <prop name="TabOrder">10</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">304 1</prop>
    <prop name="Size">101 11</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape layerId="0" Name="curvesTimeRangeHidden" shapeType="PRIMITIVE_TEXT">
   <properties>
    <prop name="serialId">34</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 65</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{255,255,255}</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[dashed,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Location">12 67</prop>
    <prop name="Size">141 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">hiddenUserCurveTimerange</prop>
     <prop name="en_US.iso88591">hiddenUserCurveTimerange</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">True</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape layerId="0" Name="StopButton" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">22</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 0</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">0 0</prop>
    <prop name="Size">42 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Freeze</prop>
     <prop name="en_US.iso88591">Freeze</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main() {
	string buttonState = this.text;
	string ref = $sRefName;
	
	if(buttonState == &quot;Run&quot;) { // in stop-&gt;run
		fwTrending_trendRun(ref, true, ref + &quot;.&quot;);
	} else { // in Run -&gt; stop
		fwTrending_trendRun(ref, false, ref + &quot;.&quot;);
	}
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="TimeCascadeButton" shapeType="CASCADE_BUTTON">
   <properties>
    <prop name="serialId">23</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">41 0</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">41 0</prop>
    <prop name="Size">68 21</prop>
    <prop name="PopupItemId"></prop>
    <prop name="Text">
     <prop name="en_US.utf8">Time Range</prop>
     <prop name="en_US.iso88591">Time Range</prop>
    </prop>
    <prop name="PopupMenu">
     <prop name="PopupItem">
      <prop name="PopupItemId">10minutes</prop>
      <prop name="Text">
       <prop name="en_US.utf8">10 minutes</prop>
       <prop name="en_US.iso88591">10 minutes</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">1hour</prop>
      <prop name="Text">
       <prop name="en_US.utf8">1 hour</prop>
       <prop name="en_US.iso88591">1 hour</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">8hours</prop>
      <prop name="Text">
       <prop name="en_US.utf8">8 hours</prop>
       <prop name="en_US.iso88591">8 hours</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">1day</prop>
      <prop name="Text">
       <prop name="en_US.utf8">1 day</prop>
       <prop name="en_US.iso88591">1 day</prop>
      </prop>
      <prop name="Hotkey">Alt+1</prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">10days</prop>
      <prop name="Text">
       <prop name="en_US.utf8">10 days</prop>
       <prop name="en_US.iso88591">10 days</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">userSpec</prop>
      <prop name="Text">
       <prop name="en_US.utf8">User specified</prop>
       <prop name="en_US.iso88591">User specified</prop>
      </prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(string id) {
	dyn_string ids = makeDynString(&quot;10minutes&quot;, &quot;1hour&quot;, &quot;8hours&quot;, &quot;1day&quot;, &quot;10days&quot;, &quot;userSpec&quot;, &quot;xzoomin&quot;, &quot;xzoomout&quot;);
	dyn_string texts = makeDynString(&quot;10 minutes&quot;, &quot;1 hour&quot;, &quot;8 hours&quot;, &quot;1 day&quot;, &quot;10 days&quot;, &quot;User Specified&quot;);
	string sTimeRange;
	dyn_string ds; 
	dyn_float df;
	int d, h, m, t; 
	string activeTrend, trendRunning;
	string ref = $sRefName;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	switch (id) 
	{
		case &quot;10minutes&quot;: {
			fwTrending_changeTrendTimeRange(ref, 600, ref + &quot;.&quot;, &quot;  0 d  0 h 10 m&quot;, 0, texts[1] + &quot;  *&quot;);
			break;	
		}
		case &quot;1hour&quot; : {
			fwTrending_changeTrendTimeRange(ref, 3600, ref + &quot;.&quot;, &quot;  0 d  1 h  0 m&quot;, 1, texts[2] + &quot;  *&quot;);
			break;	
		}
		case &quot;8hours&quot; : {
			fwTrending_changeTrendTimeRange(ref, 28800, ref + &quot;.&quot;, &quot;  0 d  8 h  0 m&quot;, 2, texts[3] + &quot;  *&quot;);
			break;	
		}
		case &quot;1day&quot; : {
			fwTrending_changeTrendTimeRange(ref, 86400, ref + &quot;.&quot;, &quot;  1 d  0 h  0 m&quot;, 3, texts[4] + &quot;  *&quot;);
			break;	
		}
		case &quot;10days&quot; : {
			fwTrending_changeTrendTimeRange(ref, 864000, ref + &quot;.&quot;, &quot; 10 d  0 h  0 m&quot;, 4, texts[5] + &quot;  *&quot;);
			break;	
		}
		case &quot;userSpec&quot; : {	
			fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);
			sTimeRange = plotData[fwTrending_PLOT_OBJECT_TIME_RANGE];

			sscanf(sTimeRange,&quot;%d&quot;,t);
			d = t / 86400;
			h = t % 86400 / 3600;
			m = t % 3600 / 60;
			ChildPanelOnCentralModalReturn(&quot;fwTrending/fwTrendingTimeSpec.pnl&quot;, &quot;Specify a Time Period&quot;,
				makeDynString(&quot;$iDays:&quot;+d,&quot;$iHours:&quot;+h,&quot;$iMins:&quot;+m), df, ds);
			if(dynlen(ds) &gt; 0 &amp;&amp; ds[1] == &quot;ok&quot;) {
				d = df[1]; h = df[2]; m = df[3];
				//this.textItem(prev - 1, texts[prev] + &quot;  *&quot;);
				t = d * 86400 + h * 3600 + m * 60;
				d = t / 86400;
				h = t % 86400 / 3600;
				m = t % 3600 / 60;
				if(t &gt; 0) {
					sprintf(sTimeRange,&quot;%3d d %2d h %2d m&quot;,d,h,m);

					plotData[fwTrending_PLOT_OBJECT_TIME_RANGE] = t;
					fwTrending_setRuntimePlotDataWithStrings(ref, trendRunning, plotData, exceptionInfo, FALSE);
					fwTrending_changeTrendTimeRange(ref, t, ref + &quot;.&quot;, sTimeRange, 5, texts[6] + &quot; (&quot; + d + &quot;d &quot; + h + &quot;h &quot; + m + &quot;m)  *&quot;);
				}
			}
			break;
		}
	}
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="ZoomCascadeButton" shapeType="CASCADE_BUTTON">
   <properties>
    <prop name="serialId">41</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">155 451</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">108 0</prop>
    <prop name="Size">48 21</prop>
    <prop name="PopupItemId"></prop>
    <prop name="Text">
     <prop name="en_US.utf8">Axes</prop>
     <prop name="en_US.iso88591">Axes</prop>
    </prop>
    <prop name="PopupMenu">
     <prop name="PopupItem">
      <prop name="PopupItemId">axesVisible</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Axes</prop>
       <prop name="en_US.iso88591">Axes</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">xzoom</prop>
      <prop name="Text">
       <prop name="en_US.utf8">X Axis</prop>
       <prop name="en_US.iso88591">X Axis</prop>
      </prop>
      <prop name="PopupMenu">
       <prop name="PopupItem">
        <prop name="PopupItemId">xzoomin</prop>
        <prop name="Text">
         <prop name="en_US.utf8">Zoom in</prop>
         <prop name="en_US.iso88591">Zoom in</prop>
        </prop>
       </prop>
       <prop name="PopupItem">
        <prop name="PopupItemId">xzoomout</prop>
        <prop name="Text">
         <prop name="en_US.utf8">Zoom out</prop>
         <prop name="en_US.iso88591">Zoom out</prop>
        </prop>
       </prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">yzoom</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Y Axis</prop>
       <prop name="en_US.iso88591">Y Axis</prop>
      </prop>
      <prop name="PopupMenu">
       <prop name="PopupItem">
        <prop name="PopupItemId">yzoomin</prop>
        <prop name="Text">
         <prop name="en_US.utf8">Zoom in</prop>
         <prop name="en_US.iso88591">Zoom in</prop>
        </prop>
        <prop name="Hotkey">Ctrl+2</prop>
       </prop>
       <prop name="PopupItem">
        <prop name="PopupItemId">yzoomout</prop>
        <prop name="Text">
         <prop name="en_US.utf8">Zoom out</prop>
         <prop name="en_US.iso88591">Zoom out</prop>
        </prop>
        <prop name="Hotkey">Ctrl+8</prop>
       </prop>
      </prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(string id)
{
	bool isRunning, showWithAxes;
	int i;
	string currentTrendObj, boolAsText;
	dyn_string plotShapes, exceptionInfo;
	dyn_dyn_string plotData;
	string ref = $sRefName;


	switch(id)
	{
		case &quot;axesVisible&quot;:
			fwTrending_getRuntimePlotDataWithExtendedObject(ref, isRunning, plotShapes, plotData, exceptionInfo, FALSE);
			if(strpos(this.textItem(&quot;0&quot;), &quot;*&quot;) &gt; 0)
			{
				this.textItem(&quot;0&quot;, &quot;Axes&quot;);
				showWithAxes = FALSE;
				boolAsText = &quot;FALSE&quot;;
			}
			else
			{
				this.textItem(&quot;0&quot;, &quot;Axes&quot; + &quot;   *&quot;);
				showWithAxes = TRUE;
				boolAsText = &quot;TRUE&quot;;
			}
			
			plotData[fwTrending_PLOT_OBJECT_AXII] = makeDynString();
			for(i=1; i&lt;=fwTrending_MAX_NUM_CURVES; i++)
				dynAppend(plotData[fwTrending_PLOT_OBJECT_AXII], boolAsText);
			
			fwTrending_setRuntimePlotDataWithExtendedObject(ref, isRunning, plotData, exceptionInfo, FALSE);
			if(showWithAxes)
				setValue(ref+&quot;trend.activeTrendText&quot;, &quot;text&quot;, plotShapes[fwTrending_LINEAR_TREND_NAME]);
			else
				setValue(ref+&quot;trend.activeTrendText&quot;, &quot;text&quot;, plotShapes[fwTrending_LOG_TREND_NAME]);

			getValue(ref+&quot;trend.activeTrendText&quot;, &quot;text&quot;, currentTrendObj);
			plotShapes[fwTrending_ACTIVE_TREND_NAME] = currentTrendObj;
			fwTrending_initTrendWithObject(ref, currentTrendObj, plotShapes, plotData, isRunning, FALSE, exceptionInfo, TRUE);
			fwTrending_showStandardTrend(showWithAxes, plotShapes[fwTrending_LINEAR_TREND_NAME], plotShapes[fwTrending_LOG_TREND_NAME]);
			break;
		case &quot;xzoomin&quot;:
			fwTrending_trendZoomX(ref, true);
			break;
		case &quot;xzoomout&quot;:
			fwTrending_trendZoomX(ref, false);
			break;
		case &quot;yzoomin&quot;:
			fwTrending_trendZoomY(ref, true);
			break;
		case &quot;yzoomout&quot;:
			fwTrending_trendZoomY(ref, false);
			break;
	}
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="trendRefreshButton" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">40</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">422 0</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">12</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">Refresh plotted data</prop>
     <prop name="en_US.iso88591">Refresh plotted data</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">422 0</prop>
    <prop name="Size">23 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop SharedPixmap="1" name="Image">
     <prop name="BackgroundPixmap">refresh.gif</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string ref = $sRefName;

	fwTrending_trendRefresh(ref);
}
]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="saveSettings" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">25</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">155 0</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">Save configuration to plot data point</prop>
     <prop name="en_US.iso88591">Save configuration to plot data point</prop>
    </prop>
    <prop name="Hotkey">Ctrl+R</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">155 0</prop>
    <prop name="Size">77 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Save Settings</prop>
     <prop name="en_US.iso88591">Save Settings</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string ref = $sRefName;

	setValue(ref+&quot;trend.refreshTrend&quot;, &quot;text&quot;, &quot;FALSE&quot;);
	this.enabled = FALSE;

	fwTrending_pageSavePlotSettings(ref);

	delay(0,REFRESH_DELAY);
	setValue(ref+&quot;trend.refreshTrend&quot;, &quot;text&quot;, &quot;TRUE&quot;);
	this.enabled = TRUE;
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="OtherCascadeButton" shapeType="CASCADE_BUTTON">
   <properties>
    <prop name="serialId">26</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 10</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">4</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">231 0</prop>
    <prop name="Size">38 21</prop>
    <prop name="PopupItemId"></prop>
    <prop name="Text">
     <prop name="en_US.utf8">Other</prop>
     <prop name="en_US.iso88591">Other</prop>
    </prop>
    <prop name="PopupMenu">
     <prop name="PopupItem">
      <prop name="PopupItemId">zoom</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Zoomed Window</prop>
       <prop name="en_US.iso88591">Zoomed Window</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">export</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Export plot to CSV...</prop>
       <prop name="en_US.iso88591">Export plot to CSV...</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">print</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Print plot</prop>
       <prop name="en_US.iso88591">Print plot</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">new_sep</prop>
      <prop name="Text">
       <prop name="en_US.utf8">___</prop>
       <prop name="en_US.iso88591">___</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">Legends</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Legend</prop>
       <prop name="en_US.iso88591">Legend</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">Controls</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Controls</prop>
       <prop name="en_US.iso88591">Controls</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">grid</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Grid</prop>
       <prop name="en_US.iso88591">Grid</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">new_sep</prop>
      <prop name="Text">
       <prop name="en_US.utf8">___</prop>
       <prop name="en_US.iso88591">___</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">Plot configuration</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Plot configuration</prop>
       <prop name="en_US.iso88591">Plot configuration</prop>
      </prop>
     </prop>
     <prop name="PopupItem">
      <prop name="PopupItemId">saveas</prop>
      <prop name="Text">
       <prop name="en_US.utf8">Save plot settings as...</prop>
       <prop name="en_US.iso88591">Save plot settings as...</prop>
      </prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[bool controls = false;

main(string id) {
	string trendRunning;
	bool grid, isLog, legend, isRunning, enabledState, isOk;
	string minForLog;
	string maxPercentageForLog;
	dyn_bool axii = makeDynBool(false, false, false, false, false,false,false,false);
	string tempAxii, temp;
	dyn_float df;
	dyn_string ds, split, dsParameters, split2;
	string activeTrend, tempString;
	string ref = $sRefName, currentParameterValues;
	shape activeTrendShape, standardTrendShape, logTrendShape;
	dyn_string dsTemp, tempColour, exceptionInfo;
	dyn_string panelsList, plotShapes, plotData, modifiedPlotData, oldCurves, curvesVisible, parameters;
	dyn_dyn_string extendedPlotData;
	int i, length;
	
	string sDpName, title, proposedName;
	int currentTimeSettings;

	this.enabled(false);
				
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, plotShapes, plotData, exceptionInfo, FALSE);

// get the log and standard trend shape
	activeTrendShape = getShape(plotShapes[fwTrending_ACTIVE_TREND_NAME]);
	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

// get minforlog and maxpercentageforlog
	minForLog = plotData[fwTrending_PLOT_OBJECT_EXT_MIN_FOR_LOG];
	maxPercentageForLog = plotData[fwTrending_PLOT_OBJECT_EXT_MAX_PERCENTAGE_FOR_LOG];
	
// get the active trend shape
	activeTrendShape = getShape(plotShapes[fwTrending_ACTIVE_TREND_NAME]);
	
	switch(id) {
		case &quot;print&quot; : 
			printPanel(myModuleName(), myPanelName());
			break;
		case &quot;zoom&quot; : {
// open the zoom window
// get all the param and open the zoom window with the $param, the $sDpName and $sRefName are set to &quot;&quot; (only one plot)
// get the list of DPE
			dynAppend(dsParameters, &quot;$dsCurveDPE:&quot;+plotData[fwTrending_PLOT_OBJECT_DPES]);

// get the legend and cut it if too big, because the zoomed window contains the fwTrending/fwTrendingMultiplePlotCaption.pnl
			split = strsplit(plotData[fwTrending_PLOT_OBJECT_LEGENDS], &quot;;&quot;);		
			temp = &quot;&quot;;
			for(i=1;i&lt;=fwTrending_TRENDING_MAX_CURVE;i++) {
				if(strlen(split[i]) &gt;= fwTrending_ZOOMED_WINDOW_MAX_LEGEND_SIZE) {
// legend too big to for the zoomed window just take the leaf DPE.
					split2=strsplit(split[i], &quot;.&quot;);
					temp+=split2[dynlen(split2)]+&quot;;&quot;;
				}
				else
					temp+=split[i]+&quot;;&quot;;
			}
			dynAppend(dsParameters, &quot;$dsCurveLegend:&quot;+temp);

// get the tooltiptext
			dynAppend(dsParameters, &quot;$dsCurveToolTipText:&quot;+plotData[fwTrending_PLOT_OBJECT_EXT_TOOLTIPS]);

// get the curves ranges, format min:max
			dynAppend(dsParameters, &quot;$dsCurveRange:&quot;+plotData[fwTrending_PLOT_OBJECT_EXT_MIN_MAX_RANGE]);

// get the colors
			dynAppend(dsParameters, &quot;$dsCurveColor:&quot;+plotData[fwTrending_PLOT_OBJECT_COLORS]);
			dynAppend(dsParameters, &quot;$sForeColor:&quot;+plotData[fwTrending_PLOT_OBJECT_FORE_COLOR]);
			dynAppend(dsParameters, &quot;$sBackColor:&quot;+plotData[fwTrending_PLOT_OBJECT_BACK_COLOR]);

// get the DPE unit
			dynAppend(dsParameters, &quot;$dsUnit:&quot;+plotData[fwTrending_PLOT_OBJECT_EXT_UNITS]);

// get the curve type
			dynAppend(dsParameters, &quot;$dsCurvesType:&quot;+plotData[fwTrending_PLOT_OBJECT_CURVE_TYPES]);
			
// get the curve scale visibility state
			dynAppend(dsParameters, &quot;$dsCurveScaleVisible:&quot;+plotData[fwTrending_PLOT_OBJECT_AXII]);

// get the curve visibility
			dynAppend(dsParameters, &quot;$dsCurveVisible:&quot;+plotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN]);

			dynAppend(dsParameters, &quot;$bShowGrid:&quot;+plotData[fwTrending_PLOT_OBJECT_GRID]);

			dynAppend(dsParameters, &quot;$bShowLegend:&quot;+plotData[fwTrending_PLOT_OBJECT_LEGEND_ON]);

// get minforlog and maxpercentageforlog
			dynAppend(dsParameters, &quot;$fMinForLog:&quot; + plotData[fwTrending_PLOT_OBJECT_EXT_MIN_FOR_LOG]);
			dynAppend(dsParameters, &quot;$fMaxPercentageForLog:&quot; + plotData[fwTrending_PLOT_OBJECT_EXT_MAX_PERCENTAGE_FOR_LOG]);

// $sRefName is set to &quot;&quot; because in the zoomed window there is only one plot and one caption
			dynAppend(dsParameters, &quot;$sRefName:&quot;);

// $sDpName is set to &quot;&quot;, no possibility to configure or save the trend settings
			getValue(ref+&quot;trend.dpNameText&quot;, &quot;text&quot;, sDpName);
			dynAppend(dsParameters, &quot;$sDpName:&quot;);// + sDpName);

// get if log trend or not
			dynAppend(dsParameters, &quot;$bTrendLog:&quot;+plotData[fwTrending_PLOT_OBJECT_IS_LOGARITHMIC]);

// get the current time range			
			dynAppend(dsParameters, &quot;$sTimeRange:&quot;+ plotData[fwTrending_PLOT_OBJECT_TIME_RANGE]);
			
// get the zoom window title
			strreplace(plotData[fwTrending_PLOT_OBJECT_TITLE], &quot;\\_&quot;, &quot; &quot;);
			if(plotData[fwTrending_PLOT_OBJECT_TITLE]==&quot;&quot;)
			{ 
				plotData[fwTrending_PLOT_OBJECT_TITLE] = &quot;Trend Zoom&quot;;
			}
			dynAppend(dsParameters, &quot;$ZoomWindowTitle:&quot;+plotData[fwTrending_PLOT_OBJECT_TITLE]);

			getValue(ref+&quot;trend.parameterValues&quot;, &quot;text&quot;, currentParameterValues);
			dynAppend(dsParameters, &quot;$templateParameters:&quot;+currentParameterValues);

// open the zoomed window
			ChildPanelOnCentral(&quot;fwTrending/fwTrendingZoomedWindow.pnl&quot;, &quot;Zoomed Window: &quot; + plotData[fwTrending_PLOT_OBJECT_TITLE], 
				dsParameters
			);
			break;
		}
		case &quot;export&quot;: {
			getValue(ref+&quot;trend.parameterValues&quot;, &quot;text&quot;, currentParameterValues);
			fwTrending_pageExportTrend(makeDynString(ref), currentParameterValues);
			break;
		}
		case &quot;Legends&quot;:
			tempString = plotData[fwTrending_PLOT_OBJECT_LEGEND_ON];
			if((tempString == &quot;TRUE&quot;) || (tempString == TRUE))
				fwTrending_legendOnOff(ref, FALSE, ref + &quot;.&quot;, exceptionInfo);
			else
				fwTrending_legendOnOff(ref, TRUE, ref + &quot;.&quot;, exceptionInfo);
// end 
			break;
		case &quot;grid&quot;:
			tempString = plotData[fwTrending_PLOT_OBJECT_GRID];
			if((tempString == &quot;TRUE&quot;) || (tempString == TRUE))
				fwTrending_gridOnOff(ref, FALSE, ref + &quot;.&quot;, exceptionInfo);
			else
				fwTrending_gridOnOff(ref, TRUE, ref + &quot;.&quot;, exceptionInfo);
			break;
		case &quot;Controls&quot;:
			if(controls)	
				this.textItem(5, &quot;Controls&quot;);
			else
				this.textItem(5, &quot;Controls&quot; + &quot;  *&quot;);
			controls = !controls;
// added by Herve 
//			activeTrendShape.manageCommands(controls);
			standardTrendShape.manageCommands(controls);
			logTrendShape.manageCommands(controls);
// end 
			//setValue(&quot;TrendRef.normalTrend&quot;, &quot;manageCommands&quot;, controls);
			break;
		case &quot;Plot configuration&quot;:
			getValue(ref+&quot;trend.dpNameText&quot;, &quot;text&quot;, sDpName);

			fwTrending_convertStringToDyn(plotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN], curvesVisible, exceptionInfo); 
			_fwTrending_switchCurvesHiddenVisible(curvesVisible, exceptionInfo);
			fwTrending_convertDynToString(curvesVisible, plotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN], exceptionInfo); 

			fwDevice_getDefaultConfigurationPanels(fwTrending_PLOT, panelsList, exceptionInfo);

			ChildPanelOnModalReturn(panelsList[1] + &quot;.pnl&quot;,&quot;Plot Configuration&quot;,
				makeDynString(&quot;$Command:onlineedit&quot;, &quot;$sDpName:&quot; + sDpName,
											&quot;$dsPlotData:&quot; + plotData, &quot;$dsShowButtons:&quot; + makeDynString(&quot;ok&quot;, &quot;cancel&quot;)),0,0, df, ds);

			if(ds[1] != &quot;Cancel&quot;)
			{
				strreplace(ds[3], &quot; | &quot;, &quot;|&quot;);
				modifiedPlotData = strsplit(ds[3], &quot;|&quot;);
				for(i=1; i&lt;=fwTrending_SIZE_PLOT_OBJECT; i++)
				{
					modifiedPlotData[i] = strltrim(modifiedPlotData[i], &quot; &quot;);
					modifiedPlotData[i] = strrtrim(modifiedPlotData[i], &quot; &quot;);
				}

				fwTrending_convertStringToDyn(modifiedPlotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN], curvesVisible, exceptionInfo); 
				_fwTrending_switchCurvesHiddenVisible(curvesVisible, exceptionInfo);
				fwTrending_convertDynToString(curvesVisible, modifiedPlotData[fwTrending_PLOT_OBJECT_CURVES_HIDDEN], exceptionInfo); 

				setValue(ref+&quot;trend.trendInfo&quot;, &quot;items&quot;, modifiedPlotData);

				fwTrending_getRuntimePlotDataWithExtendedObject(ref, trendRunning, plotShapes, extendedPlotData, exceptionInfo, FALSE);
				activeTrendShape = getShape(plotShapes[fwTrending_ACTIVE_TREND_NAME]);

				fwTrending_convertStringToDyn(plotData[fwTrending_PLOT_OBJECT_DPES], oldCurves, exceptionInfo); 
				length = dynlen(oldCurves);
				if(length &gt; fwTrending_TRENDING_MAX_CURVE)
					length = fwTrending_TRENDING_MAX_CURVE;

				for(i=1; i&lt;=length; i++)
				{
					if(oldCurves[i] != extendedPlotData[fwTrending_PLOT_OBJECT_DPES][i])
					{
						activeTrendShape.disconnectDirectly(&quot;curve_&quot; + i);
						activeTrendShape.curveRemoveData(&quot;curve_&quot; + i, getCurrentTime());
					}
				}

				if((extendedPlotData[fwTrending_PLOT_OBJECT_IS_LOGARITHMIC][1] == &quot;TRUE&quot;) || (extendedPlotData[fwTrending_PLOT_OBJECT_IS_LOGARITHMIC][1] == TRUE))
				{
					isLog = TRUE;					
					setValue(ref+&quot;trend.activeTrendText&quot;, &quot;text&quot;, plotShapes[fwTrending_LOG_TREND_NAME]);
					plotShapes[fwTrending_ACTIVE_TREND_NAME] = plotShapes[fwTrending_LOG_TREND_NAME];
				}
				else
				{
					isLog = FALSE;
					setValue(ref+&quot;trend.activeTrendText&quot;, &quot;text&quot;, plotShapes[fwTrending_LINEAR_TREND_NAME]);
					plotShapes[fwTrending_ACTIVE_TREND_NAME] = plotShapes[fwTrending_LINEAR_TREND_NAME];
				}
														
				getValue(ref+&quot;trend.parameterValues&quot;, &quot;text&quot;, currentParameterValues);
				fwTrending_checkAndGetAllTemplateParameters(ref, extendedPlotData, fwTrending_PLOT, currentParameterValues, exceptionInfo, TRUE);
				setValue(ref+&quot;trend.parameterValues&quot;, &quot;text&quot;, currentParameterValues);

				_fwTrending_evaluateTemplate(currentParameterValues, extendedPlotData[fwTrending_PLOT_OBJECT_DPES], exceptionInfo);    
				_fwTrending_evaluateTemplate(currentParameterValues, extendedPlotData[fwTrending_PLOT_OBJECT_LEGENDS], exceptionInfo);    
				_fwTrending_evaluateTemplate(currentParameterValues, extendedPlotData[fwTrending_PLOT_OBJECT_EXT_TOOLTIPS], exceptionInfo);    
	
				fwTrending_convertUnicosDpeListToPvssDpeList(extendedPlotData[fwTrending_PLOT_OBJECT_DPES], extendedPlotData[fwTrending_PLOT_OBJECT_DPES], exceptionInfo);

				getValue(&quot;saveSettings&quot;, &quot;enabled&quot;, enabledState);
				fwTrending_initTrendWithObject(ref, plotShapes[fwTrending_ACTIVE_TREND_NAME], plotShapes, extendedPlotData, trendRunning, TRUE, exceptionInfo, TRUE);
				fwTrending_showStandardTrend(!isLog, plotShapes[fwTrending_LINEAR_TREND_NAME], plotShapes[fwTrending_LOG_TREND_NAME]);			
				fwTrending_initControlTrendButtons(extendedPlotData[fwTrending_PLOT_OBJECT_TIME_RANGE][1], ref, sDpName, extendedPlotData[fwTrending_PLOT_OBJECT_IS_LOGARITHMIC][1]);
				setValue(&quot;saveSettings&quot;, &quot;enabled&quot;, enabledState);
			}				
			break;
		case &quot;saveas&quot;:
			setValue(ref+&quot;trend.refreshTrend&quot;, &quot;text&quot;, &quot;FALSE&quot;);
			getValue(ref+&quot;trend.dpNameText&quot;, &quot;text&quot;, sDpName);
			proposedName = dpGetAlias(sDpName + &quot;.&quot;);
			if(proposedName == &quot;&quot;)
				proposedName = dpSubStr(sDpName, DPSUB_DP);
			if(proposedName == &quot;&quot;)
				proposedName = plotData[fwTrending_PLOT_OBJECT_TITLE];

			ChildPanelOnCentralReturn(&quot;fwTrending/fwTrendingSaveAsSelector.pnl&quot;, &quot;Save plot settings as...&quot;,
																	makeDynString(&quot;$sDpType:&quot; + fwTrending_PLOT, &quot;$sProposedName:&quot; + proposedName), df, ds);
			if(ds[1] == &quot;ok&quot;)
				fwTrending_saveCurrentSettings(ref, ds[2], fwTrending_PLOT, TRUE, TRUE, exceptionInfo, TRUE);		

			delay(0,REFRESH_DELAY);
			setValue(ref+&quot;trend.refreshTrend&quot;, &quot;text&quot;, &quot;TRUE&quot;);
			break;
	}
	if(dynlen(exceptionInfo)&gt;0)
		fwExceptionHandling_display(exceptionInfo);
		
	this.enabled(true);

}

]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="resetTrendZoomButton" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">27</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">268 0</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">Reset zooming on Y axis and Time axis</prop>
     <prop name="en_US.iso88591">Reset zooming on Y axis and Time axis</prop>
    </prop>
    <prop name="Hotkey">Ctrl+R</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">268 0</prop>
    <prop name="Size">24 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">1:1</prop>
     <prop name="en_US.iso88591">1:1</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string ref = $sRefName;

	fwTrending_trendUnzoom(ref);
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="rigthArrow" shapeType="TEXT_FIELD">
   <properties>
    <prop name="serialId">35</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">400 1</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">FwTrendingFaceplateForeground</prop>
    <prop name="BackColor">FwTrendingFaceplateBackground</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Courier New,-1,12,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Courier New,-1,12,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">400 1</prop>
    <prop name="Size">23 19</prop>
    <prop name="BorderStyle">None</prop>
    <prop name="Editable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape layerId="0" Name="leftArrow" shapeType="TEXT_FIELD">
   <properties>
    <prop name="serialId">36</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">291 1</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">FwTrendingFaceplateForeground</prop>
    <prop name="BackColor">FwTrendingFaceplateBackground</prop>
    <prop name="TabOrder">8</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Courier New,-1,12,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Courier New,-1,12,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">291 1</prop>
    <prop name="Size">22 19</prop>
    <prop name="BorderStyle">None</prop>
    <prop name="Editable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape layerId="0" Name="curvesTimeRange" shapeType="TEXT_FIELD">
   <properties>
    <prop name="serialId">37</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">313 2</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">FwTrendingFaceplateForeground</prop>
    <prop name="BackColor">FwTrendingFaceplateBackground</prop>
    <prop name="TabOrder">9</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">313 2</prop>
    <prop name="Size">87 18</prop>
    <prop name="BorderStyle">None</prop>
    <prop name="Editable">False</prop>
    <prop name="TextFormat">[15s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape layerId="0" Name="xzoomin" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">42</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 25</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="Hotkey">Ctrl+6</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,12,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,12,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 25</prop>
    <prop name="Size">71 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">xzoomin</prop>
     <prop name="en_US.iso88591">xzoomin</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string activeTrend, trendRunning;
	string ref = $sRefName;
	shape standardTrendShape, logTrendShape;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);

	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

	standardTrendShape.trendTimePlus();
	standardTrendShape.trendRefresh();

	logTrendShape.trendTimePlus();
	logTrendShape.trendRefresh();
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="xzoomout" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">43</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 45</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">14</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="Hotkey">Ctrl+4</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,12,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,12,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 45</prop>
    <prop name="Size">71 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">xzoomout</prop>
     <prop name="en_US.iso88591">xzoomout</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string activeTrend, trendRunning;
	string ref = $sRefName;
	shape standardTrendShape, logTrendShape;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);

	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

	standardTrendShape.trendTimeMinus();
	standardTrendShape.trendRefresh();

	logTrendShape.trendTimeMinus();
	logTrendShape.trendRefresh();
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="yzoomin" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">44</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">80 25</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">15</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="Hotkey">Ctrl+2</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,12,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,12,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">80 25</prop>
    <prop name="Size">71 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">yzoomin</prop>
     <prop name="en_US.iso88591">yzoomin</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string activeTrend, trendRunning;
	string ref = $sRefName;
	shape standardTrendShape, logTrendShape;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);

	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

	standardTrendShape.trendValuePlus();
	standardTrendShape.trendRefresh();

	logTrendShape.trendValuePlus();
	logTrendShape.trendRefresh();
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="yzoomout" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">45</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">80 45</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">16</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="Hotkey">Ctrl+8</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,12,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,12,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">80 45</prop>
    <prop name="Size">71 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">yzoomout</prop>
     <prop name="en_US.iso88591">yzoomout</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	string activeTrend, trendRunning;
	string ref = $sRefName;
	shape standardTrendShape, logTrendShape;
	dyn_string trendShapeStr, plotData, exceptionInfo;
	
	fwTrending_getRuntimePlotDataWithStrings(ref, trendRunning, trendShapeStr, plotData, exceptionInfo, FALSE);

	standardTrendShape = getShape(plotShapes[fwTrending_LINEAR_TREND_NAME]);
	logTrendShape = getShape(plotShapes[fwTrending_LOG_TREND_NAME]);

	standardTrendShape.trendRefresh();
	standardTrendShape.trendValueMinus();

	logTrendShape.trendRefresh();
	logTrendShape.trendValueMinus();
}]]></script>
   </events>
  </shape>
 </shapes>
</panel>
