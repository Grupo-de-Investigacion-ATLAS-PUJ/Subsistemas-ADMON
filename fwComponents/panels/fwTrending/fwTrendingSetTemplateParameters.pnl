<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8">Trending Object Configuration</prop>
   <prop name="en_US.iso88591">Trending Object Configuration</prop>
  </prop>
  <prop name="Size">440 231</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">0 0</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[#uses &quot;fwTrending/fwTrending.ctl&quot;
#uses &quot;fwTrending/fwTrendingTree.ctl&quot;

fillTable(dyn_string templateParameters, dyn_string values, dyn_string &amp;exceptionInfo)
{
	int i, length, rows;
//	parameterTable.currentCell(0, 2);
	parameterTable.deleteAllLines;
	
	length = dynlen(templateParameters);
	for(i=1; i&lt;=length; i++)
	{
		parameterTable.appendLine(&quot;parameter&quot;, templateParameters[i], &quot;dp&quot;, &quot; ...&quot;, &quot;value&quot;, values[i]);
		rows = parameterTable.lineCount;
		parameterTable.cellBackColRC(rows-1, &quot;value&quot;, &quot;_Window&quot;);
	}
	
	parameterTable.lineVisible(0);
}]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	int i, length;
	string parameterString;
	dyn_string temp, paramValues, neededParameters, exceptionInfo;
	dyn_dyn_string parameters, configurationData;

	switch($mode)
	{
		case &quot;set&quot;:
			helpText.visible = TRUE;
			heading.text = &quot;The following template parameters are currently undefined:&quot;;
			break;
		default:
			undefinedButton.visible = TRUE;
			heading.text = &quot;Please set the values for the following template parameters:&quot;;
			break;
	}

	parameterString = $requiredParameters;
	strreplace(parameterString, &quot; | &quot;, &quot;|&quot;);
	neededParameters = strsplit(parameterString, &quot;|&quot;);

	_fwTrending_splitParameters($templateParameters, parameters);
			
	length = dynlen(parameters[1]);
	for(i=1; i&lt;=length; i++)
	{
		if(dynContains(neededParameters, parameters[1][i])&gt;0)
			paramValues[dynContains(neededParameters, parameters[1][i])] = parameters[2][i];
	}

	length = dynlen(neededParameters);

	if(dynlen(paramValues) != length)
		paramValues[length] = &quot;&quot;;
		
	for(i=1; i&lt;=length; i++)
	{
		if(paramValues[i] == &quot;&quot;)
			paramValues[i] = fwTrending_TEMPLATE_OPEN + neededParameters[i] + fwTrending_TEMPLATE_CLOSE;
	}

	fillTable(neededParameters, paramValues, exceptionInfo);

	if(dynlen(exceptionInfo)&gt;0)
		fwExceptionHandling_display(exceptionInfo);

}]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape layerId="0" Name="panelHeading" shapeType="PRIMITIVE_TEXT">
   <properties>
    <prop name="serialId">17</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 27</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">10</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,19,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,19,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Template Parameters</prop>
     <prop name="en_US.iso88591">Template Parameters</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape layerId="0" Name="heading" shapeType="PRIMITIVE_TEXT">
   <properties>
    <prop name="serialId">18</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 40</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">22 42</prop>
    <prop name="Size">387 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">The following template parameters are currently undefined:</prop>
     <prop name="en_US.iso88591">The following template parameters are currently undefined:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape layerId="0" Name="helpText" shapeType="PRIMITIVE_TEXT">
   <properties>
    <prop name="serialId">19</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 186</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">22 188</prop>
    <prop name="Size">187 37</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Press Cancel to leave the
parameters undefined.</prop>
     <prop name="en_US.iso88591">Press Cancel to leave the
parameters undefined.</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape layerId="0" Name="Button1" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">6</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">230 190</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">230 190</prop>
    <prop name="Size">91 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OK</prop>
     <prop name="en_US.iso88591">OK</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	int i, length;
	string refName, parameters, parameterName, parameterValue, dpType, valueCopy;
	dyn_string dollars, values, exceptionInfo;
	
	length = parameterTable.lineCount;
	for(i=0; i&lt;length; i++)
	{
		parameterName = parameterTable.cellValueRC(i, &quot;parameter&quot;);
		parameterValue = parameterTable.cellValueRC(i, &quot;value&quot;);

		if($mode != &quot;set&quot;)
		{
			valueCopy = strltrim(parameterValue, fwTrending_TEMPLATE_OPEN);
			valueCopy = strrtrim(valueCopy, fwTrending_TEMPLATE_CLOSE);

			if(parameterName != valueCopy)
				parameters += parameterName + &quot;=&quot; + parameterValue + &quot;,&quot;;
		}
		else
			parameters += parameterName + &quot;=&quot; + parameterValue + &quot;,&quot;;
	}

  PanelOffReturn(makeDynFloat(), makeDynString(&quot;ok&quot;, parameters));
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="Button2" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">7</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">510 330</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">330 190</prop>
    <prop name="Size">91 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Cancel</prop>
     <prop name="en_US.iso88591">Cancel</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  PanelOffReturn(makeDynFloat(), makeDynString(&quot;cancel&quot;));
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="parameterTable" shapeType="TABLE">
   <properties>
    <prop name="serialId">16</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 70</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">9</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">20 70</prop>
    <prop name="Size">401 111</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">26</prop>
    <prop name="RowHeaderWidth">73</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">AlwaysOff</prop>
    <prop name="Column">
     <prop name="Name">parameter</prop>
     <prop name="Width">132</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Template Parameter</prop>
      <prop name="en_US.iso88591">Template Parameter</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">dp</prop>
     <prop name="Width">30</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">DP</prop>
      <prop name="en_US.iso88591">DP</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">value</prop>
     <prop name="Width">215</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Value</prop>
      <prop name="en_US.iso88591">Value</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int row, string column, string value)
{
	string dpName;
	
	if(column == &quot;dp&quot;)
	{
		dpSelector(dpName, false, &quot;ALL_SYSTEM_NAME_SYS&quot;);
		if(dpName!=&quot;&quot;)
			this.cellValueRC(row, &quot;value&quot;, dpName);
	}
}]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.namedColumnEditable(&quot;parameter&quot;, FALSE);
	this.namedColumnEditable(&quot;dp&quot;, FALSE);
}]]></script>
   </events>
  </shape>
  <shape layerId="0" Name="undefinedButton" shapeType="PUSH_BUTTON">
   <properties>
    <prop name="serialId">20</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 190</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">20 190</prop>
    <prop name="Size">121 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Leave undefined</prop>
     <prop name="en_US.iso88591">Leave undefined</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  PanelOffReturn(makeDynFloat(), makeDynString(&quot;ok&quot;, &quot;&quot;));
}]]></script>
   </events>
  </shape>
  <reference referenceId="0" Name="" parentSerial="-1">
   <properties>
    <prop name="FileName">objects/fwGeneral/fwHelpButton.pnl</prop>
    <prop name="Location">340 0</prop>
    <prop name="Geometry">1 0 0 1 54 10</prop>
    <prop name="TabOrder">11</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sPanelRelativePath</prop>
      <prop name="Value">fwTrending/fwTrendingSetTemplateParameters</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
 </shapes>
</panel>
