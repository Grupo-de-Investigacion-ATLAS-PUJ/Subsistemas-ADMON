<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8">(NoName)</prop>
  </prop>
  <prop name="Size">308 427</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">10 10</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="StartZoomPoint">0 0</prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[#uses &quot;fwAlarmHandling/fwAlarmHandling.ctl&quot;
#uses &quot;fwAlarmHandling/fwAlarmHandlingScreen.ctl&quot;
#uses &quot;fwAlarmHandling/fwAlarmHandlingScreenGroups.ctl&quot;
#uses &quot;fwAlarmHandling/fwAlarmScreen.ctl&quot;
#uses &quot;fwAlarmHandling/fwAlarmScreenGeneric.ctl&quot;

setAccessControls()
{
  accessControlOn.enabled = showAsQuickFilter.state(0);
  accessRight.enabled = (accessControlOn.state(0) &amp;&amp; showAsQuickFilter.state(0));
  accessRightSelection.enabled = (accessControlOn.state(0) &amp;&amp; showAsQuickFilter.state(0));
}
  
okButtonCode()
{
	string filter, filterDp;
	dyn_float df;
	dyn_string ds, exceptionInfo;

	filter = filterField.text;
	filterDp = fwAlarmHandlingScreen_FILTER_DP_PREFIX + filter;
	
	switch(strtolower($mode))
	{
		case &quot;save&quot;:
			if(dpExists(filterDp))
			{
				ChildPanelOnCentralReturn(&quot;fwGeneral/fwOkCancel.pnl&quot;, &quot;Overwrite existing filter...&quot;,
																		makeDynString(&quot;$text:Are you sure you want to overwrite this filter (&quot; + filter + &quot;)?&quot;), df, ds);
				if(ds[1] == &quot;cancel&quot;)
					return;
			}
			else
			{
				if(dpIsLegalName(filterDp))
					dpCreate(filterDp, fwAlarmHandlingScreen_FILTER_DP_TYPE);
				else
					fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The chosen filter name contains invalid characters e.g. spaces, tabs or .:;,[]{}?* \\ / %!()$@&quot;, &quot;&quot;);
			}
			break;
		case &quot;delete&quot;:
			if(dpExists(filterDp))
			{
				ChildPanelOnCentralReturn(&quot;fwGeneral/fwOkCancel.pnl&quot;, &quot;Delete filter...&quot;,
																		makeDynString(&quot;$text:Are you sure you want to delete this filter (&quot; + filter + &quot;)?&quot;), df, ds);
				if(ds[1] == &quot;cancel&quot;)
					return;
			}
			else
					fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The filter to delete does not exist.&quot;, &quot;&quot;);
			break;
		default:
			if(!dpExists(filterDp))
				fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The chosen filter does not exist.&quot;, &quot;&quot;);
			break;
	}
	
	if(dynlen(exceptionInfo) &gt; 0)
		fwExceptionHandling_display(exceptionInfo);
	else
		PanelOffReturn(makeDynFloat(1), makeDynString(filterDp, showAsQuickFilter.state(0), accessControlOn.state(0), accessRight.text));
}]]></script>
  <script name="Close" isEscaped="1"><![CDATA[main()
{
	int i;
}]]></script>
  <script name="Terminate" isEscaped="1"><![CDATA[main()
{
	int i;
}]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	int i, length;
	dyn_string configDpNames, configNames;
	
	configDpNames = dpNames(fwAlarmHandlingScreen_FILTER_DP_PREFIX + &quot;*&quot;, fwAlarmHandlingScreen_FILTER_DP_TYPE);
	
	length = dynlen(configDpNames);
	
	for(i=1; i&lt;=length; i++)
	{
		configDpNames[i] = dpSubStr(configDpNames[i], DPSUB_DP);
		strreplace(configDpNames[i], fwAlarmHandlingScreen_FILTER_DP_PREFIX, &quot;&quot;);
	}
		
	savedConfigsTable.deleteAllLines();
	savedConfigsTable.appendLines(dynlen(configDpNames), &quot;filterName&quot;, configDpNames);
		
//	savedConfigsList.items = configDpNames;
//	savedConfigsList.selectedPos(0);
	
	switch(strtolower($mode))
	{
		case &quot;save&quot;:
			title.text = &quot;Save filter as...&quot;;
			okButton.text = &quot;Save&quot;;
			filterFieldCaption.text = &quot;Save filter as:&quot;;
                        showAsQuickFilter.visible = TRUE;
                        accessControlOn.visible = TRUE;
                        accessRight.visible = TRUE;
                        accessRightSelection.visible = TRUE;
			break;
		case &quot;delete&quot;:
			title.text = &quot;Choose a filter to delete...&quot;;
			okButton.text = &quot;Delete&quot;;
			filterFieldCaption.text = &quot;Filter to delete:&quot;;
                        moveObjects();
			break;
		default:
			title.text = &quot;Choose a filter to load...&quot;;
			okButton.text = &quot;Load&quot;;
			filterFieldCaption.text = &quot;Filter to load:&quot;;
                        moveObjects();
			break;
	}
}

moveObjects()
{
  int x, y;
  
  getValue(&quot;filterField&quot;, &quot;position&quot;, x, y);
  setValue(&quot;filterField&quot;, &quot;position&quot;, x, y + 90);

  getValue(&quot;filterFieldCaption&quot;, &quot;position&quot;, x, y);
  setValue(&quot;filterFieldCaption&quot;, &quot;position&quot;, x, y + 90);

  getValue(&quot;savedConfigsTable&quot;, &quot;size&quot;, x, y);
  setValue(&quot;savedConfigsTable&quot;, &quot;size&quot;, x, y + 90);
}]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="title" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">1</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,19,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(TITLE)</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Text2" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">2</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 40</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">22 42</prop>
    <prop name="Size">167 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Existing filters:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="filterFieldCaption" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">3</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 230</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">4</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">22 232</prop>
    <prop name="Size">167 17</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">(Save Filter As:)</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">False</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="filterField" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">4</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 250</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">20 250</prop>
    <prop name="Size">271 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="cancelButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">5</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">210 380</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="Hotkey">Esc</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">210 380</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Cancel</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOffReturn(makeDynFloat(0), makeDynString());
}]]></script>
   </events>
  </shape>
  <shape Name="okButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">6</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">120 380</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">120 380</prop>
    <prop name="Size">81 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Save/Load</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	okButtonCode();
}]]></script>
   </events>
  </shape>
  <shape Name="savedConfigsTable" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">7</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 60</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">20 60</prop>
    <prop name="Size">271 171</prop>
    <prop name="ShowColumnHeader">False</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">16</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">None</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">AlwaysOff</prop>
    <prop name="Column">
     <prop name="Name">filterName</prop>
     <prop name="Width">230</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Filter Name</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int row, string column, string value)
{
        bool isQuickFilter;
        string accessRightRequired, dpName;
        dyn_string exceptionInfo;
        
	filterField.text = value;
        
        if(showAsQuickFilter.visible)
        {
          if(dpExists(fwAlarmHandlingScreen_FILTER_DP_PREFIX + value))
            dpName = fwAlarmHandlingScreen_FILTER_DP_PREFIX + value;
          else
            dpName = value;
          
          fwAlarmHandlingScreen_loadQuickFilterOptions(dpName, isQuickFilter, accessRightRequired, exceptionInfo);
          showAsQuickFilter.state(0) = isQuickFilter;
          accessControlOn.state(0) = (accessRightRequired != &quot;&quot;);
          accessRight.text = accessRightRequired;
          setAccessControls();
        }
}]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.tableMode(TABLE_SELECT_BROWSE);
	this.selectByClick(TABLE_SELECT_LINE);
}]]></script>
    <script name="DoubleClicked" isEscaped="1"><![CDATA[main()
{
	okButtonCode();
}]]></script>
   </events>
  </shape>
  <shape Name="showAsQuickFilter" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">8</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 277</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">9</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">20 277</prop>
    <prop name="Size">161 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Show in Quick Filter list</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, int state)
{
  setAccessControls();
}]]></script>
   </events>
  </shape>
  <shape Name="accessRight" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">9</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">44 330</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">44 330</prop>
    <prop name="Size">171 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="accessRightSelection" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">10</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">220 327</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">Leave filter unchanged</prop>
    </prop>
    <prop name="Hotkey">Esc</prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">220 327</prop>
    <prop name="Size">71 31</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Choose</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
  dyn_string privileges, exceptionInfo;
		
  privileges[1] = accessRight.text;
  if(isFunctionDefined(&quot;fwAccessControl_selectPrivileges&quot;))
  {
    fwAccessControl_selectPrivileges(privileges, &quot;Please choose access right&quot;);
    if(dynlen(privileges))
      accessRight.text = privileges[1];    
  }
  else
  {
    fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;The access control component is not installed.&quot;, &quot;&quot;);
    fwExceptionHandling_display(exceptionInfo); 
  }
}]]></script>
   </events>
  </shape>
  <shape Name="accessControlOn" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">12</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 302</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">17</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">20 302</prop>
    <prop name="Size">221 24</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Only for users with access right:</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, int state)
{
  setAccessControls();
}]]></script>
   </events>
  </shape>
 </shapes>
</panel>
