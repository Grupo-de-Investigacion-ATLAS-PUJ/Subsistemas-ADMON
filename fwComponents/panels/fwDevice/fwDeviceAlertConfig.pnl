<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8">(NoName)</prop>
   <prop name="en_US.iso88591">(NoName)</prop>
  </prop>
  <prop name="Size">685 450</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">30 30</prop>
  <prop name="InitAndTermRef">False</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[
// ------------------------------------- ScopeLib -------------------------------------------------

string panelName;
string panelBarTitle;
string config;
int index;

// ------------------------------------------------------------------------------------------------

/**
  Loads all necessary information to be shown in the table and populates the table with it.
*/
initTable()
{
	int i, configType;
	string dpe, ranges, typeName, model;
	dyn_int limitNumbers;
	dyn_float limitValues;
	dyn_string exceptionInfo;
	dyn_dyn_string elementsAndProperties;

	// init global variables
	panelName = &quot;fwConfigs/fwAlertConfigPopup.pnl&quot;;
	panelBarTitle = &quot;Alert configuration&quot;;
	config = &quot;alert_hdl&quot;;
	index = fwDevice_ALERT_INDEX;
	
	fwDevice_getModel(makeDynString($sDpName), model, exceptionInfo);

	fwDevice_getConfigElements(dpTypeName($sDpName), index, elementsAndProperties, exceptionInfo, model);
	
	Table1.deleteAllLines();
	Table1.selectByClick(TABLE_SELECT_LINE);
	Table1.tableMode(TABLE_SELECT_MULTIPLE);	

	for (i = 1; i &lt;= dynlen(elementsAndProperties[1]); i++) 
	{
		dpe = $sDpName + elementsAndProperties[1][i];
    	
		dpGet(dpe + &quot;:_&quot; + config + &quot;.._type&quot;, configType);
	
		getTypeAndRanges(dpe, typeName, ranges, exceptionInfo);
		
		if(configType == DPCONFIG_NONE)
			Table1.appendLine(&quot;conf&quot;, &quot;No&quot;, &quot;elements&quot;, elementsAndProperties[1][i], &quot;type&quot;, typeName, &quot;ranges&quot;, ranges);
		else
			Table1.appendLine(&quot;conf&quot;, &quot;Yes&quot;, &quot;elements&quot;, elementsAndProperties[1][i], &quot;type&quot;, typeName, &quot;ranges&quot;, ranges);
	}
	Table1.lineVisible(0);
	
/*	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
	}*/
}

// ------------------------------------------------------------------------------------------------

/**
  The user gets notified whether a summary alarm is existent for the datapoint loaded.
*/
initMessageText()
{
	int configType;	
		
	dpGet($sDpName + &quot;.:_&quot; + config + &quot;.._type&quot;, configType);

	if(configType == DPCONFIG_NONE)
		summaryAlarmInfoLabel.text = &quot;This device does not have a summary alarm. You can create one in the summary alarm panel.&quot;;
	else
		summaryAlarmInfoLabel.text = &quot;This device has got a summary alarm. If you define an alarm, it will be added to its summary.&quot;;	
}

// ------------------------------------------------------------------------------------------------

/**
  Everythime the alarm config of a DPE was altered, the information in the table needs to be updated.

@param [in] sTableName       string, name of the table shape
@param [in] iRow             int, number of the current row
*/
updateRow(string sTableName, int iRow)
{
	int configType, dpConfigType;
	string dpe, ranges, typeName;
	shape tableShape = getShape(sTableName);
	dyn_string exceptionInfo, line = tableShape.getLineN(iRow);			

	dpe = $sDpName + line[2]; 
	
	// update the ranges
	getTypeAndRanges(dpe, typeName, ranges, exceptionInfo);
	tableShape.cellValueRC(iRow, &quot;ranges&quot;, ranges); 

	// see if config exists	
	dpGet(	dpe + &quot;:_&quot; + config + &quot;.._type&quot;, configType,
			$sDpName + &quot;.:_&quot; + config + &quot;.._type&quot;, dpConfigType);					

	if(configType == DPCONFIG_NONE)
	{
		tableShape.cellValueRC(iRow, &quot;conf&quot;, &quot;No&quot;);
	}
	else
	{
		tableShape.cellValueRC(iRow, &quot;conf&quot;, &quot;Yes&quot;);
	}
	
/*	if(dynlen(exceptionInfo) &gt; 0)
		fwExceptionHandling_display(exceptionInfo);
*/
}

// ------------------------------------------------------------------------------------------------

/**
  Shows modal dialog allowing the user to change alarm settings for the selected DPE.

@param [in] diRows           dyn_int, numbers of the selected rows
*/
configureElement(dyn_int diRows)
{
	int i;
	dyn_float returnedValues;
	dyn_string elements, line, returnedText, exceptionInfo;

	enableButtons(FALSE);

	for (i = 1; i &lt;= dynlen(diRows); i++) 
	{	
		line = Table1.getLineN(diRows[i]);			
		dynAppend(elements, $sDpName + line[2]);
	}
	
	if(dynlen(elements) &lt;= 0)
	{
		fwException_raise(	exceptionInfo, 
							&quot;WARNING&quot;, 
							&quot;Select at least one element.&quot;,
							&quot;&quot;);
		fwExceptionHandling_display(exceptionInfo);
		enableButtons(TRUE);
		return;
	}
	
	if(getPath(PANELS_REL_PATH, panelName) == &quot;&quot;)
	{
		fwException_raise(	exceptionInfo, 
							&quot;WARNING&quot;, 
							&quot;The panel \&quot;&quot; + panelName + &quot;\&quot; \ncould not be found&quot;,
							&quot;&quot;);
		fwExceptionHandling_display(exceptionInfo);
		enableButtons(TRUE);
		return;
	}
	ChildPanelOnCentralModalReturn(	panelName,
									panelBarTitle,
									makeDynString(	&quot;$sDpName:&quot; + $sDpName,
													&quot;$sDpe:&quot; + elements,
													&quot;$sSummaryDpe:.&quot;),
									returnedValues, 
									returnedText);
	
	for (i = 1; i &lt;= dynlen(diRows); i++) 
	{	
		updateRow(&quot;Table1&quot;, diRows[i]);
	}						
	
	enableButtons(TRUE);
}

// ------------------------------------------------------------------------------------------------

/**
  Enables or disables the apply buttons.

@param [in] bEnabled         bool, intended state of the buttons
*/
enableButtons(bool bEnabled)
{
	applySelectedButton.enabled(bEnabled);
	applyAllButton.enabled(bEnabled);
	closeButton.enabled(bEnabled);
}

// ------------------------------------------------------------------------------------------------

/**
  Loads the type and range of a given DPE and returns it.
  
@param [in]  sDpe            string, name of the DPE
@param [out] sType           string, type of the DPE
@param [out] sRanges         string, range of the DPE
@param [out] exceptionInfo   dyn_string, gives back exception that might have occured
*/
getTypeAndRanges(string sDpe, string &amp;sType, string &amp;sRanges, dyn_string &amp;exceptionInfo)
{	
	int iRanges, alertConfigType;
	dyn_int limitNumbers;
	dyn_float limitValues;
	
	// get the element type name
	fwConfigs_getDpeTypeText(sDpe, sType, exceptionInfo);

	// get alert ranges if dpe has an analog alert
  dpGet(sDpe + &quot;:_alert_hdl.._type&quot;, alertConfigType);
        
  if (alertConfigType == DPCONFIG_ALERT_NONBINARYSIGNAL)
	{
		fwAlertConfig_getLimits(sDpe, limitNumbers, limitValues, exceptionInfo);
		if(dynlen(limitNumbers) &gt; 0)
    {
			iRanges = dynlen(limitNumbers) + 1;
    }
		else
    {
			iRanges = 0;
    }
		sRanges = iRanges;
	}
	else
	{
		sRanges = &quot;N/A&quot;;
	}
}

// ------------------------------------------------------------------------------------------------

/**
  Adjust action buttons depending on the context the panel is opened from.
  
@param [in] bEmbeddedPanel   bool, panel is embedded or stand-alone
*/
void showCloseButton(bool bEmbeddedPanel)
{
  if(bEmbeddedPanel)
	{
		closeButton.visible = FALSE;
    positionApplyButtons();
	}
	else
	{
		closeButton.visible = TRUE;
	}
}

// ------------------------------------------------------------------------------------------------

/**
  Re-positioning of some buttons is necessary depending on the context the panel is opened from.
*/
void positionApplyButtons()
{
  int xPos, yPos;
	
  getValue(&quot;applySelectedButton&quot;, &quot;position&quot;, xPos, yPos);
  applySelectedButton.position(xPos+83, yPos);
  getValue(&quot;applyAllButton&quot;, &quot;position&quot;, xPos, yPos);
  applyAllButton.position(xPos+83, yPos);
}

// --------------------------------- End of ScopeLib ----------------------------------------------


]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	initTable();
	initMessageText();
  
  if(isDollarDefined(&quot;$bHierarchyBrowser&quot;))
	{
    showCloseButton($bHierarchyBrowser);
  }
  
  dpname.text = $sDpName;
}

]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="redundancyInfoBg" shapeType="RECTANGLE" layerId="0">
   <properties>
    <prop name="serialId">125</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">0 650</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">grey</prop>
    <prop name="BackColor">grey</prop>
    <prop name="TabOrder">122</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">0 73</prop>
    <prop name="Size">685 23</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="bgRectangle" shapeType="RECTANGLE" layerId="0">
   <properties>
    <prop name="serialId">123</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 530</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_Transparent</prop>
    <prop name="BackColor">FwCorporateColor</prop>
    <prop name="TabOrder">120</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">-1 -1</prop>
    <prop name="Size">1270 31</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="title" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">0</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">14 19</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">white</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">10 4</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,19,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,19,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Alarm Configuration</prop>
     <prop name="en_US.iso88591">Alarm Configuration</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="dpname" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">111</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">21 40</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">34</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">Device name</prop>
     <prop name="en_US.iso88591">Device name</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 40</prop>
    <prop name="Size">665 23</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Table1" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">78</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">-334 -414.4238805970149</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 106</prop>
    <prop name="Size">665 299</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">20</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">AlwaysOn</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">conf</prop>
     <prop name="Width">80</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Configured</prop>
      <prop name="en_US.iso88591">Configured</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">elements</prop>
     <prop name="Width">325</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Element</prop>
      <prop name="en_US.iso88591">Element</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">type</prop>
     <prop name="Width">120</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Type</prop>
      <prop name="en_US.iso88591">Type</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">ranges</prop>
     <prop name="Width">120</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Ranges</prop>
      <prop name="en_US.iso88591">Ranges</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int xpos,string columnName,string value)
{
	if(columnName == &quot;elements&quot;)
		configureElement(makeDynInt(xpos));
}
]]></script>
   </events>
  </shape>
  <shape Name="applySelectedButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">117</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">320 415</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">117</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">320 415</prop>
    <prop name="Size">150 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Configure selected ...</prop>
     <prop name="en_US.iso88591">Configure selected ...</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	configureElement(Table1.getSelectedLines);
}]]></script>
   </events>
  </shape>
  <shape Name="applyAllButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">118</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">477 415</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">118</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">477 415</prop>
    <prop name="Size">115 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Configure all ...</prop>
     <prop name="en_US.iso88591">Configure all ...</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	int i;
	dyn_int lineNumbers;

	for (i = 1; i &lt;= Table1.lineCount(); i++) 
	{
		lineNumbers[i] = i - 1;
	}
	
	configureElement(lineNumbers);
}]]></script>
   </events>
  </shape>
  <shape Name="closeButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">119</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">600 415</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">119</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">600 415</prop>
    <prop name="Size">75 25</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Close</prop>
     <prop name="en_US.iso88591">Close</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOff();
}]]></script>
   </events>
  </shape>
  <reference parentSerial="-1" Name="Group2" referenceId="0">
   <properties>
    <prop name="FileName">objects/fwGeneral/fwHelpButton.pnl</prop>
    <prop name="Location">632 10</prop>
    <prop name="Geometry">1 0 0 1 18 -8</prop>
    <prop name="TabOrder">119</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sPanelRelativePath</prop>
      <prop name="Value">fwDevice/fwDeviceAlertConfig</prop>
     </prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
   </properties>
  </reference>
  <shape Name="summaryAlarmInfoLabel" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">124</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">64 77</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">white</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">121</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">64 77</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,10,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">This device does not have a summary alarm. You can create one in the summary alarm panel.</prop>
     <prop name="en_US.iso88591">This device does not have a summary alarm. You can create one in the summary alarm panel.</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
 </shapes>
</panel>
