<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8"> </prop>
   <prop name="en_US.iso88591"> </prop>
  </prop>
  <prop name="Size">901 700</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">10 10</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">96</prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[#uses &quot;fwConfigs/fwPeriphAddressSNMP.ctl&quot;

const int DPE_COLUMN_INDEX = 2;

const string ELEMENTS_MODE = &quot;ELEMENTS&quot;;
const string ELEMENTS_MODE_TABLE = &quot;elementsTable&quot;;
const string PANELS_MODE = &quot;PANELS&quot;;
const string PANELS_MODE_TABLE = &quot;panelsTable&quot;;
const string GENERAL_MODE = &quot;GENERAL&quot;;
const string GENERAL_MODE_TABLE = &quot;generalTable&quot;;
const string ADDRESSGENERAL_MODE = &quot;ADDRESSGENERAL&quot;;
const string ADDRESSGENERAL_MODE_TABLE = &quot;addressGeneralTable&quot;;
const string ADDRESSOPCGENERAL_MODE = &quot;ADDRESSOPCGENERAL&quot;;
const string ADDRESSOPCGENERAL_MODE_TABLE = &quot;addressOpcGeneralTable&quot;;
const string ADDRESSDIMGENERAL_MODE = &quot;ADDRESSDIMGENERAL&quot;;
const string ADDRESSDIMGENERAL_MODE_TABLE = &quot;addressDimGeneralTable&quot;;
const string ADDRESSS7GENERAL_MODE = &quot;ADDRESSS7GENERAL&quot;;
const string ADDRESSS7GENERAL_MODE_TABLE = &quot;addressS7GeneralTable&quot;;
const string ADDRESSSNMPGENERAL_MODE = &quot;ADDRESSSNMPGENERAL&quot;;
const string ADDRESSSNMPGENERAL_MODE_TABLE = &quot;addressSNMPGeneralTable&quot;;
const string ADDRESSOPCUAGENERAL_MODE = &quot;ADDRESSOPCUAGENERAL&quot;;
const string ADDRESSOPCUAGENERAL_MODE_TABLE = &quot;addressOPCUAGeneralTable&quot;;

mapping modeToTable;

string definitionDp;
string copyDefinitionDp;
string selectedGroup;

dyn_anytype copiedLine;	// used as clipboard when copying a line
dyn_string 	definitionElementsWithoutGroups, 	// definitionElements without the groups
						definitionElementsGroups,
						visibleDefinitionElements;			// definitionElements that have to be displayed

dyn_dyn_string definitionElements, generalDefinitionElements;

dyn_string selectedButtons;

init()
{
	string deviceType, deviceDpType, defDp;
	dyn_string exceptionInfo, deviceDefinitionDps;
	dyn_dyn_string types;
	
	fwOpenProgressBar(&quot;Initializing...&quot;, &quot;Initializing...&quot;, 1, 0);
	
	initDefinitionElements();
	initGroups();
	initializeTable();
	

	// init list with device definitions
	fwShowProgressBar(&quot;Initializing list with device definitions.&quot;);
	deviceDefinitionDps = dpNames(&quot;*&quot;, &quot;_FwDeviceDefinition&quot;);

	deviceTypes.deleteAllItems();
	deviceDpTypes.deleteAllItems();
	
	deviceTypes.appendItem(&quot;Choose a device type...&quot;);
	deviceDpTypes.appendItem(&quot;&quot;);
	
	editTypeDefinitionButton.enabled(FALSE);
	deleteTypeDefinitionButton.enabled(FALSE);
	editModelDefinitionButton.enabled(FALSE);
	deleteModelDefinitionButton.enabled(FALSE);
	
	fwDevice_getAllTypes(types, exceptionInfo);
	for(int i = 1; i &lt;= dynlen(deviceDefinitionDps); i++)
	{
		deviceTypes.appendItem(types[1][i]);
		deviceDpTypes.appendItem(types[2][i]);
	}	
	deviceTypes.selectedPos(1);
	deviceDpTypes.selectedPos(1);
	
	
	// init list with model definitions
	fwShowProgressBar(&quot;Initializing list with model definitions.&quot;);
	deviceModels.items = makeDynString(&quot;No type selected&quot;);
	deviceModels.enabled = FALSE;
	
	deviceModels.selectedPos(1);
	
	fwCloseProgressBar(&quot;Finished initialization&quot;);
}

selectButton(string newSelButtonName, int level)
{
//	DebugN(newSelButtonName, selectedButtons, level);
	dyn_string buttons;
	
//	DebugN(&quot;selectedButtons &quot;, selectedButtons);
	if(level &gt; 0)
	{
		// unselect button at the same level
		setValue(selectedButtons[level], &quot;backCol&quot;, &quot;_3DFace&quot;);

		// select new button
		setValue(newSelButtonName, &quot;backCol&quot;, &quot;kobaltblau&quot;);
		selectedButtons[level] = newSelButtonName;
	}

	// unselect buttons in any level below
	for(int i = level + 1; i &lt;= dynlen(selectedButtons); i++)
	{
		setValue(selectedButtons[i], &quot;backCol&quot;, &quot;_3DFace&quot;);
		selectedButtons[i] = &quot;dummyButton&quot;;
	}
	
	buttons = makeDynString(&quot;addressButton&quot;, 
									&quot;addressOPCButton&quot;, &quot;addressOPCGeneralButton&quot;, 
									&quot;addressDIMButton&quot;, &quot;addressDIMGeneralButton&quot;,  
									&quot;addressS7Button&quot;, &quot;addressS7GeneralButton&quot;,
									&quot;addressSNMPButton&quot;, &quot;addressSNMPGeneralButton&quot;,
									&quot;addressOPCUAButton&quot;, &quot;addressOPCUAGeneralButton&quot;);
	
	if(dynContains(buttons, newSelButtonName) &gt; 0)
	{
		displayAddressControls(TRUE);
	}
	else
	{
		displayAddressControls(FALSE);
	}
}

updateTable(string type)
{
	int i, j;
	string table;
	dyn_string dpes, values, parameterNames, aux, elements;
	dyn_dyn_string valuesWithColor;

	for(i = 1; i &lt;= mappinglen(modeToTable); i++)
	{
		table = mappingGetValue(modeToTable, i);
		if(table != ELEMENTS_MODE_TABLE)
			setValue(table, &quot;deleteAllLines&quot;);
	}
	
	// build list of dpes that are going to be edited
	for(i = 1; i &lt;= dynlen(generalDefinitionElements); i++)
	{
		dpes[i] = definitionDp + generalDefinitionElements[i][2];
	}
	
	// retrieve the current values of the dpes
	dpGet(dpes, values);
	
	// insert everything in the table
	for(i = 1; i &lt;= dynlen(values); i++)
	{
		// in case it is a dyn_string stored as a string, replace spaces around separator
		if(strreplace(values[i], &quot; &quot; + fwGeneral_DYN_STRING_DEFAULT_SEPARATOR + &quot; &quot;, fwGeneral_DYN_STRING_DEFAULT_SEPARATOR));
		
		// background for the values is white to indicate that they can be edited
		valuesWithColor[i] = makeDynString(values[i], &quot;_Window&quot;);
	
		// display data in the general editing table
		setValue(modeToTable[generalDefinitionElements[i][3]], &quot;appendLine&quot;, &quot;dpe&quot;, dpes[i], &quot;parameter&quot;, generalDefinitionElements[i][1], &quot;value&quot;, valuesWithColor[i]);
	}
}

updateElementsTable()
{
	bool canHave;
	int i, j, columnCount;
	dyn_string tableColumn, deviceList, dsAux;

	enableControls(FALSE);
	refreshVisible(makeDynString());
	
	elementsTable.deleteAllLines();
	
	// Add columns to the table, read from the Device Definition	
	for(i = 1; i &lt;= dynlen(definitionElementsWithoutGroups); i++)
	{		

		columnCount = elementsTable.columnCount();
		if(columnCount &lt; i + 1)				
			elementsTable.insertColumn(i);
			
		//if(dynContains(visibleDefinitionElements, definitionElementsWithoutGroups[i]))
			elementsTable.columnVisibility(i, TRUE);
				
		dsAux = strsplit(definitionElementsWithoutGroups[i], &quot;.&quot;);
		elementsTable.columnHeader(i, dsAux[dynlen(dsAux)]);
		elementsTable.columnName(i, definitionElementsWithoutGroups[i]);
		dpGet(definitionDp + &quot;.&quot; + definitionElementsWithoutGroups[i], tableColumn);
//		DebugN(elementsTable.columnName(i));
		
		if(dynlen(tableColumn) &gt; elementsTable.lineCount)
		{
			int linesToAppend = dynlen(tableColumn) - elementsTable.lineCount;
			for(int j = 1; j &lt;= linesToAppend; j++)
			{
				elementsTable.appendLine(elementsTable.columnName(i), &quot;&quot;);
			}
		}
		//DebugN(definitionElementsWithoutGroups[i + 1], tableColumn);
		
		// fill in data for the column	
		for(j = 1; j &lt;= dynlen(tableColumn); j++)
		{
			elementsTable.cellValueRC(j - 1, elementsTable.columnName(i), makeDynString(tableColumn[j]));
		}
		
		elementsTable.columnEditable(i, FALSE);
	}
	
	// Check if there is at least a dp of the current Type
	deviceList = dpNames(&quot;*&quot;, deviceDpTypes.text);

	// if there is at least one instance, check if dpes in device definition
	// are really there. If not mark background as yellow
	if(dynlen(deviceList) &gt; 0)
	{
		unsigned dpId; 
		int elId;
		string dpe;
		
		for(i = 1; i &lt;= elementsTable.lineCount; i++)
		{
			dpe = deviceList[1] + elementsTable.cellValueRC(i - 1, elementsTable.columnName(DPE_COLUMN_INDEX));
			//DebugN(&quot;Checking dpe &quot; + dpe);
			
			// if element doesn't exist, set background to yellow
			if(!dpGetId(dpe, dpId, elId))
			{
				elementsTable.cellBackColRC(i - 1, elementsTable.columnName(DPE_COLUMN_INDEX), &quot;yellow&quot;);		
				//DebugN(&quot;Setting color to yellow&quot;);
			}
		}
	}
	
	refreshIndexNumber();
	
	elementsTable.lineVisible(0);
	enableControls(TRUE);
}

refreshIndexNumber()
{
	// display column with index
	elementsTable.columnVisibility(0, TRUE);
	
	// fill in index for each row
	for(int j = 1; j &lt;= elementsTable.lineCount; j++)
	{
		elementsTable.cellValueRC(j - 1, elementsTable.columnName(0), j);				
	}
}

refreshVisible(dyn_string selectedGroups)
{
	string columnName;
	
	// if groups wanted not passed as parameter then use all
	if(dynlen(selectedGroups) == 0)
	{
		selectedGroups = definitionElementsGroups;
	}
	else // only change to edit mode when a specific group is chosen
	{
		editMode(ELEMENTS_MODE);
	}

	// initialize list of visible elements 
	visibleDefinitionElements = makeDynString();
	
	//DebugN(&quot;selectedGroups &quot; + selectedGroups);
	for(int i = 1; i &lt;= dynlen(definitionElements); i++)
	{
		if(dynContains(selectedGroups, definitionElements[i][2]) &gt; 0)
			dynAppend(visibleDefinitionElements, definitionElements[i][1]);
	}
	
	for(int i = 3; i &lt; elementsTable.columnCount(); i++)
	{
		columnName = elementsTable.columnName(i);
		if(dynContains(visibleDefinitionElements, columnName) &gt; 0)
			elementsTable.columnVisibility(i, TRUE);
		else
			elementsTable.columnVisibility(i, FALSE);
	}
	

}

//	Parses the dyn_string with the dpes in the definition.
//	Then it initializes the table columns and the groups accordingly.
initGroups()
{	
	// remove groups from list of device definition elements
	definitionElementsWithoutGroups = makeDynString();
	for(int i = 1; i &lt;= dynlen(definitionElements); i++)
	{
		dynAppend(definitionElementsWithoutGroups, definitionElements[i][1]);
		
		if(dynContains(definitionElementsGroups, definitionElements[i][2]) &lt; 1)
			dynAppend(definitionElementsGroups, definitionElements[i][2]);
	}
}

initializeTable()
{
	elementsTable.deleteAllLines();
	for(int i = 0; i &lt; elementsTable.columnCount(); i++)
	{
		elementsTable.columnVisibility(i, FALSE);
	}
}

editMode(string mode)
{
	string modeKey, table;
	
	for(int i = 1; i &lt;= mappinglen(modeToTable); i++)
	{
		modeKey = mappingGetKey(modeToTable, i);
		table = mappingGetValue(modeToTable, i);
		
		if(modeKey == mode)
			setValue(table, &quot;visible&quot;, TRUE);
		else
			setValue(table, &quot;visible&quot;, FALSE);
	}
	
	// enable elements controls only in ELEMNTS_MODE
	if(mode == ELEMENTS_MODE)
		enableElementsControls(TRUE);
	else
		enableElementsControls(FALSE);
}

fwGeneral_tableGetColumnValues(string tableName, string columnHeader, dyn_string &amp;values, dyn_string &amp;exceptionInfo)
{
	int i;
	string columnName;
	shape localTable = getShape(tableName);
	
	values = makeDynString();
	
	fwGeneral_tableColumnHeaderToName(tableName, columnHeader, columnName, exceptionInfo);
	
	// check if column was found
	if(dynlen(exceptionInfo) &gt; 0)
		return;
	
	// then get the elements in the column
	for(i = 0; i &lt; localTable.lineCount; i++)
	{
		values[i + 1] = localTable.cellValueRC(i, columnName);
	}

}

fwGeneral_tableColumnHeaderToName(	string tableName, string columnHeader, string &amp;columnName,
									dyn_string &amp;exceptionInfo)
{
	shape localTable = getShape(tableName);
	
	for(int i = 0; i &lt; localTable.columnCount; i++)
	{
		//DebugN(&quot;localTable.columnHeader(i) &quot; + localTable.columnHeader(i));
		if(localTable.columnHeader(i) == columnHeader)
		{
			columnName = localTable.columnToName(i);
			return;
		}
	}
	
	// if column was not found, raise an exception
	if(columnName == &quot;&quot;)
	{
		fwException_raise(	exceptionInfo, &quot;ERROR&quot;,
							&quot;Could not find a column with the specified header (&quot; + columnHeader + &quot;)&quot;, &quot;&quot;);
		return;
	}
}

fwGeneral_tableResizeColumns(string table, int size = 10)
{
	int i, j, w, h, columnWidth;
	string columnHeader;
	shape myTable = getShape(table);
	dyn_anytype columnData;
	dyn_dyn_anytype tableData;
	
	for(i = 0; i &lt; myTable.lineCount; i++)
	{
		tableData[i + 1] = myTable.getLineN(i);
	}
	
	for(i = 0; i &lt; myTable.columnCount; i++)
	{
		setValue(&quot;TextSize&quot; + size, &quot;text&quot;, myTable.columnHeader(i));
		getValue(&quot;TextSize&quot; + size, &quot;size&quot;, w, h);
		columnWidth = w + 10;
		columnData = getDynAnytype(tableData, i + 1);
//		DebugN(&quot;Header width &quot; + w + &quot; &quot; + myTable.columnHeader(i));
		
		for(j = 1; j &lt;= dynlen(columnData); j++)
		{
			setValue(&quot;TextSize&quot; + size, &quot;text&quot;, columnData[j]);
			getValue(&quot;TextSize&quot; + size, &quot;size&quot;, w, h);
			w = w + 10;
//			DebugN(&quot;w h &quot; + w + &quot; &quot; + h); 
			if(w &gt; columnWidth)
				columnWidth = w;
		}
		
		myTable.columnWidth(i, columnWidth);
	}
}


displayAddressControls(bool display)
{
	addressOPCButton.visible = display;
	addressOPCGeneralButton.visible = display;
	addressOPCUAButton.visible = display;
	addressOPCUAGeneralButton.visible = display;
	addressDIMButton.visible = display;
	addressDIMGeneralButton.visible = display;
	addressS7Button.visible =display;
	addressS7GeneralButton.visible = display;
	addressSNMPButton.visible =display;
	addressSNMPGeneralButton.visible = display;
}

enableControls(bool enable)
{
	applyButton.enabled				= enable;
	createVendorNodeButton.enabled	= enable;
	addToVendorNodeButton.enabled 	= enable;
	enableElementsControls(enable);
}

enableElementsControls(bool enable)
{
	addElementsButton.enabled		= enable;
	removeElementsButton.enabled	= enable;
}


initDefinitionElements()
{	

	/* Format of entries:
		
			[1] dpe in device definition
			[2] group
			[3]
			[4] mapping to config object
			[5] type of information stored
	*/

	// properties
	dynAppend(definitionElements, makeDynString(&quot;properties.names&quot;, &quot;properties&quot;, &quot;&quot;, fwDevice_PROPERTY_NAMES_INDEX, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;properties.dpes&quot;, &quot;properties&quot;, &quot;&quot;, fwDevice_ELEMENTS_INDEX, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;properties.description&quot;, &quot;properties&quot;, &quot;&quot;, fwDevice_DESCRIPTION_INDEX, DYN_STRING_VAR));		
	dynAppend(definitionElements, makeDynString(&quot;properties.defaultValues&quot;, &quot;properties&quot;, &quot;&quot;, fwDevice_DEFAULT_VALUES_INDEX, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;properties.userData&quot;, &quot;properties&quot;, &quot;&quot;, fwDevice_USER_DATA_INDEX, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;properties.types&quot;, &quot;properties&quot;, &quot;&quot;, fwDevice_ELEMENTS_TYPES_INDEX, DYN_STRING_VAR));
	
	// address
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.canHave&quot;, fwConfigs_FW_ADDRESS, &quot;&quot;, 0, DYN_BOOL_VAR));
	//dynAppend(definitionElements, makeDynString(&quot;configuration.address.direction&quot;, fwConfigs_FW_ADDRESS, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_DIRECTION, DYN_INT_VAR);

	// addressOPC
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPC.items&quot;, fwPeriphAddress_TYPE_OPC, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_REFERENCE, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPC.groups&quot;, fwPeriphAddress_TYPE_OPC, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_OPC_GROUP_IN, DYN_STRING_VAR));
	//dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPC.types&quot;, fwPeriphAddress_TYPE_OPC, &quot;&quot;, 0, DYN_STRING_VAR));
	//dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPC.userDefined&quot;, fwPeriphAddress_TYPE_OPC, &quot;&quot;, 0, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPC.direction&quot;, fwPeriphAddress_TYPE_OPC, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_DIRECTION, DYN_STRING_VAR));

	// addressOPCUA
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPCUA.items&quot;, fwPeriphAddress_TYPE_OPCUA, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_REFERENCE, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPCUA.subscriptions&quot;, fwPeriphAddress_TYPE_OPCUA, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_OPCUA_SUBSCRIPTION, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPCUA.direction&quot;, fwPeriphAddress_TYPE_OPCUA, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_DIRECTION, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPCUA.types&quot;, fwPeriphAddress_TYPE_OPCUA, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_DATATYPE, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPCUA.kinds&quot;, fwPeriphAddress_TYPE_OPCUA, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_OPCUA_KIND, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPCUA.variants&quot;, fwPeriphAddress_TYPE_OPCUA, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_OPCUA_VARIANT, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPCUA.pollGroups&quot;, fwPeriphAddress_TYPE_OPCUA, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_OPCUA_POLL_GROUP, DYN_STRING_VAR));

 		 
 
 	// addressS7
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.S7.items&quot;, fwPeriphAddress_TYPE_S7, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_REFERENCE, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.S7.groups&quot;, fwPeriphAddress_TYPE_S7, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_OPC_GROUP_IN, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.S7.types&quot;, fwPeriphAddress_TYPE_S7, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_DATATYPE, DYN_STRING_VAR));
	//dynAppend(definitionElements, makeDynString(&quot;configuration.address.OPC.userDefined&quot;, fwPeriphAddress_TYPE_OPC, &quot;&quot;, 0, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.S7.direction&quot;, fwPeriphAddress_TYPE_S7, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_DIRECTION, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.S7.lowLevel&quot;, fwPeriphAddress_TYPE_S7, &quot;&quot;, fwPeriphAddress_S7_LOWLEVEL, DYN_STRING_VAR));

 
 	// addressSNMP
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.SNMP.items&quot;, fwPeriphAddress_TYPE_SNMP, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_REFERENCE, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.SNMP.groups&quot;, fwPeriphAddress_TYPE_SNMP, &quot;&quot;, fwPeriphAddress_SNMP_POLL_GROUP, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.SNMP.types&quot;, fwPeriphAddress_TYPE_SNMP, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_DATATYPE, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.SNMP.direction&quot;, fwPeriphAddress_TYPE_SNMP, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_DIRECTION, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.SNMP.subindexes&quot;, fwPeriphAddress_TYPE_SNMP, &quot;&quot;, fwPeriphAddress_SNMP_SUBINDEX, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.SNMP.agentIds&quot;, fwPeriphAddress_TYPE_SNMP, &quot;&quot;, fwPeriphAddress_SNMP_AGENT_ID, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.SNMP.agentVersions&quot;, fwPeriphAddress_TYPE_SNMP, &quot;&quot;, fwPeriphAddress_SNMP_AGENT_VERSION, DYN_STRING_VAR));

  
  	// addressDIM
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.DIM.direction&quot;, fwPeriphAddress_TYPE_DIM, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_DIRECTION, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.address.DIM.items&quot;, fwPeriphAddress_TYPE_DIM, &quot;&quot;, fwPeriphAddress_DPE_OBJECT_REFERENCE, DYN_STRING_VAR));

	// addressMODBUS
	//dynAppend(definitionElements, makeDynString(&quot;configuration.address.MODBUS.direction&quot;, &quot;addressMODBUS&quot;, &quot;&quot;, 0));
	
	// addressDIP
	//dynAppend(definitionElements, makeDynString(&quot;configuration.address.DIP.items&quot;, &quot;addressDIP&quot;, &quot;&quot;, 0, DYN_STRING_VAR));
	//dynAppend(definitionElements, makeDynString(&quot;configuration.address.DIP.direction&quot;, &quot;addressDIP&quot;, &quot;&quot;, 0, DYN_INT_VAR));
	
	// dpFunction
	dynAppend(definitionElements, makeDynString(&quot;configuration.dpFunction.canHave&quot;, fwConfigs_FW_DP_FUNCT, &quot;&quot;, 0, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.dpFunction.function&quot;, fwConfigs_FW_DP_FUNCT, &quot;&quot;, fwDpFunction_DPE_OBJECT_FUNCTION, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.dpFunction.params&quot;, fwConfigs_FW_DP_FUNCT, &quot;&quot;, fwDpFunction_DPE_OBJECT_PARAMETERS, DYN_DYN_STRING_VAR));
//	dynAppend(definitionElements, makeDynString(&quot;configuration.dpFunction.globals&quot;, fwConfigs_FW_DP_FUNCT, &quot;&quot;, fwDpFunction_DPE_OBJECT_GLOBALS, DYN_DYN_STRING_VAR));

	// alarm
	dynAppend(definitionElements, makeDynString(&quot;configuration.alert.canHave&quot;, fwConfigs_FW_ALERT_HDL, &quot;&quot;, 0, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.alert.defaultClasses&quot;, fwConfigs_FW_ALERT_HDL, &quot;&quot;, fwAlertConfig_DPE_OBJECT_CLASSES, DYN_DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.alert.defaultTexts&quot;, fwConfigs_FW_ALERT_HDL, &quot;&quot;, fwAlertConfig_DPE_OBJECT_TEXTS, DYN_DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.alert.defaultLimits&quot;, fwConfigs_FW_ALERT_HDL, &quot;&quot;, fwAlertConfig_DPE_OBJECT_LIMITS, DYN_DYN_STRING_VAR));
// not sure if needed??
//	dynAppend(definitionElements, makeDynString(&quot;configuration.alert.defaultActive&quot;, &quot;alarm&quot;, &quot;&quot;, fwAlertConfig_ACTIVE));

	// archive
	dynAppend(definitionElements, makeDynString(&quot;configuration.archive.canHave&quot;, fwConfigs_FW_ARCHIVE, &quot;&quot;, 0, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.archive.defaultClass&quot;, fwConfigs_FW_ARCHIVE, &quot;&quot;, fwArchive_DPE_OBJECT_CLASS_NAME, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.archive.smoothType&quot;, fwConfigs_FW_ARCHIVE, &quot;&quot;, fwConfigs_DPE_OBJECT_TYPE, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.archive.smoothProcedure&quot;, fwConfigs_FW_ARCHIVE, &quot;&quot;, fwArchive_DPE_OBJECT_PROCEDURE, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.archive.deadband&quot;, fwConfigs_FW_ARCHIVE, &quot;&quot;, fwArchive_DPE_OBJECT_DEADBAND, DYN_FLOAT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.archive.timeInterval&quot;, fwConfigs_FW_ARCHIVE, &quot;&quot;, fwArchive_DPE_OBJECT_TIME_INTERVAL, DYN_FLOAT_VAR));

	// smoothing
	dynAppend(definitionElements, makeDynString(&quot;configuration.smoothing.canHave&quot;, fwConfigs_FW_SMOOTH, &quot;&quot;, 0, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.smoothing.smoothProcedure&quot;, fwConfigs_FW_SMOOTH, &quot;&quot;, fwSmoothing_DPE_OBJECT_PROCEDURE, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.smoothing.deadband&quot;, fwConfigs_FW_SMOOTH, &quot;&quot;, fwSmoothing_DPE_OBJECT_DEADBAND, DYN_FLOAT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.smoothing.timeInterval&quot;, fwConfigs_FW_SMOOTH, &quot;&quot;, fwSmoothing_DPE_OBJECT_TIME_INTERVAL, DYN_FLOAT_VAR));
	
	// pvRange
	dynAppend(definitionElements, makeDynString(&quot;configuration.pvRange.canHave&quot;, fwConfigs_FW_PV_RANGE, &quot;&quot;, 0, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.pvRange.minValue&quot;, fwConfigs_FW_PV_RANGE, &quot;&quot;, fwPvRange_DPE_OBJECT_MIN_VALUE, DYN_FLOAT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.pvRange.maxValue&quot;, fwConfigs_FW_PV_RANGE, &quot;&quot;, fwPvRange_DPE_OBJECT_MAX_VALUE, DYN_FLOAT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.pvRange.negateRange&quot;, fwConfigs_FW_PV_RANGE, &quot;&quot;, fwPvRange_DPE_OBJECT_NEGATE_RANGE, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.pvRange.ignoreOutside&quot;, fwConfigs_FW_PV_RANGE, &quot;&quot;, fwPvRange_DPE_OBJECT_IGNORE_OUTSIDE, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.pvRange.inclusiveMin&quot;, fwConfigs_FW_PV_RANGE, &quot;&quot;, fwPvRange_DPE_OBJECT_INCLUSIVE_MIN, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.pvRange.inclusiveMax&quot;, fwConfigs_FW_PV_RANGE, &quot;&quot;, fwPvRange_DPE_OBJECT_INCLUSIVE_MAX, DYN_BOOL_VAR));
	
	// format
	dynAppend(definitionElements, makeDynString(&quot;configuration.format.canHave&quot;, fwConfigs_FW_FORMAT, &quot;&quot;, 0, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.format.format&quot;, fwConfigs_FW_FORMAT, &quot;&quot;, fwFormat_DPE_OBJECT_FORMAT, DYN_STRING_VAR));

	// unit
	dynAppend(definitionElements, makeDynString(&quot;configuration.unit.canHave&quot;, fwConfigs_FW_UNIT, &quot;&quot;, 0, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.unit.unit&quot;, fwConfigs_FW_UNIT, &quot;&quot;, fwUnit_DPE_OBJECT_UNIT, DYN_STRING_VAR));
	
	// conversion
	dynAppend(definitionElements, makeDynString(&quot;configuration.conversion.canHave&quot;, fwConfigs_FW_CMD_CONV, &quot;&quot;, 0, DYN_BOOL_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.conversion.type&quot;, fwConfigs_FW_CMD_CONV, &quot;&quot;, fwConversion_DPE_OBJECT_TYPE, DYN_STRING_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.conversion.conversionType&quot;, fwConfigs_FW_CMD_CONV, &quot;&quot;, fwConversion_DPE_OBJECT_CONV_TYPE, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.conversion.order&quot;, fwConfigs_FW_CMD_CONV, &quot;&quot;, fwConversion_DPE_OBJECT_ORDER, DYN_INT_VAR));
	dynAppend(definitionElements, makeDynString(&quot;configuration.conversion.arguments&quot;, fwConfigs_FW_CMD_CONV, &quot;&quot;, fwConversion_DPE_OBJECT_ARGUMENTS, DYN_FLOAT_VAR));

	modeToTable[ELEMENTS_MODE] = ELEMENTS_MODE_TABLE;
	modeToTable[GENERAL_MODE] = GENERAL_MODE_TABLE;
	modeToTable[PANELS_MODE] = PANELS_MODE_TABLE;
//	modeToTable[ADDRESSGENERAL_MODE] = ADDRESSGENERAL_MODE_TABLE;
	modeToTable[ADDRESSOPCGENERAL_MODE] = ADDRESSOPCGENERAL_MODE_TABLE;
	modeToTable[ADDRESSOPCUAGENERAL_MODE] = ADDRESSOPCUAGENERAL_MODE_TABLE;
	modeToTable[ADDRESSDIMGENERAL_MODE] = ADDRESSDIMGENERAL_MODE_TABLE; 
	modeToTable[ADDRESSS7GENERAL_MODE] = ADDRESSS7GENERAL_MODE_TABLE;
	modeToTable[ADDRESSSNMPGENERAL_MODE] = ADDRESSSNMPGENERAL_MODE_TABLE;
		
	dynAppend(generalDefinitionElements, makeDynString(&quot;Device Type&quot;, &quot;.type&quot;, GENERAL_MODE));			
	dynAppend(generalDefinitionElements, makeDynString(&quot;Datapoint Type&quot;, &quot;.dpType&quot;, GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Version&quot;, &quot;.version&quot;, GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Default Address Type&quot;, &quot;.configuration.address.general.defaultType&quot;, GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Can have defaults for addresses and alarms?&quot;, &quot;.configuration.canHaveDefaults&quot;, GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Children Datapoint Types&quot;, &quot;.general.childrenDPTypes&quot;, GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Default Name Root&quot;, &quot;.general.nameRoot&quot;, GENERAL_MODE));			
	dynAppend(generalDefinitionElements, makeDynString(&quot;Default Name Digits&quot;, &quot;.general.nameDigits&quot;, GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Starting Number&quot;,&quot;.general.startingNumber&quot;, GENERAL_MODE));			
//	dynAppend(generalDefinitionElements, makeDynString(&quot;.frontEnd.configFile.openingTag&quot;, GENERAL_MODE));
//	dynAppend(generalDefinitionElements, makeDynString(&quot;.frontEnd.configFile.closingTag&quot;, GENERAL_MODE));
	
	dynAppend(generalDefinitionElements, makeDynString(&quot;Hardware View in Navigator Mode&quot;, &quot;.panels.navigator.hardware&quot;, PANELS_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Hardware View in Editor Mode&quot;, &quot;.panels.editor.hardware&quot;, PANELS_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Logical View in Navigator Mode&quot;, &quot;.panels.navigator.logical&quot;, PANELS_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Logical View in Editor Mode&quot;, &quot;.panels.editor.logical&quot;, PANELS_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Expert Hardware View in Editor Mode&quot;, &quot;.panels.editor.expert&quot;, PANELS_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Panel to add children devices (if not the default one)&quot;, &quot;.panels.editor.hardwareAdd&quot;, PANELS_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Panel to remove children devices (if not the default one)&quot;, &quot;.panels.editor.hardwareRemove&quot;, PANELS_MODE));
//	dynAppend(generalDefinitionElements, makeDynString(&quot;.panels.symbols.synoptic&quot;, PANELS_MODE));
// dynAppend(generalDefinitionElements, makeDynString(&quot;.panels.symbols.display&quot;, PANELS_MODE));
	
	dynAppend(generalDefinitionElements, makeDynString(&quot;Can have OPC addressing?&quot;, &quot;.configuration.address.OPC.general.canHave&quot;, ADDRESSOPCGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Driver Number&quot;, &quot;.configuration.address.OPC.general.driverNumber&quot;, ADDRESSOPCGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;OPC Server Name&quot;, &quot;.configuration.address.OPC.general.serverName&quot;, ADDRESSOPCGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;OPC Group In&quot;, &quot;.configuration.address.OPC.general.groupIn&quot;, ADDRESSOPCGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;OPC Group Out&quot;, &quot;.configuration.address.OPC.general.groupOut&quot;, ADDRESSOPCGENERAL_MODE));
	
	dynAppend(generalDefinitionElements, makeDynString(&quot;Can have OPC UA addressing?&quot;, &quot;.configuration.address.OPCUA.general.canHave&quot;, ADDRESSOPCUAGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Driver Number&quot;, &quot;.configuration.address.OPCUA.general.driverNumber&quot;, ADDRESSOPCUAGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;OPC UA Server Name&quot;, &quot;.configuration.address.OPCUA.general.serverName&quot;, ADDRESSOPCUAGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;OPC UA Subscription In&quot;, &quot;.configuration.address.OPCUA.general.subscriptionIn&quot;, ADDRESSOPCUAGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;OPC UA Subscription Out&quot;, &quot;.configuration.address.OPCUA.general.subscriptionOut&quot;, ADDRESSOPCUAGENERAL_MODE));
	
	dynAppend(generalDefinitionElements, makeDynString(&quot;Can have DIM addressing?&quot;, &quot;.configuration.address.DIM.general.canHave&quot;, ADDRESSDIMGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Driver Number&quot;, &quot;.configuration.address.DIM.general.driverNumber&quot;, ADDRESSDIMGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Time Interval&quot;, &quot;.configuration.address.DIM.general.timeInterval&quot;, ADDRESSDIMGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Time Stamp&quot;, &quot;.configuration.address.DIM.general.timeStamp&quot;, ADDRESSDIMGENERAL_MODE));	
 	
	dynAppend(generalDefinitionElements, makeDynString(&quot;Can have S7 addressing?&quot;, &quot;.configuration.address.S7.general.canHave&quot;, ADDRESSS7GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Driver Number&quot;, &quot;.configuration.address.S7.general.driverNumber&quot;, ADDRESSS7GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Auto Smoothing&quot;, &quot;.configuration.address.S7.general.autoSmooth&quot;, ADDRESSS7GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;S7 Start&quot;, &quot;.configuration.address.S7.general.s7Start&quot;, ADDRESSS7GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;S7 Subindex&quot;, &quot;.configuration.address.S7.general.s7SubIndex&quot;, ADDRESSS7GENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;S7 Interval&quot;, &quot;.configuration.address.S7.general.s7Interval&quot;, ADDRESSS7GENERAL_MODE));
	
	dynAppend(generalDefinitionElements, makeDynString(&quot;Can have SNMP addressing?&quot;, &quot;.configuration.address.SNMP.general.canHave&quot;, ADDRESSSNMPGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Driver Number&quot;, &quot;.configuration.address.SNMP.general.driverNumber&quot;, ADDRESSSNMPGENERAL_MODE));
	dynAppend(generalDefinitionElements, makeDynString(&quot;Auto Smoothing&quot;, &quot;.configuration.address.SNMP.general.autoSmooth&quot;, ADDRESSSNMPGENERAL_MODE));
}


















]]></script>
  <script name="Close" isEscaped="1"><![CDATA[main()
{
	int i;
}]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	init();
	selectedButtons = makeDynString(&quot;generalButton&quot;, &quot;&quot;, &quot;&quot;);
	
	fwConfigs_init();
	
	addGlobal(&quot;g_dpeConfigObject&quot;, DYN_DYN_ANYTYPE_VAR);
	
}]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="addressOPCUAGeneralTable" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">92</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">230 -181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">72</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">30 240</prop>
    <prop name="Size">851 381</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">20</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">dpe</prop>
     <prop name="Width">200</prop>
     <prop name="Visible">False</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">dpe</prop>
      <prop name="en_US.iso88591">dpe</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">parameter</prop>
     <prop name="Width">300</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Parameter</prop>
      <prop name="en_US.iso88591">Parameter</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">value</prop>
     <prop name="Width">500</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Value</prop>
      <prop name="en_US.iso88591">Value</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.tableMode(TABLE_SELECT_BROWSE);
	this.selectByClick(TABLE_SELECT_LINE_COLUMN);
}]]></script>
   </events>
  </shape>
  <shape Name="Text1" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">4</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[hatch,[parallel,8,horizontal]]</prop>
    <prop name="Location">12 12</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,19,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,19,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Edit Device/Model Definition</prop>
     <prop name="en_US.iso88591">Edit Device/Model Definition</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Text2" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">5</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">37 58</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[hatch,[parallel,8,horizontal]]</prop>
    <prop name="Location">39 60</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Type:</prop>
     <prop name="en_US.iso88591">Type:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Text3" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">22</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">304 58</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[hatch,[parallel,8,horizontal]]</prop>
    <prop name="Location">306 60</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">DP Type:</prop>
     <prop name="en_US.iso88591">DP Type:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Frame1" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">39</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 120</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">27</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Choose definition</prop>
     <prop name="en_US.iso88591">Choose definition</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">20 40</prop>
    <prop name="Size">870 80</prop>
   </properties>
  </shape>
  <shape Name="Text4" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">40</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">37 90</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">28</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[hatch,[parallel,8,horizontal]]</prop>
    <prop name="Location">39 92</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Model:</prop>
     <prop name="en_US.iso88591">Model:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Text6" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">47</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">140 670</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">34</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[hatch,[parallel,8,horizontal]]</prop>
    <prop name="Location">142 672</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Clipboard:</prop>
     <prop name="en_US.iso88591">Clipboard:</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="Frame2" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">48</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">9 690</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">37</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Copy definition</prop>
     <prop name="en_US.iso88591">Copy definition</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">9 650</prop>
    <prop name="Size">376 40</prop>
   </properties>
  </shape>
  <shape Name="Text7" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">60</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">270 150</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">44</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[hatch,[parallel,8,horizontal]]</prop>
    <prop name="Location">272 152</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Editing...</prop>
     <prop name="en_US.iso88591">Editing...</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="TextSize8" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">65</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">617 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">48</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">617 10</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">To measure width 8</prop>
     <prop name="en_US.iso88591">To measure width 8</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">0</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="TextSize10" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">75</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">487 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">55</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">487 10</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">To measure width 10</prop>
     <prop name="en_US.iso88591">To measure width 10</prop>
    </prop>
    <prop name="Distance">0</prop>
    <prop name="BorderOffset">0</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="editFrame" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">80</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 658</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">60</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Editing NOTHING</prop>
     <prop name="en_US.iso88591">Editing NOTHING</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">20 128</prop>
    <prop name="Size">870 530</prop>
   </properties>
  </shape>
  <shape Name="deviceDpTypes" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">1</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">363 58</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">363 58</prop>
    <prop name="Size">220 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
  </shape>
  <shape Name="deviceTypes" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">2</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">74 58</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">74 58</prop>
    <prop name="Size">225 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	dyn_string models, items, exceptionInfo;
	
	this.enabled(FALSE);
	applyButton.enabled = FALSE;
	
	// If info message selected don't do anything
	if(deviceTypes.selectedPos != 1)
	{		
		fwOpenProgressBar(&quot;Looking for device models.&quot;, &quot;Looking for device models.&quot;, 1, 0);
		editTypeDefinitionButton.enabled(TRUE);
		deleteTypeDefinitionButton.enabled(TRUE);
		
		deviceDpTypes.selectedPos(deviceTypes.selectedPos());	

		fwDevice_getTypeModels(deviceDpTypes.text, &quot;&quot;, models, exceptionInfo);
		deviceModels.deleteAllItems();

		if(dynlen(models) == 0)
		{
			deviceModels.items = makeDynString(&quot;No models available for the selected type.&quot;);
			deviceModels.enabled = FALSE;
		}
		else
		{
			dynAppend(items, &quot;Choose a device model...&quot;);
			dynAppend(items, models);
			deviceModels.items = items;
			deviceModels.enabled = TRUE;			
		}
		
		fwCloseProgressBar(&quot;Finished looking for device models&quot;);
	}
	else
	{
		deviceModels.items = makeDynString(&quot;No type selected&quot;);
		deviceModels.enabled = FALSE;
	}
	
	deviceModels.selectedPos(1);
	editModelDefinitionButton.enabled(FALSE);
	deleteModelDefinitionButton.enabled(FALSE);
	this.enabled(TRUE);
}
]]></script>
   </events>
  </shape>
  <shape Name="editTypeDefinitionButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">3</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">587 57</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">4</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">587 57</prop>
    <prop name="Size">131 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Edit type definition</prop>
     <prop name="en_US.iso88591">Edit type definition</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	fwOpenProgressBar(&quot;Edit type definition&quot;, &quot;Refreshing tables...&quot;, 1, 0);

	definitionDp = deviceDpTypes.text + fwDevice_DEFINITION_SUFIX;
	editFrame.text = &quot;Editing: &quot; + definitionDp;
	
	updateTable(GENERAL_MODE);
	updateElementsTable();

//	updateTable(PANELS_MODE);
	editMode(GENERAL_MODE);
	selectButton(&quot;generalButton&quot;, 1);

	fwGeneral_tableResizeColumns(ELEMENTS_MODE_TABLE, 8);
	
	fwCloseProgressBar(&quot;Tables refreshed.&quot;);
}]]></script>
   </events>
  </shape>
  <shape Name="applyButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">6</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">719 666</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">719 666</prop>
    <prop name="Size">81 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Apply</prop>
     <prop name="en_US.iso88591">Apply</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	bool canHave, ok;
	int dpeType, i, j, count;
	string dpe, modeKey, table;
	dyn_string tableData, propertyNames, dynValue, exceptionInfo;
	dyn_anytype line;
	
	enableControls(FALSE);

	// before storing make some checks
	fwGeneral_tableGetColumnValues(&quot;elementsTable&quot;, &quot;names&quot;, propertyNames, exceptionInfo);
	if(dynContains(propertyNames, &quot;EMPTY&quot;) &gt; 0 || dynContains(propertyNames, &quot;&quot;) &gt; 0)
	{
		fwGeneral_openMessagePanel(	&quot;Some of the property names are empty. This can prevent some Framework Tools from working properly. &quot; +
									&quot;Do you still want to continue?&quot;,
									ok, exceptionInfo, &quot;Inconsistencies found in definition&quot;);
		if(!ok)
			return;
	}
	
	// store settings for individual elements
	for(i = 0; i &lt; elementsTable.columnCount; i++)
	{
		if(dynContains(definitionElementsWithoutGroups, elementsTable.columnName(i)))
		{
			tableData = makeDynString();
			dpeType = dpElementType(definitionDp + &quot;.&quot; + elementsTable.columnName(i));
			// get data from the table
			for(j = 1; j &lt;= elementsTable.lineCount; j++)
			{
				tableData[j] = elementsTable.cellValueRC(j - 1, elementsTable.columnName(i));				
				if((tableData[j] == &quot;&quot;) &amp;&amp; (dpeType == DPEL_DYN_STRING))
					tableData[j] = fwDevice_DEFINITION_EMPTY_ENTRY; 
			}
			// write data to device definitions
//			DebugN(&quot;Setting &quot; + definitionDp + &quot;.&quot; + elementsTable.columnName(i) + &quot; to &quot; + tableData);
			dpSet(definitionDp + &quot;.&quot; + elementsTable.columnName(i), tableData);
		}
	}

	// store settings in the other tables
	for(int i = 1; i &lt;= mappinglen(modeToTable); i++)
	{
		modeKey = mappingGetKey(modeToTable, i);
		table = mappingGetValue(modeToTable, i);
		
		if(modeKey != ELEMENTS_MODE)
		{	
			getValue(table, &quot;lineCount&quot;, count);
			for(j = 0; j &lt; count; j++)
			{
				getValue(table, &quot;getLineN&quot;, j, line);
			//	DebugN(line);
				dpe = line[1];
				dpeType = dpElementType(dpe);
		
				if(dynContains(g_fwGeneral_dynDpeTypes, dpeType))
				{
					fwGeneral_stringToDynString(line[3], dynValue, &quot;|&quot;, FALSE);
					dpSet(dpe, dynValue);
				}
				else
				{
					dpSet(dpe, line[3]);
				}
			//DebugN(line, dpe, dynValue);
			}
		}
	}

	enableControls(TRUE);
}
]]></script>
   </events>
  </shape>
  <shape Name="Button5" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">15</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">810 666</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">9</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">810 666</prop>
    <prop name="Size">81 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Close</prop>
     <prop name="en_US.iso88591">Close</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOff();
}]]></script>
   </events>
  </shape>
  <shape Name="generalButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">24</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">32 151</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">14</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8">General settings</prop>
     <prop name="en_US.iso88591">General settings</prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">32 151</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">General</prop>
     <prop name="en_US.iso88591">General</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectButton(this.name, 1);
	editMode(GENERAL_MODE);
	
	fwGeneral_tableResizeColumns(GENERAL_MODE_TABLE);
}]]></script>
   </events>
  </shape>
  <shape Name="propertiesButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">25</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">32 182</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">15</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">32 182</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Properties</prop>
     <prop name="en_US.iso88591">Properties</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = substr(this.name, 0, strpos(this.name, &quot;Button&quot;));

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));
}]]></script>
   </events>
  </shape>
  <shape Name="addressButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">26</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">102 181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">16</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">102 181</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Address</prop>
     <prop name="en_US.iso88591">Address</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwConfigs_FW_ADDRESS;

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));
}]]></script>
   </events>
  </shape>
  <shape Name="alarmButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">27</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">317 181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">17</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">317 181</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Alarm</prop>
     <prop name="en_US.iso88591">Alarm</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwConfigs_FW_ALERT_HDL;

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));
}]]></script>
   </events>
  </shape>
  <shape Name="addressOPCButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">30</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">117 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">18</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">117 210</prop>
    <prop name="Size">80 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OPC items</prop>
     <prop name="en_US.iso88591">OPC items</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwPeriphAddress_TYPE_OPC;//substr(this.name, 0, strpos(this.name, &quot;Button&quot;));

	selectButton(this.name, 2);
	refreshVisible(makeDynString(selectedGroup));
}]]></script>
   </events>
  </shape>
  <shape Name="addressDIMGeneralButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">31</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">276 214</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">19</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">404 210</prop>
    <prop name="Size">75 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">DIM general</prop>
     <prop name="en_US.iso88591">DIM general</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectButton(this.name, 2);
	editMode(ADDRESSDIMGENERAL_MODE);
	
	fwGeneral_tableResizeColumns(ADDRESSDIMGENERAL_MODE_TABLE);
}]]></script>
   </events>
  </shape>
  <shape Name="addressMODBUSButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">32</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">811.875 172</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">20</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">812 172</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">MODBUS</prop>
     <prop name="en_US.iso88591">MODBUS</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = substr(this.name, 0, strpos(this.name, &quot;Button&quot;));

	selectButton(this.name, 2);
	refreshVisible(makeDynString(selectedGroup));
}]]></script>
   </events>
  </shape>
  <shape Name="archiveButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">33</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">245 181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">22</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">245 181</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Archive</prop>
     <prop name="en_US.iso88591">Archive</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwConfigs_FW_ARCHIVE;

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));

}]]></script>
   </events>
  </shape>
  <shape Name="Button4" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">34</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">102 151</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">21</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">102 151</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Panels</prop>
     <prop name="en_US.iso88591">Panels</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectButton(this.name, 1);
	editMode(PANELS_MODE);
	
	fwGeneral_tableResizeColumns(PANELS_MODE_TABLE);
}]]></script>
   </events>
  </shape>
  <shape Name="smoothingButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">35</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">390 181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">23</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">390 181</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Smooth</prop>
     <prop name="en_US.iso88591">Smooth</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwConfigs_FW_SMOOTH;

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));

}]]></script>
   </events>
  </shape>
  <shape Name="pvRangeButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">36</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">531 181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">24</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">531 181</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">PvRange</prop>
     <prop name="en_US.iso88591">PvRange</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwConfigs_FW_PV_RANGE;

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));

}]]></script>
   </events>
  </shape>
  <shape Name="unitButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">37</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">602 181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">25</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">602 181</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Unit</prop>
     <prop name="en_US.iso88591">Unit</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwConfigs_FW_UNIT;

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));

}]]></script>
   </events>
  </shape>
  <shape Name="formatButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">38</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">672 181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">26</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">672 181</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Format</prop>
     <prop name="en_US.iso88591">Format</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwConfigs_FW_FORMAT;

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));

}]]></script>
   </events>
  </shape>
  <shape Name="deviceModels" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">41</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">80 90</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">29</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">80 90</prop>
    <prop name="Size">220 24</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	if(this.selectedPos != 1)
	{
		editModelDefinitionButton.enabled(TRUE);
		deleteModelDefinitionButton.enabled(TRUE);
	}
}]]></script>
   </events>
  </shape>
  <shape Name="editModelDefinitionButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">42</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">587 87</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">31</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">587 87</prop>
    <prop name="Size">131 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Edit model definition</prop>
     <prop name="en_US.iso88591">Edit model definition</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	dyn_string modelDp, exceptionInfo;
	
	fwOpenProgressBar(&quot;Edit model definition&quot;, &quot;Refreshing tables...&quot;, 1, 0);
	fwDevice_getModelDp(makeDynString(&quot;&quot;, deviceDpTypes.text, &quot;&quot;, deviceModels.text), modelDp, exceptionInfo);
	
	definitionDp = modelDp[1] + &quot;.modelDefinition.definition&quot;;
	editFrame.text = &quot;Editing: &quot; + definitionDp;
	
	updateElementsTable();
	updateTable(GENERAL_MODE);
	updateTable(PANELS_MODE);
	editMode(GENERAL_MODE);
	selectButton(&quot;generalButton&quot;, 1);
	//	selectButton(&quot;&quot;, 0);

	fwGeneral_tableResizeColumns(ELEMENTS_MODE_TABLE, 8);
	fwCloseProgressBar(&quot;Tables refreshed.&quot;);
}
]]></script>
   </events>
  </shape>
  <shape Name="copyDefinitionButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">43</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 666</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">30</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 666</prop>
    <prop name="Size">56 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Copy</prop>
     <prop name="en_US.iso88591">Copy</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	copyDefinitionDp = definitionDp;
	definitionDpClipboardText.text = copyDefinitionDp;
	pasteDefinitionButton.enabled(TRUE);
}]]></script>
   </events>
  </shape>
  <shape Name="pasteDefinitionButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">44</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">71 666</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">32</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">71 666</prop>
    <prop name="Size">56 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Paste</prop>
     <prop name="en_US.iso88591">Paste</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	int elementType;
	string value, sourceDpe, targetDpe;
	dyn_int dynTypes = makeDynString(DPEL_DYN_BOOL, DPEL_DYN_INT, DPEL_DYN_STRING, DPEL_DYN_FLOAT);
	dyn_string dynValue;
	
	for(int i = 1; i &lt;= dynlen(definitionElementsWithoutGroups); i++)
	{
		sourceDpe = copyDefinitionDp + &quot;.&quot; + definitionElementsWithoutGroups[i];
		targetDpe = definitionDp + &quot;.&quot; + definitionElementsWithoutGroups[i];
		if(dynContains(dynTypes, dpElementType(sourceDpe)) &gt; 0)
		{
			dynValue = makeDynString();
			dpGet(sourceDpe, dynValue);
			//DebugN(&quot;Setting &quot; + targetDpe + &quot; to &quot; + dynValue);
			dpSet(targetDpe, dynValue);
		}
		else
		{
			value = &quot;&quot;;
			dpGet(sourceDpe, value);
			//DebugN(&quot;Setting &quot; + targetDpe + &quot; to &quot; + value);
			dpSet(targetDpe, value);
		}
	}
}]]></script>
   </events>
  </shape>
  <shape Name="definitionDpClipboardText" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">45</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">200 660</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">33</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">200 660</prop>
    <prop name="Size">162 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="DPfunctButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">49</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">173 181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">36</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">173 181</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">DP funct</prop>
     <prop name="en_US.iso88591">DP funct</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwConfigs_FW_DP_FUNCT;

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));

}]]></script>
   </events>
  </shape>
  <shape Name="addressDIPButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">50</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">811.75 149</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">35</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">812 149</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">DIP</prop>
     <prop name="en_US.iso88591">DIP</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = substr(this.name, 0, strpos(this.name, &quot;Button&quot;));

	selectButton(this.name, 2);
	refreshVisible(makeDynString(selectedGroup));
}]]></script>
   </events>
  </shape>
  <shape Name="dummyButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">52</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">730 10</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">39</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">730 10</prop>
    <prop name="Size">161 21</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Dummy for selected colors</prop>
     <prop name="en_US.iso88591">Dummy for selected colors</prop>
    </prop>
   </properties>
  </shape>
  <shape Name="addToVendorNodeButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">54</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">157 628</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">40</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">157 628</prop>
    <prop name="Size">121 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Add to vendor node</prop>
     <prop name="en_US.iso88591">Add to vendor node</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	dyn_string vendorNodes, vendorNode, exceptionInfo, childrenDpTypes;
	
	fwNode_getNodes(&quot;&quot;, fwNode_TYPE_VENDOR, vendorNodes, exceptionInfo);
	
	fwGeneral_selectFromList(vendorNodes, vendorNode, exceptionInfo);
	
	if(dynlen(exceptionInfo) &gt; 0 )
		fwExceptionHandling_display(exceptionInfo);
		
	// check if any node was selected
	if(dynlen(vendorNode) == 0)
	{
		return;
	}
	
	fwNode_getDpTypes(vendorNode[1], childrenDpTypes, exceptionInfo);

	// if the dp type is not yet in the list, then add it
	if(dynContains(childrenDpTypes, deviceDpTypes.text) &lt; 1)
	{
		dynAppend(childrenDpTypes, deviceDpTypes.text);
		fwNode_setDpTypes(vendorNode, childrenDpTypes, exceptionInfo);
	}
	
	if(dynlen(exceptionInfo) &gt; 0 )
		fwExceptionHandling_display(exceptionInfo);
	
//	DebugN(&quot;vendorNodes &quot; + vendorNodes + vendorNode);
}]]></script>
   </events>
  </shape>
  <shape Name="cmdConversionButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">58</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">461 181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">43</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">461 181</prop>
    <prop name="Size">66 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Convers</prop>
     <prop name="en_US.iso88591">Convers</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwConfigs_FW_CMD_CONV;

	selectButton(this.name, 1);
	refreshVisible(makeDynString(selectedGroup));

}]]></script>
   </events>
  </shape>
  <shape Name="definitionDpText" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">61</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">363 149</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">45</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">363 149</prop>
    <prop name="Size">450 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="elementsTable" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">0</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">30 240</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,11,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,11,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">30 240</prop>
    <prop name="Size">851 381</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">18</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">AlwaysOn</prop>
    <prop name="HScrollBarMode">AlwaysOn</prop>
    <prop name="Column">
     <prop name="Name">#1</prop>
     <prop name="Width">30</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">num</prop>
      <prop name="en_US.iso88591">num</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#2</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#2</prop>
      <prop name="en_US.iso88591">#2</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#3</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#3</prop>
      <prop name="en_US.iso88591">#3</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#4</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#4</prop>
      <prop name="en_US.iso88591">#4</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#5</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#5</prop>
      <prop name="en_US.iso88591">#5</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#6</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#6</prop>
      <prop name="en_US.iso88591">#6</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#7</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#7</prop>
      <prop name="en_US.iso88591">#7</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#8</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#8</prop>
      <prop name="en_US.iso88591">#8</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#9</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#9</prop>
      <prop name="en_US.iso88591">#9</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#10</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#10</prop>
      <prop name="en_US.iso88591">#10</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#11</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#11</prop>
      <prop name="en_US.iso88591">#11</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#12</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#12</prop>
      <prop name="en_US.iso88591">#12</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#13</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#13</prop>
      <prop name="en_US.iso88591">#13</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#14</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#14</prop>
      <prop name="en_US.iso88591">#14</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#15</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#15</prop>
      <prop name="en_US.iso88591">#15</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#16</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#16</prop>
      <prop name="en_US.iso88591">#16</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#17</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#17</prop>
      <prop name="en_US.iso88591">#17</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#18</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#18</prop>
      <prop name="en_US.iso88591">#18</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#19</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#19</prop>
      <prop name="en_US.iso88591">#19</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#20</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#20</prop>
      <prop name="en_US.iso88591">#20</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#21</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#21</prop>
      <prop name="en_US.iso88591">#21</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#22</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#22</prop>
      <prop name="en_US.iso88591">#22</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#23</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#23</prop>
      <prop name="en_US.iso88591">#23</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#24</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#24</prop>
      <prop name="en_US.iso88591">#24</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#25</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#25</prop>
      <prop name="en_US.iso88591">#25</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#26</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#26</prop>
      <prop name="en_US.iso88591">#26</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#27</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#27</prop>
      <prop name="en_US.iso88591">#27</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#28</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#28</prop>
      <prop name="en_US.iso88591">#28</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#29</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#29</prop>
      <prop name="en_US.iso88591">#29</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#30</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#30</prop>
      <prop name="en_US.iso88591">#30</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#31</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#31</prop>
      <prop name="en_US.iso88591">#31</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#32</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#32</prop>
      <prop name="en_US.iso88591">#32</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#33</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#33</prop>
      <prop name="en_US.iso88591">#33</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#34</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#34</prop>
      <prop name="en_US.iso88591">#34</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#35</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#35</prop>
      <prop name="en_US.iso88591">#35</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#36</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#36</prop>
      <prop name="en_US.iso88591">#36</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#37</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#37</prop>
      <prop name="en_US.iso88591">#37</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#38</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#38</prop>
      <prop name="en_US.iso88591">#38</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#39</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#39</prop>
      <prop name="en_US.iso88591">#39</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#40</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#40</prop>
      <prop name="en_US.iso88591">#40</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#41</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#41</prop>
      <prop name="en_US.iso88591">#41</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#42</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#42</prop>
      <prop name="en_US.iso88591">#42</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#43</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#43</prop>
      <prop name="en_US.iso88591">#43</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#44</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#44</prop>
      <prop name="en_US.iso88591">#44</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#45</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#45</prop>
      <prop name="en_US.iso88591">#45</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#46</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#46</prop>
      <prop name="en_US.iso88591">#46</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#47</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#47</prop>
      <prop name="en_US.iso88591">#47</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#48</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#48</prop>
      <prop name="en_US.iso88591">#48</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#49</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#49</prop>
      <prop name="en_US.iso88591">#49</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#50</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#50</prop>
      <prop name="en_US.iso88591">#50</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#51</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#51</prop>
      <prop name="en_US.iso88591">#51</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#52</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#52</prop>
      <prop name="en_US.iso88591">#52</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#53</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#53</prop>
      <prop name="en_US.iso88591">#53</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#54</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#54</prop>
      <prop name="en_US.iso88591">#54</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#55</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#55</prop>
      <prop name="en_US.iso88591">#55</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#56</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#56</prop>
      <prop name="en_US.iso88591">#56</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#57</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#57</prop>
      <prop name="en_US.iso88591">#57</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#58</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#58</prop>
      <prop name="en_US.iso88591">#58</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">#59</prop>
     <prop name="Width">128</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">#59</prop>
      <prop name="en_US.iso88591">#59</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int row, string column, string value)
{
	bool canHave;
	int i, alertType, dpeType, index;
	string dpe, aux, group, columnHeader, panel, configGroup;
	dyn_float df;
	dyn_string ds, dynAux, exceptionInfo, dps, propertyDefinition;
	dyn_anytype line;
	
	line = elementsTable.getLineN(row);
	//DebugN(line);

	index = elementsTable.nameToColumn(column);
	//DebugN(&quot;row &quot; + row + &quot; column &quot; + column + &quot; column index &quot; + index);

	// Do nothing for column with row number 
	if(index &lt; 1)  
	{
		return;
	}
	
	columnHeader = elementsTable.columnHeader(index);
	//DebugN(&quot;columHeader &quot; + columnHeader);
	
	// If it is a canHave column then toggle its current value
 	if(columnHeader == &quot;canHave&quot;) 
	{
		canHave = line[index + 1];
		//DebugN(&quot;canHave &quot; + canHave);
		if(canHave)
			elementsTable.cellValueRC(row, column, makeDynString(FALSE));
		else
			elementsTable.cellValueRC(row, column, makeDynString(TRUE));			
		return;
	}

	// Reset config object
	// fill in empty entries (20 should be put as a constant or taken as maximum lenght of object from somewhere)
	g_dpeConfigObject = makeDynAnytype();	
	for(i = 1; i &lt;= 20; i++)
	{
		g_dpeConfigObject[i] = makeDynString(&quot;&quot;);			
	}
	
	// Read values applicable only to config objects
	if(selectedGroup != &quot;properties&quot;)
	{
		// Get the dpe name
		index = elementsTable.nameToColumn(&quot;properties.dpes&quot;);
		g_dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_NAME][1] = line[index + 1];
		
		// always set config to active
		g_dpeConfigObject[fwConfigs_DPE_OBJECT_ACTIVE][1] = TRUE;
	
		// get type for element. At least one dp instance is required
		dps = dpNames(&quot;*&quot;, deviceDpTypes.text);	
		if(dynlen(dps) == 0)
		{
			fwException_raise(exceptionInfo,
												&quot;WARNING&quot;,
												&quot;There should be at least one dp of type &quot; + deviceDpTypes.text + &quot; to be able to proceed&quot;,
												&quot;&quot;);
			fwExceptionHandling_display(exceptionInfo);
			return;
		}
		g_dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_TYPE][1] = dpElementType(dps[1] + g_dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_NAME][1]);
		
		// if editing a specific address type
		if(selectedGroup == fwPeriphAddress_TYPE_OPC || selectedGroup == fwPeriphAddress_TYPE_DIM
			|| selectedGroup == fwPeriphAddress_TYPE_S7 || selectedGroup == fwPeriphAddress_TYPE_SNMP 
			|| selectedGroup == fwPeriphAddress_TYPE_OPCUA)
		{
			configGroup = fwConfigs_FW_ADDRESS;
			g_dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE] = selectedGroup;
		} 
		else
		{
			configGroup = selectedGroup;
		}	
			
		panel =	fwConfigs_FW_PANEL[fwConfigs_PVSS[configGroup]];
		
		if (selectedGroup == fwPeriphAddress_TYPE_S7) 
		{
			panel= &quot;fwDevice/fwDeviceEditS7Address.pnl&quot;;
		} 
		else if (selectedGroup == fwPeriphAddress_TYPE_SNMP) 
		{
			panel= &quot;fwDevice/fwDeviceEditSNMPAddress.pnl&quot;;        
		} 
		else if (configGroup  == fwConfigs_FW_DP_FUNCT) 
		{
			panel= &quot;fwDevice/fwDeviceEditDpFunction.pnl&quot;;        
		}  
	}
	else
	{
		panel = &quot;fwDevice/fwDeviceEditPropertyDefinition.pnl&quot;;
	}
	
	// Read values from table into object
	for(int i = 1; i &lt;= dynlen(definitionElements); i++)
	{
		if(definitionElements[i][2] == selectedGroup)
		{			
			// initialize in case there is bad data
			aux = &quot;&quot;;
			
			// get data from table line
			index = elementsTable.nameToColumn(definitionElements[i][1]);
			aux = line[index + 1];
			strreplace(aux, strtolower(fwDevice_DEFINITION_EMPTY_ENTRY), &quot;&quot;);
			strreplace(aux, strtoupper(fwDevice_DEFINITION_EMPTY_ENTRY), &quot;&quot;);
			
			index = definitionElements[i][4];
			// if it is a dyn type, proces it before putting it into the object
			// consider that operand || is not a separator
//			if((strpos(aux, &quot;|&quot;) &gt;= 0) &amp;&amp; (strpos(aux, &quot;||&quot;) &lt;= 0))
			if(definitionElements[i][5] == DYN_DYN_STRING_VAR)
			{
				fwGeneral_stringToDynString(aux, dynAux,&quot;|&quot;,false);				
				if(index &gt; 0)
					g_dpeConfigObject[index] = dynAux;
			}
			else
			{	
				if(index &gt; 0)
					g_dpeConfigObject[index][1] = aux;
			}			
//			DebugN(i, definitionElements[i], index, aux, dynAux, definitionElements[i][4], g_dpeConfigObject);
		}
	}

	// For alerts it is necessary to specify the alert type if there is a default defined
	if(selectedGroup == fwConfigs_FW_ALERT_HDL)
	{	
		// if there are some classes we consider that there is a default
		if (g_dpeConfigObject[fwAlertConfig_DPE_OBJECT_CLASSES] != &quot;&quot;)
		{
			switch(g_dpeConfigObject[fwConfigs_DPE_OBJECT_DPE_TYPE][1])
			{
				case DPEL_BOOL:
				case DPEL_DYN_BOOL:
					g_dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1] = DPCONFIG_ALERT_BINARYSIGNAL;
					break;
				case DPEL_INT:
				case DPEL_UINT:
				case DPEL_FLOAT:
					g_dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1] = DPCONFIG_ALERT_NONBINARYSIGNAL;
					break;
				default:
					g_dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1] = DPCONFIG_NONE;
					break;
			}	
		}
		else
		{
			g_dpeConfigObject[fwConfigs_DPE_OBJECT_TYPE][1] = DPCONFIG_NONE;
		}
	}

//DebugN(&quot;Object before editing: &quot;, g_dpeConfigObject);
	
	// Open panel to edit object
	if(panel != &quot;&quot;)
	{
		ChildPanelOnCentralModalReturn(	panel,
																		&quot;Configure &quot; + selectedGroup,
																		makeDynString(&quot;$sDpeConfigObjectVarName:g_dpeConfigObject&quot;,
																									&quot;$sDpe:&quot;,
																									&quot;$bHierarchyBrowser:FALSE&quot;),
																		df, ds);
	}
	else
	{
			fwException_raise(exceptionInfo,
											&quot;WARNING&quot;,
											&quot;Configuration panel not defined for &quot; + selectedGroup,
											&quot;&quot;);
			return;
	}

	//DebugN(&quot;Object after editing: &quot;, g_dpeConfigObject);

	// Put returned object back in the table
	for(int i = 1; i &lt;= dynlen(definitionElements); i++)
	{
		if(definitionElements[i][2] == selectedGroup)
		{
			index = definitionElements[i][4];
			if(index &gt; 0)
			{
				fwGeneral_dynStringToString(g_dpeConfigObject[index], aux);
				if(aux == &quot;&quot;)
					aux = fwDevice_DEFINITION_EMPTY_ENTRY;
				elementsTable.cellValueRC(row, definitionElements[i][1], makeDynString(aux));
			}
		}
	}
}










]]></script>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	elementsTable.sortOnClick(FALSE);
	elementsTable.selectByClick(TABLE_SELECT_LINE);


	elementsTable.tableMode(TABLE_SELECT_BROWSE);
	elementsTable.selectByClick(TABLE_SELECT_LINE_COLUMN);
}]]></script>
    <script name="DoubleClicked" isEscaped="1"><![CDATA[main()
{
	//DebugN(&quot;Double click&quot;);
}]]></script>
   </events>
  </shape>
  <shape Name="deleteTypeDefinitionButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">62</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">727 57</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">46</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">727 57</prop>
    <prop name="Size">145 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Delete type definition</prop>
     <prop name="en_US.iso88591">Delete type definition</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{	
	bool ok;
	dyn_string exceptionInfo;
	
	fwGeneral_openMessagePanel(&quot;Are you sure you want to delete the definition for &quot; + deviceTypes.text + &quot;?&quot;, ok, exceptionInfo, &quot;Delete definition confirmation&quot;);
	
	if(ok)
	{
		dpDelete(deviceDpTypes.text + fwDevice_DEFINITION_SUFIX);
	}
	
	init();
}]]></script>
   </events>
  </shape>
  <shape Name="deleteModelDefinitionButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">63</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">727 87</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">47</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">727 87</prop>
    <prop name="Size">145 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Delete model definition</prop>
     <prop name="en_US.iso88591">Delete model definition</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{

}]]></script>
   </events>
  </shape>
  <shape Name="panelsTable" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">56</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">-9 58</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">42</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">30 240</prop>
    <prop name="Size">851 381</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">20</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">dpe</prop>
     <prop name="Width">200</prop>
     <prop name="Visible">False</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">dpe</prop>
      <prop name="en_US.iso88591">dpe</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">parameter</prop>
     <prop name="Width">300</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Parameter</prop>
      <prop name="en_US.iso88591">Parameter</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">value</prop>
     <prop name="Width">500</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Value</prop>
      <prop name="en_US.iso88591">Value</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int row, string column, string value)
{
	string list;
 	dyn_float df;
	dyn_string ds;
	
//	fwGeneral_stringToDynString();
	ChildPanelOnCentralModalReturn(	&quot;fwGeneral/fwGeneralEditDynString.pnl&quot;, 
									&quot;Edit panel list&quot;,
									makeDynString(	&quot;$sTitle:Edit panel list&quot;,
													&quot;$dsValues:&quot; + value,
													&quot;$sEditMode:PANEL_LIST&quot;),
									df, ds);
									
//	DebugN(&quot;df &quot; + df + &quot; ds &quot; + ds);
	
	if(df[1] == 0)
	{
		list = ds;
		// remove spaces
		strreplace(list, &quot; &quot;, &quot;&quot;);
		
		// put in the table the new list of panels
		this.cellValueRC(row, column, makeDynString(list));	
	}							
}]]></script>
   </events>
  </shape>
  <shape Name="generalTable" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">67</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">49 -41</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">50</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">30 240</prop>
    <prop name="Size">851 381</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">20</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">dpe</prop>
     <prop name="Width">200</prop>
     <prop name="Visible">False</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">dpe</prop>
      <prop name="en_US.iso88591">dpe</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">parameter</prop>
     <prop name="Width">300</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Parameter</prop>
      <prop name="en_US.iso88591">Parameter</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">value</prop>
     <prop name="Width">500</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Value</prop>
      <prop name="en_US.iso88591">Value</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.tableMode(TABLE_SELECT_BROWSE);
	this.selectByClick(TABLE_SELECT_LINE_COLUMN);
}]]></script>
   </events>
  </shape>
  <shape Name="addressOPCGeneralButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">68</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">32 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">49</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">32 210</prop>
    <prop name="Size">80 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OPC general</prop>
     <prop name="en_US.iso88591">OPC general</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectButton(this.name, 2);
	editMode(ADDRESSOPCGENERAL_MODE);
	
	fwGeneral_tableResizeColumns(ADDRESSOPCGENERAL_MODE_TABLE);
}]]></script>
   </events>
  </shape>
  <shape Name="addressOpcGeneralTable" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">70</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">230 -181</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">51</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">30 240</prop>
    <prop name="Size">851 381</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">20</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">dpe</prop>
     <prop name="Width">200</prop>
     <prop name="Visible">False</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">dpe</prop>
      <prop name="en_US.iso88591">dpe</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">parameter</prop>
     <prop name="Width">300</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Parameter</prop>
      <prop name="en_US.iso88591">Parameter</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">value</prop>
     <prop name="Width">500</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Value</prop>
      <prop name="en_US.iso88591">Value</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.tableMode(TABLE_SELECT_BROWSE);
	this.selectByClick(TABLE_SELECT_LINE_COLUMN);
}]]></script>
   </events>
  </shape>
  <shape Name="addressDimGeneralTable" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">73</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">309 -260</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">53</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">30 240</prop>
    <prop name="Size">851 381</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">20</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">dpe</prop>
     <prop name="Width">200</prop>
     <prop name="Visible">False</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">dpe</prop>
      <prop name="en_US.iso88591">dpe</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">parameter</prop>
     <prop name="Width">300</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Parameter</prop>
      <prop name="en_US.iso88591">Parameter</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">value</prop>
     <prop name="Width">500</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Value</prop>
      <prop name="en_US.iso88591">Value</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.tableMode(TABLE_SELECT_BROWSE);
	this.selectByClick(TABLE_SELECT_LINE_COLUMN);
}]]></script>
   </events>
  </shape>
  <shape Name="addressDIMButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">74</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">398 212</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">54</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">485 210</prop>
    <prop name="Size">70 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">DIM items</prop>
     <prop name="en_US.iso88591">DIM items</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwPeriphAddress_TYPE_DIM; //substr(this.name, 0, strpos(this.name, &quot;Button&quot;));

	selectButton(this.name, 2);
	refreshVisible(makeDynString(selectedGroup));
}]]></script>
   </events>
  </shape>
  <shape Name="addElementsButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">78</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">635 628</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">58</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">635 628</prop>
    <prop name="Size">121 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Add elements</prop>
     <prop name="en_US.iso88591">Add elements</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	int i;
	string dpesColumnName, propertyNamesColumnName;
	dyn_string allDptElements, allDptElementTypes, tableElements, notInTableElements, newElements, exceptionInfo;

	fwGeneral_getDpElements(&quot;&quot;, deviceDpTypes.text, allDptElements, allDptElementTypes, exceptionInfo, makeDynInt(DPEL_STRUCT));
	
	fwGeneral_tableGetColumnValues(&quot;elementsTable&quot;, &quot;dpes&quot;, tableElements, exceptionInfo);
	
	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
		return;
	}
	
	// see which elements of the type are not yet in the table
	for(i = 1; i &lt;= dynlen(allDptElements); i++)
	{
		if(dynContains(tableElements, allDptElements[i]) &lt; 1)
			dynAppend(notInTableElements, allDptElements[i]);
	}
	
	// ask the user which elements he wants to add
	fwGeneral_selectFromList(notInTableElements, newElements, exceptionInfo, TRUE, &quot;Select new dp elements&quot;);
	
	// add the elements in the table
	fwGeneral_tableColumnHeaderToName(&quot;elementsTable&quot;, &quot;dpes&quot;, dpesColumnName, exceptionInfo);
	fwGeneral_tableColumnHeaderToName(&quot;elementsTable&quot;, &quot;names&quot;, propertyNamesColumnName, exceptionInfo);
	elementsTable.appendLines(dynlen(newElements), dpesColumnName, newElements, propertyNamesColumnName, newElements);
	elementsTable.lineVisible(elementsTable.lineCount);
	
	refreshIndexNumber();
	//DebugN(&quot;newElements &quot; + newElements);
	
	if(dynlen(exceptionInfo) &gt; 0)
	{
		fwExceptionHandling_display(exceptionInfo);
	}
}]]></script>
   </events>
  </shape>
  <shape Name="createVendorNodeButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">79</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">30 628</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">59</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">30 628</prop>
    <prop name="Size">121 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Create vendor node</prop>
     <prop name="en_US.iso88591">Create vendor node</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{	
	ChildPanelOnCentralModal(	&quot;fwNode/fwNodeCreate.pnl&quot;,
										&quot;Create new node&quot;,
 										makeDynString(	&quot;$sNodeType:&quot; + fwNode_TYPE_VENDOR));	
}]]></script>
   </events>
  </shape>
  <shape Name="removeElementsButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">81</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">761 628</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">61</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">761 628</prop>
    <prop name="Size">121 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Remove elements</prop>
     <prop name="en_US.iso88591">Remove elements</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	bool ok;
	int i;
	string columnName;
	dyn_string dpesInTable, deleteElements, exceptionInfo;
	
	fwGeneral_tableGetColumnValues(&quot;elementsTable&quot;, &quot;dpes&quot;, dpesInTable, exceptionInfo);

	// ask the user which elements he wants to add
	fwGeneral_selectFromList(dpesInTable, deleteElements, exceptionInfo, TRUE, &quot;Select dp elements to remove from table&quot;);

	// if no elements selected for deletion, return
	if(dynlen(deleteElements) &lt; 1)
		return;
		
	// ask the user for confirmation of removal
	fwGeneral_openMessagePanel(	&quot;Are you sure you want to remove the selected elements from the definition?&quot;,
								ok, exceptionInfo, &quot;Remove elements confirmation&quot;);
	
	if(ok)
	{
		fwGeneral_tableColumnHeaderToName(&quot;elementsTable&quot;, &quot;dpes&quot;, columnName, exceptionInfo);
		
		// go through the lines in the table to see which one to delete
		for(i = elementsTable.lineCount; i &gt;= 0; i--)
		{
			if(dynContains(deleteElements, elementsTable.cellValueRC(i, columnName)) &gt; 0)
			{
				elementsTable.deleteLineN(i);
				//DebugN(&quot;Deleted line &quot; + i);
			}
		}
		refreshIndexNumber();
	}
}]]></script>
   </events>
  </shape>
  <shape Name="addressS7Button" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">82</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">580 212</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">62</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">633 210</prop>
    <prop name="Size">70 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">S7 items</prop>
     <prop name="en_US.iso88591">S7 items</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwPeriphAddress_TYPE_S7;//substr(this.name, 0, strpos(this.name, &quot;Button&quot;));

	selectButton(this.name, 2);
	refreshVisible(makeDynString(selectedGroup));
}]]></script>
   </events>
  </shape>
  <shape Name="addressS7GeneralButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">83</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">490 212</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">63</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">560 210</prop>
    <prop name="Size">70 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">S7 general</prop>
     <prop name="en_US.iso88591">S7 general</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectButton(this.name, 2);
	editMode(ADDRESSS7GENERAL_MODE);
	
	fwGeneral_tableResizeColumns(ADDRESSS7GENERAL_MODE_TABLE);
}]]></script>
   </events>
  </shape>
  <shape Name="addressS7GeneralTable" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">86</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">309 -260</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">66</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">30 240</prop>
    <prop name="Size">851 381</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">20</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">dpe</prop>
     <prop name="Width">200</prop>
     <prop name="Visible">False</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">dpe</prop>
      <prop name="en_US.iso88591">dpe</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">parameter</prop>
     <prop name="Width">300</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Parameter</prop>
      <prop name="en_US.iso88591">Parameter</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">value</prop>
     <prop name="Width">500</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Value</prop>
      <prop name="en_US.iso88591">Value</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.tableMode(TABLE_SELECT_BROWSE);
	this.selectByClick(TABLE_SELECT_LINE_COLUMN);
}]]></script>
   </events>
  </shape>
  <shape Name="addressSNMPButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">87</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">801 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">67</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">801 210</prop>
    <prop name="Size">80 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">SNMP items</prop>
     <prop name="en_US.iso88591">SNMP items</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwPeriphAddress_TYPE_SNMP;//substr(this.name, 0, strpos(this.name, &quot;Button&quot;));

	selectButton(this.name, 2);
	refreshVisible(makeDynString(selectedGroup));
}
]]></script>
   </events>
  </shape>
  <shape Name="addressSNMPGeneralButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">88</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">708 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">68</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">708 210</prop>
    <prop name="Size">90 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">SNMP general</prop>
     <prop name="en_US.iso88591">SNMP general</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectButton(this.name, 2);
	editMode(ADDRESSSNMPGENERAL_MODE);
	
	fwGeneral_tableResizeColumns(ADDRESSSNMPGENERAL_MODE_TABLE);
}
]]></script>
   </events>
  </shape>
  <shape Name="addressSNMPGeneralTable" shapeType="TABLE" layerId="0">
   <properties>
    <prop name="serialId">89</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">309 -260</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">69</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">30 240</prop>
    <prop name="Size">851 381</prop>
    <prop name="ShowColumnHeader">True</prop>
    <prop name="ShowRowHeader">False</prop>
    <prop name="SortOnClick">True</prop>
    <prop name="RowHeight">20</prop>
    <prop name="RowHeaderWidth">30</prop>
    <prop name="GridType">Cross</prop>
    <prop name="VScrollBarMode">Auto</prop>
    <prop name="HScrollBarMode">Auto</prop>
    <prop name="Column">
     <prop name="Name">dpe</prop>
     <prop name="Width">200</prop>
     <prop name="Visible">False</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">dpe</prop>
      <prop name="en_US.iso88591">dpe</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">parameter</prop>
     <prop name="Width">300</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">False</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Parameter</prop>
      <prop name="en_US.iso88591">Parameter</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Column">
     <prop name="Name">value</prop>
     <prop name="Width">500</prop>
     <prop name="Visible">True</prop>
     <prop name="Editable">True</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Value</prop>
      <prop name="en_US.iso88591">Value</prop>
     </prop>
     <prop name="ToolTipText">
      <prop name="en_US.utf8"></prop>
      <prop name="en_US.iso88591"></prop>
     </prop>
    </prop>
    <prop name="Row">
     <prop name="Name"></prop>
     <prop name="Label">
      <prop name="en_US.utf8">#1</prop>
      <prop name="en_US.iso88591">#1</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.tableMode(TABLE_SELECT_BROWSE);
	this.selectByClick(TABLE_SELECT_LINE_COLUMN);
}]]></script>
   </events>
  </shape>
  <shape Name="addressOPCUAButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">90</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">303 210</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">70</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">303 210</prop>
    <prop name="Size">94 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OPC UA items</prop>
     <prop name="en_US.iso88591">OPC UA items</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectedGroup = fwPeriphAddress_TYPE_OPCUA;//substr(this.name, 0, strpos(this.name, &quot;Button&quot;));

	selectButton(this.name, 2);
	refreshVisible(makeDynString(selectedGroup));
}]]></script>
   </events>
  </shape>
  <shape Name="addressOPCUAGeneralButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">91</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">32 212</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">71</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">201 210</prop>
    <prop name="Size">100 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OPC UA general</prop>
     <prop name="en_US.iso88591">OPC UA general</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	selectButton(this.name, 2);
	editMode(ADDRESSOPCUAGENERAL_MODE);
	
	fwGeneral_tableResizeColumns(ADDRESSOPCUAGENERAL_MODE_TABLE);
}]]></script>
   </events>
  </shape>
 </shapes>
</panel>
