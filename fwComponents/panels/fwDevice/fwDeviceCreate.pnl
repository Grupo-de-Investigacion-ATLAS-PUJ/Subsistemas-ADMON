<?xml version="1.0" encoding="UTF-8"?>
<panel version="14">
 <properties>
  <prop name="Name">
   <prop name="en_US.utf8"></prop>
   <prop name="en_US.iso88591"></prop>
  </prop>
  <prop name="Size">895 489</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">0 0</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="KeepInMemory">False</prop>
  <prop name="DPI">96</prop>
  <prop name="PDPI">96</prop>
  <prop name="layoutType">VBox</prop>
  <prop name="layoutLeftMargin">0</prop>
  <prop name="layoutRightMargin">0</prop>
  <prop name="layoutTopMargin">0</prop>
  <prop name="layoutBottomMargin">0</prop>
 </properties>
 <events>
  <script name="ScopeLib" isEscaped="1"><![CDATA[const int MESSAGE_MAX_WIDTH = 100;

const int SELECTION_ADDRESS = 1;
const int SELECTION_ALERT   = 2;

const int SINGLE_CREATION_MODE  = 0;
const int MULTIPLE_CREATION_MODE    = 1;

const string DEVICE_NAME_MESSAGE    = &quot;Enter a name ...&quot;;
const string DEVICE_COMMENT_MESSAGE = &quot;Enter a comment ...&quot;;

int width, startingNumber;

int g_iMode;
string g_sParentName;
string defaultName;
bool g_bDeviceTypesInDollarParam;
dyn_string g_dsDpTypes;
dyn_dyn_string g_ddsChildDpTypesAndModels, newDeviceChildrenDpTypesAndModels;

// ------------------------------------------------------------------------------------------------

apply(dyn_string deviceNames, dyn_string &amp;exceptionInfo)
{
    int i, j, slots, startingNumber, childWidth;
    dyn_bool defaults;
    dyn_string device, childDevice, parentDevice, children;
    dyn_dyn_string modelProperties, childModelProperties;

    allControlsEnabled(FALSE);
    fwOpenProgressBar(&quot;Adding devices&quot;, &quot;Starting...&quot;, 1);

    parentDevice = makeDynString($sDpName, &quot;&quot;, &quot;&quot;, &quot;&quot;);

    // common values for all devices to be created
    fwDevice_getDpType(deviceTypeText.text, device[fwDevice_DP_TYPE], exceptionInfo);

    if (deviceCommentText.text == DEVICE_COMMENT_MESSAGE)
        device[fwDevice_COMMENT] = &quot;&quot;;
    else
        device[fwDevice_COMMENT] = deviceCommentText.text;

    device[fwDevice_MODEL] = deviceModelText.text;

    // if children have to be created, get necessary info
    if (alsoChildrenCheckButton.state(0)) {
        // get information for device being created
        fwDevice_getModelProperties(device, modelProperties, exceptionInfo);
        slots = modelProperties[fwDevice_MODEL_SLOTS][1];
        startingNumber = modelProperties[fwDevice_MODEL_STARTING_NUMBER][1];

        // get children information
        fwDevice_getDpType(childrenTypeText.text, childDevice[fwDevice_DP_TYPE], exceptionInfo);
        childDevice[fwDevice_MODEL] = childrenModelText.text;
    }

    string addressType, alarmType;
    getValue(&quot;AddressTypeSelector&quot;, &quot;userData&quot;, AddressTypeSelector.selectedPos, addressType);
    getValue(&quot;AlarmsTypeSelector&quot;, &quot;userData&quot;, AlarmsTypeSelector.selectedPos, alarmType);

    // first: create the devices
    for (i = 1; i &lt;= dynlen(deviceNames); i++) {
        device[fwDevice_DP_NAME] = deviceNames[i];
//      DebugN(&quot;Creating &quot;, device, parentDevice, defaults);
        createDevice(device, parentDevice, addressType, exceptionInfo);

        // after creation the device name has been updated with the dp name
        deviceNames[i] = device[fwDevice_DP_NAME];

        // if there were any exceptions don't try to create the children
        if (dynlen(exceptionInfo) &gt; 0)
            break;

        // create the children if user asked for it
        if (alsoChildrenCheckButton.state(0)) {
            fwDevice_getModelProperties(childDevice,    childModelProperties, exceptionInfo);
            childWidth = childModelProperties[fwDevice_MODEL_WIDTH][1];

            for (j = startingNumber; j &lt; startingNumber + slots; j += childWidth) {
                fwDevice_getDefaultName(childDevice, j, childDevice[fwDevice_DP_NAME], exceptionInfo);
//              DebugN(&quot;Creating &quot;, childDevice, device, defaults);
                createDevice(childDevice, device, addressType, exceptionInfo);

                // if there were any exceptions don't continue creating the children
                if (dynlen(exceptionInfo) &gt; 0)
                    break;
            }
        }
    }

    // control if there were any errors in the creation, and if so don't try to configure
    if (dynlen(exceptionInfo) &gt; 0) {
        fwCloseProgressBar(&quot;There were errors while creating the devices.&quot;);
        allControlsEnabled(TRUE);
        return;
    } else {
        fwShowProgressBar(&quot;Devices created successfully...&quot;);
    }

    // second: configure the devices
    for (i = 1; i &lt;= dynlen(deviceNames); i++) {
        device[fwDevice_DP_NAME] = deviceNames[i];
//      DebugN(&quot;Configuring &quot;, device, defaults, dpExists(deviceNames[i]));
        configureDevice(device, addressType, alarmType, exceptionInfo);

        // configure the children if user asked for it
        if (alsoChildrenCheckButton.state(0)) {
            fwDevice_getChildren(device[fwDevice_DP_NAME], fwDevice_HARDWARE, children, exceptionInfo);
            for (j = 1; j &lt;= dynlen(children); j++) {
                childDevice[fwDevice_DP_NAME] = children[j];
                configureDevice(childDevice, addressType, alarmType, exceptionInfo);
            }
        }
    }

    // control if there were any errors in the configuration
    if (dynlen(exceptionInfo) &gt; 0) {
        fwCloseProgressBar(&quot;There were errors while configuring the devices.&quot;);
        allControlsEnabled(TRUE);
        return;
    } else {
        fwCloseProgressBar(&quot;Devices created and configured successfully.&quot;);
    }

    allControlsEnabled(TRUE);
}

// ------------------------------------------------------------------------------------------------

applyMultiple(bool &amp;isCancelled, dyn_string &amp;exceptionInfo)
{
    bool thereAreFreeSlots, checkSlots = FALSE;
    int i, j, normalizedPosition, index, position, slots;
    string prefix, name;
    dyn_int freeSlots, tempFreeSlots;
    dyn_float df;
    dyn_string list, list2, devicesToBeCreated, notPossibleToCreateDevices, ds;


    // check that the numeric fields are positive integers
    if (changingNameText1.text != &quot;&quot; || changingNameText2.text != &quot;&quot;) {
        checkPositiveIntegerField(&quot;changingNameText1&quot;, exceptionInfo);
        checkPositiveIntegerField(&quot;changingNameText2&quot;, exceptionInfo);
    }

    if (changingNameText3.text != &quot;&quot; || changingNameText4.text != &quot;&quot;) {
        checkPositiveIntegerField(&quot;changingNameText3&quot;, exceptionInfo);
        checkPositiveIntegerField(&quot;changingNameText4&quot;, exceptionInfo);
    }

    if (dynlen(exceptionInfo))
        return;


    processFields(changingNameText1.text,
                  changingNameText2.text,
                  fixedNameText1.text,
                  makeDynString(&quot;&quot;),
                  list,
                  changingDigits1.text,
                  exceptionInfo);

    processFields(changingNameText3.text,
                  changingNameText4.text,
                  fixedNameText2.text,
                  list,
                  list2,
                  changingDigits2.text,
                  exceptionInfo);

//  DebugN(&quot;devicesToBeCreatedList &quot; + devicesToBeCreatedList);

    // devices which exist or go into no empty slots cannot be created
    // check if position can be used (first normalize it to range [1..numberOfSlots])
    fwDevice_getModelSlots(makeDynString(g_sParentName), slots, exceptionInfo);
//  DebugN(&quot;slots &quot; + slots);
    if (slots &gt; 0) {
        fwDevice_getFreeSlots(makeDynString(g_sParentName), freeSlots, exceptionInfo);
        checkSlots = TRUE;
//      DebugN(&quot;freeSlots &quot; + freeSlots);
    }
    for (i = 1; i &lt;= dynlen(list2); i++) {
        // check if device exists
        if (dpExists($sDpName + fwDevice_HIERARCHY_SEPARATOR + list2[i])) {
            prefix = &quot;EXISTS&quot;;
        } else {
            // see if all slots required by the model are free
            if (checkSlots) {
                thereAreFreeSlots = TRUE;
                tempFreeSlots = freeSlots;
                fwDevice_getPosition(list2[i], name, position, exceptionInfo);
                normalizedPosition = position - startingNumber + 1;

//              DebugN(list2[i], name, position, width, normalizedPosition);

                for (j = 0; j &lt; width; j++) {
                    index = dynContains(tempFreeSlots, normalizedPosition + j);
                    if (index &lt; 1) {
                        thereAreFreeSlots = FALSE;
                        break;
                    }
                    dynRemove(tempFreeSlots, index);
                }
                if (thereAreFreeSlots) {
                    freeSlots = tempFreeSlots;
                } else {
                    prefix = &quot;NO_FREE_SLOTS&quot;;
                }
            }
        }

        // if there is any prefix, the device cannot be created
        if (prefix != &quot;&quot;) {
            dynAppend(notPossibleToCreateDevices, list2[i] + &quot;;&quot; + prefix);
        } else {
            dynAppend(devicesToBeCreated, list2[i]);
        }

        prefix = &quot;&quot;;
    }

    ChildPanelOnCentralModalReturn(&quot;fwDevice/fwDeviceCreateMultipleSelectList.pnl&quot;,
                                   &quot;Select Devices&quot;,
                                   makeDynString(&quot;$sPanelTitle:Select Devices&quot;,
                                                 &quot;$ddsList1:&quot; + notPossibleToCreateDevices,
                                                 &quot;$ddsList2:&quot; + devicesToBeCreated),
                                   df, ds);
//  DebugN(&quot;ds &quot; + ds);
    if (dynlen(ds) &gt; 0) {
        isCancelled = FALSE;
        fwGeneral_stringToDynString(ds[1], list);
        apply(list, exceptionInfo);
    } else {
        isCancelled = TRUE;
    }
}

// ------------------------------------------------------------------------------------------------

processFields(string field1, string field2, string prefix,
              dyn_string list1, dyn_string &amp;list2, string digits,
              dyn_string &amp;exceptionInfo)
{
    int index1, index2;
    string name, aux;

    // initialize output list
    list2 = makeDynString();

    // check that either both values or none were entered
    if (((field1 == &quot;&quot;) &amp;&amp; (field2 != &quot;&quot;)) ||
        ((field1 != &quot;&quot;) &amp;&amp; (field2 == &quot;&quot;))) {
        fwException_raise(exceptionInfo,
                          &quot;ERROR&quot;,
                          &quot;Please enter a value for both changing fields or leave both of them empty&quot;,
                          &quot;&quot;);
        fwExceptionHandling_display(exceptionInfo);
        return;
    }

    // if the changing fields are empty built simple list from list1
    if (field1 == &quot;&quot;) {
        for (int i = 1; i &lt;= dynlen(list1); i++)
            list2[i] = list1[i] + prefix;
    } else {
        // put into integers and order if necessary
        index1  = field1;
        index2  = field2;
        if (index1 &gt; index2)
            swap(index1, index2);

        // create list with possible combinations
        for (int i = 1; i &lt;= dynlen(list1); i++) {
            for (int j = index1; j &lt;= index2; j++) {
                aux = list1[i] + prefix;
                sprintf(name, &quot;%s%0&quot; + digits + &quot;d&quot;, aux, j);
                //DebugN(name, list1[i], prefix, j, digits);
                dynAppend(list2, name);
            }
        }
    }
    //DebugN(field1, field2, index1, index2);
}

// ------------------------------------------------------------------------------------------------

createDevice(dyn_string &amp;device, dyn_string parentDevice, string addressType, dyn_string &amp;exceptionInfo)
{
    bool isOk;
    string deviceName, deviceNameChecked, message;
    dyn_string addressParameters;

//      DebugN(&quot;Creating device &quot; + devices[i]);

    // Check for valid dp name (only device name is checked because of /'s)
    fwDevice_getName(device[fwDevice_DP_NAME], deviceName, exceptionInfo);
    deviceNameChecked = deviceName;

    if (nameCheck(deviceNameChecked, NAMETYPE_DP)) {
        fwException_raise(exceptionInfo, &quot;ERROR&quot;, deviceName + &quot; is not a valid device name.&quot;, &quot;&quot;);
        return;
    }

    // Check if address can be set
    if (addressType!=fwDevice_ADDRESS_NONE) {
        if (addressType != fwDevice_ADDRESS_DEFAULT) {
            fwDevice_getAddressDefaultParams(device[fwDevice_DP_TYPE],
                                             addressParameters,
                                             exceptionInfo,
                                             device[fwDevice_MODEL],
                                             &quot;&quot;,
                                             addressType);
            if (dynlen(exceptionInfo) &gt; 0) {
                fwExceptionHandling_display(exceptionInfo);
                return;
            }
        } else {
            addressParameters = addressType;
        }

        fwShowProgressBar(&quot;Checking address...&quot;);

        fwDevice_checkAddress(device, addressParameters, isOk, exceptionInfo);

        if (dynlen(exceptionInfo)) {
            fwCloseProgressBar(&quot;Device creation cancelled. Cannot set address.&quot;);
            return;
        }

        if (!isOk) {
            fwDevice_getAddressDefaultParams(device[fwDevice_DP_TYPE], addressParameters, exceptionInfo, device[fwDevice_MODEL], &quot;&quot;, addressType);
            DebugFTN(&quot;FW_INFO&quot;, &quot;fwDeviceCreate.pnl: addressParameters &quot; + addressParameters);
            fwException_raise(exceptionInfo,
                              &quot;ERROR&quot;,
                              &quot;Cannot create device because the driver is not running (number &quot; + addressParameters[fwDevice_ADDRESS_DRIVER_NUMBER] + &quot;)&quot;,
                              &quot;&quot;);
            fwCloseProgressBar(&quot;Device creation cancelled. Cannot set address.&quot;);
            return;
        }
    }

    // Create device
    fwShowProgressBar(&quot;Creating device &quot; + parentDevice[fwDevice_DP_NAME] + fwDevice_HIERARCHY_SEPARATOR + device[fwDevice_DP_NAME]);
    fwDevice_create(device, parentDevice, exceptionInfo);

    if (dynlen(exceptionInfo) &gt; 0) {
        fwCloseProgressBar(&quot;There were errors while creating the device.&quot;);
        return;
    } else {
        fwShowProgressBar(&quot;Device created successfully.&quot;);
    }

    device[fwDevice_DP_NAME] = parentDevice[fwDevice_DP_NAME] + fwDevice_HIERARCHY_SEPARATOR + device[fwDevice_DP_NAME];
}

// ------------------------------------------------------------------------------------------------

configureDevice(dyn_string device, string addressType, string alarmType, dyn_string &amp;exceptionInfo)
{
    dyn_string addressParameters;

    // Set the addresses for the device
    if (addressType!=fwDevice_ADDRESS_NONE) {
        if (addressType != fwDevice_ADDRESS_DEFAULT) {
            fwDevice_getAddressDefaultParams(device[fwDevice_DP_TYPE],
                                             addressParameters,
                                             exceptionInfo,
                                             device[fwDevice_MODEL],
                                             &quot;&quot;,
                                             addressType);
            if (dynlen(exceptionInfo) &gt; 0) {
                fwExceptionHandling_display(exceptionInfo);
                return;
            }
        } else {
            addressParameters = addressType;
        }


        fwShowProgressBar(&quot;Setting hardware connection...&quot;);
        fwDevice_setAddress(device[fwDevice_DP_NAME],
                            addressParameters,
                            exceptionInfo);
    }

    // Set the alerts for the device
    if (alarmType==fwDevice_ALERT_DEFAULT) {
        fwShowProgressBar(&quot;Setting alarms for...&quot;);
        fwDevice_setAlert(device[fwDevice_DP_NAME], fwDevice_ALERT_SET, exceptionInfo);
    }
}

// ------------------------------------------------------------------------------------------------

initDeviceModelCombobox()
{
    int index;
    string deviceDpType;
    dyn_string models, deviceDpTypes, exceptionInfo;

    if (deviceTypeText.selectedPos&lt;0) {
        enableBasicControls(false);
        feedbackText.text=&quot;Cannot determine selected device type - likely device model consistency problem&quot;;
        feedbackArrow.visible=true;
        feedbackText.visible=true;
        throwError(makeError(&quot;&quot;, PRIO_WARNING, ERR_CONTROL, 0, &quot;Cannot determine selected device type - likely device model consistency problem&quot;,
                             __FILE__+&quot;, &quot;+ __LINE__, __FUNCTION__+&quot;()&quot;));
        return;
    }
    deviceDpType = g_dsDpTypes[deviceTypeText.selectedPos];
//  DebugN(&quot;initDeviceModelCombobox()&quot;);

    // if list of dp types to be created passed, keep old behaviour
    if (g_bDeviceTypesInDollarParam) {
        // try to get models specifying parent
        fwDevice_getTypeModels(deviceDpType, $sDpName, models, exceptionInfo);

        // if there were no models with a specific parent, try the general query
        if (dynlen(models) == 0)
            fwDevice_getTypeModels(deviceDpType, &quot;&quot;, models, exceptionInfo);
    } else {
        deviceDpTypes = getDynString(g_ddsChildDpTypesAndModels, 1);
        index = dynContains(deviceDpTypes, deviceDpType);
        models = g_ddsChildDpTypesAndModels[index];

        // remove dp type
        dynRemove(models, 1);
    }

    // Put the models in the combobox
    deviceModelText.items = models;

    if (models == &quot;&quot;) {
        deviceModelText.items = makeDynString(&quot;&quot;);
        deviceModelText.visible = FALSE;
        deviceModelLabel.visible = FALSE;
    }

    deviceModelText.selectedPos(1);

    updateDefaultName();
}

// ------------------------------------------------------------------------------------------------

void initDeviceTypeCombobox()
{
    dyn_string dsDeviceTypes, exceptionInfo;

    for (int i = 1; i &lt;= dynlen(g_dsDpTypes); i++) {
        fwDevice_getType(g_dsDpTypes[i], dsDeviceTypes[i], exceptionInfo);
    }

    deviceTypeText.items = dsDeviceTypes;
    deviceTypeText.selectedPos(1);
}

// ------------------------------------------------------------------------------------------------

void initDeviceNameField(string sDollarParam)
{
    string sDeviceName;

    if (isDollarDefined(sDollarParam)) {
        sDeviceName = $sDeviceName;
    }

    if (sDeviceName != &quot;&quot;) {
        deviceNameText.text = $sDeviceName;
    } else {
        deviceNameText.text = DEVICE_NAME_MESSAGE;
    }
}

// ------------------------------------------------------------------------------------------------

void initPositionSpinButton()
{
    int startingNumber, numberOfSlots;
    dyn_string  exceptionInfo;

    // if there is a parent check to see if it has slots
    if (g_sParentName != &quot;&quot;) {
        fwDevice_getModelSlots(makeDynString(g_sParentName), numberOfSlots, exceptionInfo);
        fwDevice_getModelStartingNumber(makeDynString(g_sParentName), startingNumber, exceptionInfo);

        if (numberOfSlots == 0) {
            numberOfSlots = fwDevice_DEFAULT_SLOTS_NUMBER;
        }

        positionSpinButton.sbMaximum = startingNumber + numberOfSlots - 1;
        positionSpinButton.sbMinimum = startingNumber;

        // initialize position spin button if requested
        if (isDollarDefined(&quot;$iPosition&quot;)) {
            positionSpinButton.text = $iPosition;
        } else {
            positionSpinButton.text = startingNumber;
        }
    }
}

// ------------------------------------------------------------------------------------------------

synchronized updateDefaultName()
{
    bool isPossibleToCreate = TRUE;
    int iPos, position = positionSpinButton.text,   normalizedPosition;
    dyn_bool canHaveDefaults;
    dyn_int freeSlots;
    string dpt;
    dyn_string dsItems, device;
    dyn_string exceptionInfo;
    dyn_dyn_string modelProperties;

    if (deviceTypeText.selectedPos &lt; 0) {
        DebugTN(__FUNCTION__, &quot;WARNING: cannot get the selected device type; probable device model inconsistency; abandoning&quot;);
        return;
    }

    dpt=g_dsDpTypes[deviceTypeText.selectedPos];

    device = makeDynString(&quot;&quot;, dpt, &quot;&quot;, deviceModelText.text);
    // Rebuild the combo-boxes for address and alerts options.
    AddressTypeSelector.deleteAllItems();
    AddressTypeSelector.appendItem(fwDevice_ADDRESS_NONE); // text
    AddressTypeSelector.userData(1, fwDevice_ADDRESS_NONE); // the selected value to be used
    AlarmsTypeSelector.deleteAllItems();
    AlarmsTypeSelector.appendItem(fwDevice_ALERT_NONE);  // text
    AlarmsTypeSelector.userData(1, fwDevice_ALERT_NONE); // the selected value to be used



    fwDevice_canHaveDefaults(device, canHaveDefaults, exceptionInfo);
    // enable default configs only if device type supports it
    if (canHaveDefaults[fwDEVICE_DEFAULT_CONFIGS]) {
        AlarmsTypeSelector.appendItem(fwDevice_ALERT_DEFAULT);
        AlarmsTypeSelector.userData(2, fwDevice_ALERT_DEFAULT);
        AlarmsTypeSelector.selectedPos(2);

        // append possible address types
        string sAddressParent;
        dyn_string addressTypes;
        string defAddrType = fwDevice_getDefaultAddressType(dpt, exceptionInfo, deviceModelText.text, &quot;&quot;, false);
        if (dynlen(exceptionInfo)) { fwExceptionHandling_display(exceptionInfo); enableBasicControls(FALSE); return; }

        fwDevice_getPossibleAddressTypes(dpt, addressTypes, exceptionInfo, deviceModelText.text, &quot;&quot;);
        if (dynlen(exceptionInfo)) { fwExceptionHandling_display(exceptionInfo); enableBasicControls(FALSE); return; }

        int selectDefaultPos=1; // index start at 1 in the combo box!
        for (int i=1; i&lt;=dynlen(addressTypes); i++) {
            string addrTypeText=addressTypes[i];
            if (addressTypes[i]==defAddrType) {
                AddressTypeSelector.appendItem(addressTypes[i]+&quot; (DEFAULT)&quot;);
                // we need i+1 because there is already &quot;NONE&quot; at the beginning
                AddressTypeSelector.userData(i+1, fwDevice_ADDRESS_DEFAULT);
                selectDefaultPos=i+1; // because at [1] we already have entry for &quot;NONE&quot;
            } else {
                AddressTypeSelector.appendItem(addressTypes[i]);
                // we need i+1 because there is already &quot;NONE&quot; at the beginning
                AddressTypeSelector.userData(i+1, addressTypes[i]);
            }

            // If parent is already defined with an address type, and it is on the list of default addresses, select it on the combo-box
            sAddressParent = initializeMiddleware($sDpName);
            if (sAddressParent == &quot;&quot;) {
                sAddressParent = fwDevice_ADDRESS_DEFAULT;
            }

            if (dynContains(addressTypes, sAddressParent) &gt; 0) {
                // Parent address is in the list of possible default address types

                // If parent address is diferent, search its position on the combo-box and select it
                if (sAddressParent != defAddrType) {
                    dsItems = AddressTypeSelector.items();
                    iPos    = dynContains(dsItems, sAddressParent);
                    if (iPos &gt; 0) {
                        selectDefaultPos = iPos;
                    }
                }
            }

        }
        AddressTypeSelector.selectedPos(selectDefaultPos);
    } else {
        AddressTypeSelector.selectedPos(1);
        AlarmsTypeSelector.selectedPos(1);
    }

    // enable automatic children generation only if device type supports it
    if (canHaveDefaults[fwDEVICE_DEFAULT_CHILDREN]) {
        alsoChildrenCheckButton.enabled = TRUE;
        alsoChildrenCheckButton.state(0) = TRUE;

        childTypeLabel.enabled = TRUE;
        childrenTypeText.enabled = TRUE;
        childModelLabel.enabled = TRUE;
        childrenModelText.enabled = TRUE;

        childrenFrame.text = &quot;Children&quot;;
        childrenFrame.enabled = TRUE;

        updateChildrenTypes(exceptionInfo);
    } else {
//      DebugN(&quot;No automatic children creation&quot;);
        alsoChildrenCheckButton.state(0) = FALSE;

        alsoChildrenCheckButton.enabled = FALSE;
        childrenTypeText.deleteAllItems();
        childrenTypeText.items = makeDynString(&quot;&quot;);
        childrenTypeText.selectedPos(1);

        childTypeLabel.enabled = FALSE;
        childrenTypeText.enabled = FALSE;
        childModelLabel.enabled = FALSE;
        childrenModelText.enabled = FALSE;

        childrenModelText.deleteAllItems();
        childrenModelText.items = makeDynString(&quot;&quot;);
        childrenModelText.selectedPos(1);

        childrenFrame.text = &quot;Device type does not allow children&quot;;
        childrenFrame.enabled = FALSE;
    }

    // update width for the corresponding model
    fwDevice_getModelProperties(device, modelProperties, exceptionInfo);
//  DebugN(&quot;model properties &quot; + modelProperties);
    if (dynlen(modelProperties) &gt;= fwDevice_MODEL_WIDTH) {
        widthText.text = modelProperties[fwDevice_MODEL_WIDTH][1];
        width = modelProperties[fwDevice_MODEL_WIDTH][1];
    } else {
        widthText.text = 0;
        width = 0;
    }

    // if width is 0, it doesn't make sense to display it
    if (width == 0) {
        widthText.visible = FALSE;
        widthLabel.visible = FALSE;
    } else {
        widthText.visible = TRUE;
        widthLabel.visible = TRUE;
    }

    // we assume the parent has slots when it is possible to have a default name
    fwDevice_getDefaultName(device, positionSpinButton.text, defaultName, exceptionInfo);
    if (defaultName != &quot;&quot;) {
        // update multiple creation values
        changingDigits1.text = modelProperties[fwDevice_MODEL_NAME_DIGITS][1];
        changingDigits1.editable = FALSE;
        fixedNameText1.text = modelProperties[fwDevice_MODEL_NAME_ROOT][1];

        if (g_iMode == SINGLE_CREATION_MODE) {
            deviceNameText.text = defaultName;

            // check if position can be used (first normalize it to range [1..numberOfSlots])
            fwDevice_getFreeSlots(makeDynString(g_sParentName), freeSlots, exceptionInfo);
            fwDevice_getModelStartingNumber(makeDynString(g_sParentName), startingNumber, exceptionInfo);
            normalizedPosition = position - startingNumber + 1;

            // see if all slots required by the model are free
            for (int i = 0; i &lt; width; i++) {
                if (!dynContains(freeSlots, normalizedPosition + i)) {
                    isPossibleToCreate = FALSE;
                    break;
                }
            }
            DebugFTN(&quot;FW_INFO&quot;, &quot;updateDefaultName(): freeslots = &quot; + freeSlots + &quot; normalizedPosition &quot; + normalizedPosition +
                     &quot; position &quot; + position + &quot; startingNumber &quot; + startingNumber);

            // if slot is not free disable user choice
            if (!dynContains(freeSlots, normalizedPosition)) {
                // slot is occupied
                enableBasicControls(FALSE);
            } else {
                // slot is free so enable user choice and see allow creation if possible
                enableBasicControls(TRUE);
                if (!isPossibleToCreate) {
                    // slot is not occupied but width is bigger than available slots
                    okButton.enabled(FALSE);
                    applyButton.enabled(FALSE);
                }
            }

            // default names can be used so display position spinbutton
            positionSpinButton.visible = TRUE;
            positionLabel.visible = TRUE;
        } else { // multiple creation mode
            enableBasicControls(TRUE);
        }
    } else {
        // default names cannot be used so don't display position spinbutton
        positionSpinButton.visible = FALSE;
        positionLabel.visible = FALSE;
    }
}



/** Get the address type for a device

    Query the address types of all the device elements,
    make sure they are all of the same type.
    The information needs to be taken from the _address.._drv_ident config elements
    (they exist only for DPEs that have the addess configs though).

    There is a special case: &quot;OPCCLIENT&quot; should be returned as &quot;OPC&quot;.

*/
string initializeMiddleware(string sDeviceDp)
{
    dyn_string exceptionInfo;

    // for all the children,
    // FWCORE-3434: avoid using dpQuery as it triggers the ETM-1783 bug
    // instead, we will use dpGets over all the elements of the specified device

    dyn_string dpes=dpNames(sDeviceDp+&quot;.**&quot;);
    if (dynlen(dpes)&lt;1) {
        fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;initializeMiddleware() -&gt; could not get device elements for &quot;+sDeviceDp, &quot;&quot;);
        fwExceptionHandling_display(exceptionInfo);
        return &quot;&quot;;
    }

    // firsly check the address config exists
    dyn_string dpeAddrTypes;
    dyn_int addrTypes;
    for (int i=1; i&lt;=dynlen(dpes); i++) dpeAddrTypes[i]=dpes[i]+&quot;:_address.._type&quot;;
    dpGet(dpeAddrTypes, addrTypes);
    dyn_errClass err=getLastError();
    if (dynlen(err)) {
        fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;initializeMiddleware() -&gt; could not query address configs:&quot;+getErrorText(err), &quot;&quot;);
        fwExceptionHandling_display(exceptionInfo);
        return &quot;&quot;;
    }

    // for the DPEs that have it, retrieve the _drv_ident
    dyn_string dpeDrvIdents;
    dyn_string idents;
    for (int i=1; i&lt;=dynlen(dpeAddrTypes); i++) if (addrTypes[i]!=0) dynAppend(dpeDrvIdents, dpes[i]+&quot;:_address.._drv_ident&quot;);
    if (dynlen(dpeDrvIdents)&gt;0) {
        dpGet(dpeDrvIdents, idents);
        err=getLastError();
        if (dynlen(err)) {
            fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;initializeMiddleware() -&gt; could not query address types:&quot;+getErrorText(err), &quot;&quot;);
            fwExceptionHandling_display(exceptionInfo);
            return &quot;&quot;;
        }
        idents.sort();
        idents.unique();
        // remove the &quot;&quot;
        int idx=idents.indexOf(&quot;&quot;);
        if (idx&gt;=0) idents.removeAt(idx);
    }

    if (idents.count()==1) {
        string drvType=idents.first();
        if (drvType==&quot;OPCCLIENT&quot;) drvType=&quot;OPC&quot;;
        return drvType;
    } else if (idents.count()&gt;1) {
        fwException_raise(exceptionInfo, &quot;ERROR&quot;, &quot;initializeMiddleware() -&gt; Multiple address types found in device: &quot;+sDeviceDp, &quot;&quot;);
        DebugTN(__FUNCTION__, &quot;Multiple address types found in device: &quot;+sDeviceDp, idents);
        fwExceptionHandling_display(exceptionInfo);
        return &quot;&quot;;
    }
    // if no addresses found - return the default
    return fwDevice_ADDRESS_DEFAULT;
}

// ------------------------------------------------------------------------------------------------

synchronized updateChildrenTypes(dyn_string &amp;exceptionInfo)
{
    dyn_string  childrenDpTypes;
    dyn_string  device = makeDynString(&quot;&quot;, g_dsDpTypes[deviceTypeText.selectedPos], &quot;&quot;, deviceModelText.text);

//  DebugN(&quot;updateChildrenTypes()&quot;);
//  fwDevice_getChildrenDpTypes(device, childrenDpTypes, exceptionInfo);

    fwDevice_getPossibleChildren(device, newDeviceChildrenDpTypesAndModels, exceptionInfo);
    childrenDpTypes = getDynString(newDeviceChildrenDpTypesAndModels, 1);

//  DebugN(&quot;updateChildrenTypes(): device &quot; + device);
//  DebugN(&quot;updateChildrenTypes(): newDeviceChildrenDpTypesAndModels &quot; + newDeviceChildrenDpTypesAndModels);
    // convert device dp types to device types
    for (int i = 1; i &lt;= dynlen(childrenDpTypes); i++) {
        fwDevice_getType(childrenDpTypes[i], childrenDpTypes[i], exceptionInfo);
    }

    childrenTypeText.items = childrenDpTypes;
    if (dynlen(childrenDpTypes) &gt; 0)
        childrenTypeText.selectedPos(1);
    updateChildrenModels(exceptionInfo);
}

// ------------------------------------------------------------------------------------------------

synchronized updateChildrenModels(dyn_string &amp;exceptionInfo)
{
    int index;
    string deviceDpType;
    dyn_string models, deviceDpTypes;

    /*  fwDevice_getTypeModels(deviceDpType, &quot;&quot;, models, exceptionInfo, deviceModelText.text);
        // if no models defined for specified parent model, broaden
        // the search taking into account only the parent type
        if(dynlen(models) == 0)
        {
            fwDevice_getTypeModels(deviceDpType, &quot;&quot;, models, exceptionInfo, &quot;&quot;);
        }

    */
    if (childrenTypeText.text==&quot;&quot;) {
        dynClear(models);
    } else {
        fwDevice_getDpType(childrenTypeText.text, deviceDpType, exceptionInfo); // the function does not raise exceptionInfos
        deviceDpTypes = getDynString(newDeviceChildrenDpTypesAndModels, 1);
        index = dynContains(deviceDpTypes, deviceDpType);
        if (index&gt;0) {
            models = newDeviceChildrenDpTypesAndModels[index];
            // remove dp type
            if (dynlen(models)&gt;1) dynRemove(models, 1);
        } else {
            dynClear(models);
        }

    }
    childrenModelText.items = models;
    if (dynlen(models) &gt; 0)
        childrenModelText.selectedPos(1);
}

// ------------------------------------------------------------------------------------------------

enableBasicControls(bool bEnabled)
{
    okButton.enabled(bEnabled);
    applyButton.enabled(bEnabled);

    AddressTypeSelector.enabled(bEnabled);
    AlarmsTypeSelector.enabled(bEnabled);

    deviceTypeText.enabled(bEnabled);
    deviceModelText.enabled(bEnabled);
    deviceNameText.enabled(bEnabled);
    deviceCommentText.enabled(bEnabled);

    feedbackText.visible(!bEnabled);
    feedbackArrow.visible(!bEnabled);
}

// ------------------------------------------------------------------------------------------------

allControlsEnabled(bool enabled)
{
    closeButton.enabled(true); // have it always enabled in case of error
    modeTab.enabled(enabled);
    positionSpinButton.enabled(enabled);
}

// ------------------------------------------------------------------------------------------------

showMultipleControls(bool show)
{
    // multiple mode controls
    fixedNameText1.visible(show);
    plusLabel1.visible(show);
    seqNumberLabel1.visible(show);
    fromLabel.visible(show);
    changingNameText1.visible(show);
    toLabel.visible(show);
    changingNameText2.visible(show);
    changingDigitsLabel1.visible(show);
    changingDigits1.visible(show);
    plusLabel2.visible(show);
    fixedLabel2.visible(show);
    fixedNameText2.visible(show);
    plusLabel3.visible(show);
    changingLabel2.visible(show);
    fromLabel2.visible(show);
    changingNameText3.visible(show);
    toLabel2.visible(show);
    changingNameText4.visible(show);
    changingDigitsLabel2.visible(show);
    changingDigits2.visible(show);

    // single mode controls
    deviceNameText.visible(!show);

    // position controls only updated when there is a default name
    // if there isn't it is hidden by default
    if (defaultName != &quot;&quot;) {
        positionSpinButton.enabled(!show);
        show = FALSE;
    }

    // second part of name for multiple creation only enabled
    // if no default naming
    plusLabel2.enabled(show);
    fixedLabel2.enabled(show);
    fixedNameText2.enabled(show);
    plusLabel3.enabled(show);
    changingLabel2.enabled(show);
    fromLabel2.enabled(show);
    changingNameText3.enabled(show);
    toLabel2.enabled(show);
    changingNameText4.enabled(show);
    changingDigitsLabel2.enabled(show);
    changingDigits2.enabled(show);
}

// ------------------------------------------------------------------------------------------------

checkPositiveIntegerField(string fieldName, dyn_string &amp;exceptionInfo)
{
    bool isPositiveInteger;
    shape fieldObject = getShape(fieldName);
    string strValue = fieldObject.text;

    checkStringIsPositiveInteger(strValue, isPositiveInteger, exceptionInfo);
    if (!isPositiveInteger) {
        fwException_raise(exceptionInfo,
                          &quot;ERROR&quot;,
                          &quot;Please introduce a positive integer value&quot;,
                          &quot;&quot;);
        return;
    }
}

// ------------------------------------------------------------------------------------------------

checkStringIsPositiveInteger(string integer, bool &amp;isPositiveInteger, dyn_string &amp;exceptionInfo)
{
    string aux;

    if (integer == &quot;&quot;) {
        isPositiveInteger = FALSE;
        return;
    }

    sscanf(integer, &quot;%[0-9]&quot;, aux);
    if (strlen(integer) == strlen(aux))
        isPositiveInteger = TRUE;
    else
        isPositiveInteger = FALSE;
}

// ------------------------------------------------------------------------------------------------

swap(int &amp;a, int &amp;b)
{
    int c;
    c = a;
    a = b;
    b = c;
}








]]></script>
  <script name="Initialize" isEscaped="1"><![CDATA[main()
{
    allControlsEnabled(FALSE);

    // in case of an error, have the Cancel button enabled, ok and apply disabled
//  closeButton.enabled=true;
//  applyButton.enabled=false;
//  okButton.enabled=false;

    g_sParentName = $sDpName;
    g_bDeviceTypesInDollarParam = hasContent(&quot;$sDeviceTypes&quot;);
    g_dsDpTypes = getDpTypes();
    g_iMode = SINGLE_CREATION_MODE;

    initDeviceTypeCombobox();
    initDeviceNameField(&quot;$sDeviceName&quot;);
    initPositionSpinButton();
    // Will be triggered by change event in DeviceTypeCombox?
    initDeviceModelCombobox();

    showMultipleControls(FALSE);

    allControlsEnabled(TRUE);
}

// ------------------------------------------------------------------------------------------------

/*
  Check if $-param has content
   */
bool hasContent(string sDollarParam)
{
    string sDeviceTypes;

    if (isDollarDefined(sDollarParam)) {
        sDeviceTypes = $sDeviceTypes;
    }

    return sDeviceTypes != &quot;&quot;;
}

/*
  Obtain list of devices that can be created either from $-param or from parent
   */
dyn_string getDpTypes()
{
    dyn_string dsDpTypes, exceptionInfo;
    dyn_string dsParentDevice = makeDynString($sDpName, &quot;&quot;, &quot;&quot;, &quot;&quot;);

    if (g_bDeviceTypesInDollarParam) {
        fwGeneral_stringToDynString($sDeviceTypes, dsDpTypes);
    } else { // parent passed
        fwDevice_getPossibleChildren(dsParentDevice, g_ddsChildDpTypesAndModels, exceptionInfo);
        dsDpTypes = getDynString(g_ddsChildDpTypesAndModels, 1);
    }

    return dsDpTypes;
}



]]></script>
 </events>
 <layers>
  <layer layerId="0">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer1</prop>
  </layer>
  <layer layerId="1">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer2</prop>
  </layer>
  <layer layerId="2">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer3</prop>
  </layer>
  <layer layerId="3">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer4</prop>
  </layer>
  <layer layerId="4">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer5</prop>
  </layer>
  <layer layerId="5">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer6</prop>
  </layer>
  <layer layerId="6">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer7</prop>
  </layer>
  <layer layerId="7">
   <prop name="Visible">True</prop>
   <prop name="Name">Layer8</prop>
  </layer>
 </layers>
 <shapes>
  <shape Name="bgRectangle" shapeType="RECTANGLE" layerId="0">
   <properties>
    <prop name="serialId">2</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">20 530</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_Transparent</prop>
    <prop name="BackColor">FwCorporateColor</prop>
    <prop name="TabOrder">51</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">-1 35</prop>
    <prop name="maximumSize">-1 35</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">0.7044917257683314 0 0 1.133333333333318 0.7044917257683314 1.133333333333318</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Location">-1 -1</prop>
    <prop name="Size">1270 31</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="title" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">3</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">256.5 20.5</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">white</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">28</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Fixed"/>
    </prop>
    <prop name="layoutAlignment">AlignLeading|AlignVCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">0.9949748743718592 0 0 0.9777777777778207 -247.2010050251256 -14.52222222222315</prop>
    <prop name="Location">258.5 21.5</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,19,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,19,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Add Device</prop>
     <prop name="en_US.iso88591">Add Device</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">0</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="childTypeLabel" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">4</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">272.5 443.4999999999999</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">48</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="maximumSize">45 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">1.194029850746224 0 0 1.33333333333331 -49.76119402983858 -186.6666666666563</prop>
    <prop name="Location">274.5 444.4999999999999</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Type:</prop>
     <prop name="en_US.iso88591">Type:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="childModelLabel" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">5</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">637.5 462</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">49</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="maximumSize">45 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">0.9876543209877057 0 0 1.285714285714302 -46.60493827163779 -189.2857142857217</prop>
    <prop name="Location">639.5 463</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Model:</prop>
     <prop name="en_US.iso88591">Model:</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="deviceTypeText" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">6</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">95 88</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">1</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">200 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="MinimumExpanding"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">95 88</prop>
    <prop name="Size">200 23</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	initDeviceModelCombobox();
}
]]></script>
   </events>
  </shape>
  <shape Name="deviceModelText" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">7</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">95 117</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">200 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="MinimumExpanding"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">95 117</prop>
    <prop name="Size">200 23</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	dyn_string exceptionInfo;

	updateChildrenTypes(exceptionInfo);
	updateDefaultName();
}]]></script>
   </events>
  </shape>
  <shape Name="positionSpinButton" shapeType="SPIN_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">8</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">517 168</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">4</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">50 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="MinimumExpanding"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">522 88</prop>
    <prop name="Size">50 23</prop>
    <prop name="MinimumID">0</prop>
    <prop name="MaximumID">100</prop>
    <prop name="IncrAccelerator">1</prop>
    <prop name="Position">0</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	updateDefaultName();
}]]></script>
   </events>
  </shape>
  <shape Name="deviceCommentText" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">9</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">144.0596387032896 329.7272727272727</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">5</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">95 347</prop>
    <prop name="Size">781 23</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="ClearButtonEnabled">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	this.text = DEVICE_COMMENT_MESSAGE;
}]]></script>
    <script name="KeyboardFocusOut" isEscaped="1"><![CDATA[main()
{
    if (this.text == &quot;&quot;) this.text = DEVICE_COMMENT_MESSAGE;
}
]]></script>
    <script name="KeyboardFocusIn" isEscaped="1"><![CDATA[main()
{
    if (this.text == DEVICE_COMMENT_MESSAGE) this.text = &quot;&quot;;
}
]]></script>
   </events>
  </shape>
  <shape Name="applyButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">10</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">720 446.5</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">20</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">-1 25</prop>
    <prop name="maximumSize">-1 25</prop>
    <prop name="layoutAlignment">AlignVCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">720 447.5</prop>
    <prop name="Size">80 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Apply</prop>
     <prop name="en_US.iso88591">Apply</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
    bool isCancelled;
    string deviceName;
    dyn_string exceptionInfo;

    if (g_iMode == MULTIPLE_CREATION_MODE) {
        applyMultiple(isCancelled, exceptionInfo);
    } else {
        if (deviceNameText.text == DEVICE_NAME_MESSAGE)
            deviceName = &quot;&quot;;
        else
            deviceName = deviceNameText.text;

        apply(makeDynString(deviceName), exceptionInfo);
    }

    if (dynlen(exceptionInfo) &gt; 0) {
        fwExceptionHandling_display(exceptionInfo);
    }
}
]]></script>
   </events>
  </shape>
  <shape Name="closeButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">11</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">806 447.5</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">21</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">-1 25</prop>
    <prop name="maximumSize">-1 25</prop>
    <prop name="layoutAlignment">AlignVCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">806 447.5</prop>
    <prop name="Size">80 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Cancel</prop>
     <prop name="en_US.iso88591">Cancel</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
	PanelOff();
}]]></script>
   </events>
  </shape>
  <shape Name="okButton" shapeType="PUSH_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">12</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">634 446.5</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_ButtonText</prop>
    <prop name="BackColor">_Button</prop>
    <prop name="TabOrder">19</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">-1 25</prop>
    <prop name="maximumSize">-1 25</prop>
    <prop name="layoutAlignment">AlignVCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">634 447.5</prop>
    <prop name="Size">80 24</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Text">
     <prop name="en_US.utf8">OK</prop>
     <prop name="en_US.iso88591">OK</prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main()
{
    bool isCancelled = FALSE;
    string deviceName;
    dyn_string exceptionInfo;

    if (g_iMode == MULTIPLE_CREATION_MODE) {
        applyMultiple(isCancelled, exceptionInfo);
    } else {
        if (deviceNameText.text == DEVICE_NAME_MESSAGE)
            deviceName = &quot;&quot;;
        else
            deviceName = deviceNameText.text;

        apply(makeDynString(deviceName), exceptionInfo);
    }

    if (!isCancelled) {
        if (dynlen(exceptionInfo) &gt; 0) {
            fwExceptionHandling_display(exceptionInfo);
        } else {
            PanelOff();
        }
    }
}
]]></script>
   </events>
  </shape>
  <shape Name="childrenModelText" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">13</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">401.4124293785279 446</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">17</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">634 404</prop>
    <prop name="Size">249 23</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
  </shape>
  <shape Name="childrenTypeText" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">14</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">480.3389830508467 416</prop>
    <prop name="Enable">False</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">16</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">327 404</prop>
    <prop name="Size">250 23</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Changed" isEscaped="1"><![CDATA[main()
{
	dyn_string exceptionInfo;
	updateChildrenModels(exceptionInfo);
}]]></script>
   </events>
  </shape>
  <shape Name="alsoChildrenCheckButton" shapeType="CHECK_BOX" layerId="0">
   <properties>
    <prop name="serialId">15</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">9.920289855072458 383.1</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">15</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">21 404</prop>
    <prop name="Size">140 23</prop>
    <prop name="Listitems">
     <prop name="Item">
      <prop name="Text">
       <prop name="en_US.utf8">Also create children</prop>
       <prop name="en_US.iso88591">Also create children</prop>
      </prop>
      <prop name="Select">False</prop>
     </prop>
    </prop>
   </properties>
   <events>
    <script name="Clicked" isEscaped="1"><![CDATA[main(int button, bool bState)
{
    childTypeLabel.enabled(bState);
    childrenTypeText.enabled(bState);
    childModelLabel.enabled(bState);
    childrenModelText.enabled(bState);
}
]]></script>
   </events>
  </shape>
  <shape Name="changingDigits2" shapeType="SPIN_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">17</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">646 232</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">13</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">50 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="MinimumExpanding"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">674 232</prop>
    <prop name="Size">50 22</prop>
    <prop name="MinimumID">0</prop>
    <prop name="MaximumID">9</prop>
    <prop name="IncrAccelerator">1</prop>
    <prop name="Position">0</prop>
   </properties>
  </shape>
  <shape Name="changingNameText4" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">18</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">552.5306122448983 199</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">12</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">50 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="MinimumExpanding"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">674 203</prop>
    <prop name="Size">125 23</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="ClearButtonEnabled">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="changingNameText3" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">19</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">552.5306122448983 170.2272727272725</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">11</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">50 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="MinimumExpanding"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">674 175</prop>
    <prop name="Size">125 22</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="ClearButtonEnabled">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="fixedNameText2" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">20</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">429 184</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">10</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">150 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="layoutAlignment">AlignTop</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">429 175</prop>
    <prop name="Size">150 23</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="ClearButtonEnabled">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="changingDigits1" shapeType="SPIN_BUTTON" layerId="0">
   <properties>
    <prop name="serialId">21</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">301 232</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">9</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">50 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">264 232</prop>
    <prop name="Size">50 22</prop>
    <prop name="MinimumID">0</prop>
    <prop name="MaximumID">9</prop>
    <prop name="IncrAccelerator">1</prop>
    <prop name="Position">0</prop>
   </properties>
  </shape>
  <shape Name="changingNameText2" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">22</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">313.7959183673452 201</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">8</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">50 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Minimum"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">264 203</prop>
    <prop name="Size">123 23</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="ClearButtonEnabled">False</prop>
    <prop name="TextFormat">[6d,True,False,AlignLeft,False]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="changingNameText1" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">23</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">308.8163265306103 171.181818181818</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">7</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">50 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Minimum"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">264 175</prop>
    <prop name="Size">123 22</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="ClearButtonEnabled">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="fixedNameText1" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">24</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">56.25146198830554 125.9999999999999</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">6</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">150 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="layoutAlignment">AlignTop</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">19 175</prop>
    <prop name="Size">150 23</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="ClearButtonEnabled">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <shape Name="widthText" shapeType="TEXT_FIELD" layerId="0">
   <properties>
    <prop name="serialId">25</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">532.1224489795918 87</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">46</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">522 117</prop>
    <prop name="Size">125 23</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">False</prop>
    <prop name="ClearButtonEnabled">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
  </shape>
  <reference parentSerial="36" Name="" referenceId="0">
   <properties>
    <prop name="FileName">objects/fwGeneral/fwHelpButton.pnl</prop>
    <prop name="Location">230 480</prop>
    <prop name="Geometry">1 0 0 1.083333333333352 631 -516.0000000000086</prop>
    <prop name="TabOrder">50</prop>
    <prop name="dollarParameters">
     <prop name="dollarParameter">
      <prop name="Dollar">$sPanelRelativePath</prop>
      <prop name="Value">fwDevice/fwDeviceCreate</prop>
     </prop>
    </prop>
    <prop name="minimumSize">-1 25</prop>
    <prop name="layoutAlignment">AlignRight|AlignTrailing</prop>
   </properties>
  </reference>
  <shape Name="feedbackText" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">46</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">21.99999999999992 401</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{255,102,102}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">86</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">-1 25</prop>
    <prop name="maximumSize">-1 25</prop>
    <prop name="layoutAlignment">AlignVCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">0.9999999999999998 0 0 1.428571428571417 4.000000000000083 -178.142857142852</prop>
    <prop name="Location">21.99999999999992 439</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="en_US.utf8">Slot is already used. Please select different position.</prop>
     <prop name="en_US.iso88591">Slot is already used. Please select different position.</prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="Transformable">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
   </properties>
  </shape>
  <shape Name="feedbackArrow" shapeType="POLYGON" layerId="0">
   <properties>
    <prop name="serialId">47</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 770</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">False</prop>
    <prop name="ForeColor">{255,102,102}</prop>
    <prop name="BackColor">{255,102,102}</prop>
    <prop name="TabOrder">87</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">-1 25</prop>
    <prop name="maximumSize">-1 25</prop>
    <prop name="layoutAlignment">AlignVCenter</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">0.693583333333325 0 0 1.189791666666651 2.06416666666675 -469.1395833333211</prop>
    <prop name="Closed">True</prop>
    <prop name="Points">
     <prop name="Location">10 770</prop>
     <prop name="Location">10 790</prop>
     <prop name="Location">20 780</prop>
     <prop name="Location">10 770</prop>
     <prop name="Location">10 790</prop>
    </prop>
   </properties>
  </shape>
  <shape Name="childrenFrame" shapeType="FRAME" layerId="0">
   <properties>
    <prop name="serialId">48</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">10 352</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">{0,0,0}</prop>
    <prop name="TabOrder">89</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">-1 55</prop>
    <prop name="maximumSize">-1 55</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,0]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Geometry">1.390476190476186 0 0 0.6923076923076923 -4.904761904761864 142.3076923076923</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Text">
     <prop name="en_US.utf8">Children</prop>
     <prop name="en_US.iso88591">Children</prop>
    </prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">10 352</prop>
    <prop name="Size">631 79</prop>
   </properties>
  </shape>
  <shape Name="deviceTypeLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">57</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">19 88</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">96</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">70 23</prop>
    <prop name="maximumSize">70 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Expanding" horizontal="Fixed"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">19 88</prop>
    <prop name="Size">70 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Type:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="deviceModelLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">59</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">19 117</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">98</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">70 23</prop>
    <prop name="maximumSize">70 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Expanding" horizontal="Fixed"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">19 117</prop>
    <prop name="Size">70 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Model:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="deviceCommentLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">60</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">19 347</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">99</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">70 23</prop>
    <prop name="maximumSize">70 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">19 347</prop>
    <prop name="Size">70 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Comment:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="deviceNameLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">63</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">19 146</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">102</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">70 23</prop>
    <prop name="maximumSize">70 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Expanding" horizontal="Fixed"/>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">19 146</prop>
    <prop name="Size">70 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Name:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="seqNumberLabel1" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">64</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">165.9999999999999 -257</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">103</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">100 -1</prop>
    <prop name="maximumSize">100 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">211 146</prop>
    <prop name="Size">100 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Seq. number:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="fixedLabel2" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">65</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">407 -249</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">104</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">150 23</prop>
    <prop name="maximumSize">150 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">429 146</prop>
    <prop name="Size">150 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Second name part:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="changingLabel2" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">66</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">505.5454545454604 -257</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">105</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">621 146</prop>
    <prop name="Size">255 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Seq. number:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="positionLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">67</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">462 -343</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">106</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">60 23</prop>
    <prop name="maximumSize">60 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">456 88</prop>
    <prop name="Size">60 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Position:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="widthLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">68</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">462 -310</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">107</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">60 23</prop>
    <prop name="maximumSize">60 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">456 117</prop>
    <prop name="Size">60 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Width:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="toLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">69</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">159 -192</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">108</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="maximumSize">47 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">211 203</prop>
    <prop name="Size">47 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">To:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="changingDigitsLabel1" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">70</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">200 -146.0000000000175</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">109</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="maximumSize">47 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">211 232</prop>
    <prop name="Size">47 22</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Digits:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="toLabel2" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">71</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">569 -192</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">110</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">47 -1</prop>
    <prop name="maximumSize">47 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">621 203</prop>
    <prop name="Size">47 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">To:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="changingDigitsLabel2" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">72</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">609.9999999999999 -146.0000000000175</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">111</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">47 -1</prop>
    <prop name="maximumSize">47 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">621 232</prop>
    <prop name="Size">47 22</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Digits:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="plusLabel1" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">73</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">120 -150.1111111111111</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">112</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="maximumSize">30 23</prop>
    <prop name="layoutAlignment">AlignTop</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">175 175</prop>
    <prop name="Size">30 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">+</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="plusLabel2" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">74</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">338 -150.1111111111111</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">113</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="maximumSize">30 23</prop>
    <prop name="layoutAlignment">AlignTop</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">393 175</prop>
    <prop name="Size">30 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">+</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="fromLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">75</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">200 -203.0000000000179</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">114</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="maximumSize">47 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">211 175</prop>
    <prop name="Size">47 22</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">From:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="plusLabel3" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">76</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">530 -150.1111111111111</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">115</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="maximumSize">30 23</prop>
    <prop name="layoutAlignment">AlignTop</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">585 175</prop>
    <prop name="Size">30 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">+</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="fromLabel2" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">77</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">610 -203.0000000000179</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">116</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">47 -1</prop>
    <prop name="maximumSize">47 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">621 175</prop>
    <prop name="Size">47 22</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">From:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="addressLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">79</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">19 289</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">117</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">70 23</prop>
    <prop name="maximumSize">70 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">19 289</prop>
    <prop name="Size">70 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Address:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="AddressTypeSelector" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">80</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">95 294</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">118</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">220 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="MinimumExpanding"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">95 289</prop>
    <prop name="Size">220 23</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
    this.appendItem(fwDevice_ADDRESS_NONE);
    this.appendItem(fwDevice_ADDRESS_DEFAULT);
}
]]></script>
   </events>
  </shape>
  <shape Name="alarmLabel" shapeType="TEXT_EDIT" layerId="0">
   <properties>
    <prop name="serialId">81</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">19 318</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">119</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">70 23</prop>
    <prop name="maximumSize">70 23</prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">19 318</prop>
    <prop name="Size">70 23</prop>
    <extended>
     <prop type="CHAR_STRING" name="text">Alarms:</prop>
     <prop type="ENUM" name="contextMenuPolicy">0</prop>
     <prop type="ENUM" name="frameShadow">48</prop>
     <prop type="ENUM" name="frameShape">0</prop>
     <prop type="BOOL" name="undoRedoEnabled">False</prop>
     <prop type="BOOL" name="readOnly">True</prop>
     <prop type="ENUM" name="inputMethodHints">0</prop>
     <prop type="ENUM" name="horizontalScrollBarPolicy">1</prop>
     <prop type="ENUM" name="verticalScrollBarPolicy">1</prop>
    </extended>
   </properties>
  </shape>
  <shape Name="AlarmsTypeSelector" shapeType="COMBO_BOX" layerId="0">
   <properties>
    <prop name="serialId">82</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">95 318</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">120</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">160 -1</prop>
    <prop name="maximumSize">-1 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="MinimumExpanding"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">95 318</prop>
    <prop name="Size">160 23</prop>
    <prop name="Listitems"/>
    <prop name="Editable">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
    this.appendItem(fwDevice_ALERT_NONE);
    this.appendItem(fwDevice_ALERT_DEFAULT);
}
]]></script>
   </events>
  </shape>
  <shape Name="SPACER2" shapeType="SPACER" layerId="0">
   <properties>
    <prop name="serialId">89</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">336 447</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{255,255,255}</prop>
    <prop name="TabOrder">125</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Ignored" horizontal="Expanding"/>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Location">336 447</prop>
    <prop name="Size">292 25</prop>
    <prop name="Orientation">horizontal</prop>
   </properties>
  </shape>
  <shape Name="SPACER5" shapeType="SPACER" layerId="0">
   <properties>
    <prop name="serialId">92</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">175 146</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{255,255,255}</prop>
    <prop name="TabOrder">128</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">25 23</prop>
    <prop name="maximumSize">25 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Expanding"/>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Location">175 146</prop>
    <prop name="Size">25 23</prop>
    <prop name="Orientation">horizontal</prop>
   </properties>
  </shape>
  <shape Name="SPACER6" shapeType="SPACER" layerId="0">
   <properties>
    <prop name="serialId">93</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">393 146</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{255,255,255}</prop>
    <prop name="TabOrder">129</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">25 23</prop>
    <prop name="maximumSize">25 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Expanding"/>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Location">393 146</prop>
    <prop name="Size">25 23</prop>
    <prop name="Orientation">horizontal</prop>
   </properties>
  </shape>
  <shape Name="SPACER7" shapeType="SPACER" layerId="0">
   <properties>
    <prop name="serialId">94</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">585 146</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{255,255,255}</prop>
    <prop name="TabOrder">130</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="minimumSize">25 23</prop>
    <prop name="maximumSize">30 23</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Preferred"/>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Location">585 146</prop>
    <prop name="Size">30 23</prop>
    <prop name="Orientation">horizontal</prop>
   </properties>
  </shape>
  <shape Name="SPACER8" shapeType="SPACER" layerId="0">
   <properties>
    <prop name="serialId">96</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">317 146</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{255,255,255}</prop>
    <prop name="TabOrder">131</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Ignored" horizontal="Expanding"/>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Location">317 146</prop>
    <prop name="Size">70 23</prop>
    <prop name="Orientation">horizontal</prop>
   </properties>
  </shape>
  <reference parentSerial="38" Name="PANEL_REF1" referenceId="35">
   <properties>
    <prop name="FileName">objects/fwGeneral/fwResizableIcon.pnl</prop>
    <prop name="Location">578 332</prop>
    <prop name="Geometry">0.9876717233118367 0 0 1.024433776137718 132.3448337296278 -51.51009338251188</prop>
    <prop name="TabOrder">138</prop>
    <prop name="minimumSize">15 15</prop>
    <prop name="maximumSize">15 15</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Fixed"/>
    </prop>
    <prop name="layoutAlignment">AlignTrailing|AlignBottom</prop>
   </properties>
  </reference>
  <shape Name="SPACER11" shapeType="SPACER" layerId="0">
   <properties>
    <prop name="serialId">110</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">116 4</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">{255,255,255}</prop>
    <prop name="TabOrder">138</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
    </prop>
    <prop name="TransparentForMouse">True</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Ignored" horizontal="Expanding"/>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Location">116 4</prop>
    <prop name="Size">738 27</prop>
    <prop name="Orientation">horizontal</prop>
   </properties>
  </shape>
  <shape Name="deviceNameText" shapeType="TEXT_FIELD" layerId="1">
   <properties>
    <prop name="serialId">49</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">-0.2642825117823454 230.3636363636364</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">3</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="layoutAlignment">AlignTop</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">19 260</prop>
    <prop name="Size">857 23</prop>
    <prop name="BorderStyle">Normal</prop>
    <prop name="Editable">True</prop>
    <prop name="ClearButtonEnabled">False</prop>
    <prop name="TextFormat">[0s,,,AlignLeft]</prop>
    <prop name="ulcClientSideWidget">False</prop>
   </properties>
   <events>
    <script name="Initialize" isEscaped="1"><![CDATA[main()
{
	
}
]]></script>
    <script name="KeyboardFocusOut" isEscaped="1"><![CDATA[main()
{
    if (this.text == &quot;&quot;) this.text = DEVICE_NAME_MESSAGE;
}
]]></script>
    <script name="KeyboardFocusIn" isEscaped="1"><![CDATA[main()
{
    if (this.text == DEVICE_NAME_MESSAGE) this.text = &quot;&quot;;
}
]]></script>
   </events>
  </shape>
  <shape Name="RECTANGLE1" shapeType="RECTANGLE" layerId="1">
   <properties>
    <prop name="serialId">84</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">18 75</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">{0,0,0}</prop>
    <prop name="BackColor">_Transparent</prop>
    <prop name="TabOrder">121</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Preferred"/>
    </prop>
    <prop name="layoutAlignment">AlignNone</prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinMiter,CapButt,1]</prop>
    <prop name="BorderZoomable">False</prop>
    <prop name="BorderScalable">False</prop>
    <prop name="FillType">[solid]</prop>
    <prop name="Geometry">1.410628019323668 0 0 0.8879056047197701 -16.39130434782602 11.40707964601724</prop>
    <prop name="BorderStyle">3D</prop>
    <prop name="Location">18 75</prop>
    <prop name="Size">622 339.9999999999999</prop>
    <prop name="CornerRadius">0</prop>
    <prop name="Transformable">True</prop>
   </properties>
  </shape>
  <shape Name="modeTab" shapeType="TAB" layerId="2">
   <properties>
    <prop name="serialId">0</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">9 41.00000000000014</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_3DText</prop>
    <prop name="BackColor">_3DFace</prop>
    <prop name="TabOrder">52</prop>
    <prop name="ToolTipText">
     <prop name="en_US.utf8"></prop>
     <prop name="en_US.iso88591"></prop>
    </prop>
    <prop name="minimumSize">220 -1</prop>
    <prop name="maximumSize">220 -1</prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Expanding"/>
    </prop>
    <prop name="layoutAlignment">AlignLeft|AlignLeading</prop>
    <prop name="snapMode">Point</prop>
    <prop name="Font">
     <prop name="en_US.utf8">Arial,-1,13,5,50,0,0,0,0,0</prop>
     <prop name="en_US.iso88591">Arial,-1,13,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Location">9 41</prop>
    <prop name="Size">220 31</prop>
    <prop name="TabBarAutoHide">False</prop>
    <prop name="Page">
     <prop name="Name">single</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Single device</prop>
      <prop name="en_US.iso88591">Single device</prop>
     </prop>
     <prop name="Panel"></prop>
    </prop>
    <prop name="Page">
     <prop name="Name">multiple</prop>
     <prop name="Label">
      <prop name="en_US.utf8">Multiple devices</prop>
      <prop name="en_US.iso88591">Multiple devices</prop>
     </prop>
     <prop name="Panel"></prop>
    </prop>
   </properties>
   <events>
    <script name="SelectionChanged" isEscaped="1"><![CDATA[main()
{
    switch (this.activeRegister()) {
        case SINGLE_CREATION_MODE:
            g_iMode = SINGLE_CREATION_MODE;
            showMultipleControls(FALSE);
            break;
        case MULTIPLE_CREATION_MODE:
            g_iMode = MULTIPLE_CREATION_MODE;
            showMultipleControls(TRUE);
            break;
        default:
            break;
    }

    // in case the model was changed
    updateDefaultName();
}
]]></script>
   </events>
  </shape>
 </shapes>
 <groups>
  <layout parentSerial="39" Name="LAYOUT_GROUP2" serial="2">
   <properties>
    <prop idx="0" name="shapeSerial">0</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
    <prop name="layoutSpacing">0</prop>
   </properties>
  </layout>
  <layout parentSerial="30" Name="LAYOUT_GROUP3" serial="3">
   <properties>
    <prop idx="0" name="shapeSerial">57</prop>
    <prop idx="1" name="shapeSerial">6</prop>
    <prop idx="2" name="shapeSerial">67</prop>
    <prop idx="3" name="shapeSerial">8</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="30" Name="LAYOUT_GROUP4" serial="4">
   <properties>
    <prop idx="0" name="shapeSerial">59</prop>
    <prop idx="1" name="shapeSerial">7</prop>
    <prop idx="2" name="shapeSerial">68</prop>
    <prop idx="3" name="shapeSerial">25</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="13" Name="LAYOUT_GROUP6" serial="6">
   <properties>
    <prop idx="0" name="shapeSerial">77</prop>
    <prop idx="1" name="shapeSerial">19</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="13" Name="LAYOUT_GROUP7" serial="7">
   <properties>
    <prop idx="0" name="shapeSerial">71</prop>
    <prop idx="1" name="shapeSerial">18</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="13" Name="LAYOUT_GROUP8" serial="8">
   <properties>
    <prop idx="0" name="shapeSerial">72</prop>
    <prop idx="1" name="shapeSerial">17</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="12" Name="LAYOUT_GROUP9" serial="9">
   <properties>
    <prop idx="0" name="shapeSerial">70</prop>
    <prop idx="1" name="shapeSerial">21</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="12" Name="LAYOUT_GROUP10" serial="10">
   <properties>
    <prop idx="0" name="shapeSerial">69</prop>
    <prop idx="1" name="shapeSerial">22</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="12" Name="LAYOUT_GROUP11" serial="11">
   <properties>
    <prop idx="0" name="shapeSerial">75</prop>
    <prop idx="1" name="shapeSerial">23</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="12" Name="LAYOUT_GROUP30" serial="26">
   <properties>
    <prop idx="1" name="shapeSerial">96</prop>
    <prop idx="0" name="shapeSerial">64</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="29" Name="LAYOUT_GROUP12" serial="12">
   <properties>
    <prop idx="1" name="groupSerial">11</prop>
    <prop idx="2" name="groupSerial">10</prop>
    <prop idx="3" name="groupSerial">9</prop>
    <prop idx="0" name="groupSerial">26</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
   </properties>
  </layout>
  <layout parentSerial="29" Name="LAYOUT_GROUP13" serial="13">
   <properties>
    <prop idx="0" name="shapeSerial">66</prop>
    <prop idx="3" name="groupSerial">8</prop>
    <prop idx="2" name="groupSerial">7</prop>
    <prop idx="1" name="groupSerial">6</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
   </properties>
  </layout>
  <layout parentSerial="30" Name="LAYOUT_GROUP15" serial="15">
   <properties>
    <prop idx="0" name="shapeSerial">79</prop>
    <prop idx="1" name="shapeSerial">80</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="30" Name="LAYOUT_GROUP16" serial="16">
   <properties>
    <prop idx="0" name="shapeSerial">81</prop>
    <prop idx="1" name="shapeSerial">82</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="30" Name="LAYOUT_GROUP17" serial="17">
   <properties>
    <prop idx="0" name="shapeSerial">60</prop>
    <prop idx="1" name="shapeSerial">9</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="39" Name="LAYOUT_GROUP19" serial="19">
   <properties>
    <prop name="shapeSerial">48</prop>
    <prop idx="1" name="shapeSerial">4</prop>
    <prop idx="3" name="shapeSerial">5</prop>
    <prop idx="4" name="shapeSerial">13</prop>
    <prop idx="2" name="shapeSerial">14</prop>
    <prop idx="0" name="shapeSerial">15</prop>
    <prop name="isContainerShape">True</prop>
    <prop name="layoutType">HBox</prop>
    <prop name="layoutLeftMargin">9</prop>
    <prop name="layoutRightMargin">0</prop>
    <prop name="layoutTopMargin">0</prop>
    <prop name="layoutBottomMargin">0</prop>
    <prop name="layoutSpacing">6</prop>
   </properties>
  </layout>
  <layout parentSerial="29" Name="LAYOUT_GROUP27" serial="23">
   <properties>
    <prop idx="1" name="shapeSerial">24</prop>
    <prop idx="0" name="shapeSerial">63</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
   </properties>
  </layout>
  <layout parentSerial="29" Name="LAYOUT_GROUP28" serial="24">
   <properties>
    <prop idx="0" name="shapeSerial">92</prop>
    <prop idx="1" name="shapeSerial">73</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
   </properties>
  </layout>
  <layout parentSerial="29" Name="LAYOUT_GROUP29" serial="25">
   <properties>
    <prop idx="0" name="shapeSerial">93</prop>
    <prop idx="1" name="shapeSerial">74</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
   </properties>
  </layout>
  <layout parentSerial="29" Name="LAYOUT_GROUP31" serial="27">
   <properties>
    <prop idx="1" name="shapeSerial">20</prop>
    <prop idx="0" name="shapeSerial">65</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
   </properties>
  </layout>
  <layout parentSerial="29" Name="LAYOUT_GROUP32" serial="28">
   <properties>
    <prop idx="0" name="shapeSerial">94</prop>
    <prop idx="1" name="shapeSerial">76</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
   </properties>
  </layout>
  <layout parentSerial="30" Name="LAYOUT_GROUP33" serial="29">
   <properties>
    <prop idx="2" name="groupSerial">12</prop>
    <prop idx="6" name="groupSerial">13</prop>
    <prop idx="0" name="groupSerial">23</prop>
    <prop idx="1" name="groupSerial">24</prop>
    <prop idx="3" name="groupSerial">25</prop>
    <prop idx="4" name="groupSerial">27</prop>
    <prop idx="5" name="groupSerial">28</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
   </properties>
  </layout>
  <layout parentSerial="39" Name="LAYOUT_GROUP34" serial="30">
   <properties>
    <prop name="shapeSerial">84</prop>
    <prop idx="3" name="shapeSerial">49</prop>
    <prop idx="0" name="groupSerial">3</prop>
    <prop idx="1" name="groupSerial">4</prop>
    <prop idx="4" name="groupSerial">15</prop>
    <prop idx="5" name="groupSerial">16</prop>
    <prop idx="6" name="groupSerial">17</prop>
    <prop idx="2" name="groupSerial">29</prop>
    <prop name="isContainerShape">True</prop>
    <prop name="layoutType">VBox</prop>
   </properties>
  </layout>
  <layout parentSerial="-1" Name="LAYOUT_GROUP38" serial="36">
   <properties>
    <prop name="shapeSerial">2</prop>
    <prop idx="0" name="shapeSerial">3</prop>
    <prop idx="1" name="shapeSerial">110</prop>
    <prop idx="2" name="groupSerial">0</prop>
    <prop name="isContainerShape">True</prop>
    <prop name="layoutType">HBox</prop>
    <prop name="layoutLeftMargin">9</prop>
    <prop name="layoutRightMargin">9</prop>
    <prop name="layoutTopMargin">3</prop>
    <prop name="layoutBottomMargin">3</prop>
   </properties>
  </layout>
  <layout parentSerial="38" Name="LAYOUT_GROUP39" serial="37">
   <properties>
    <prop idx="0" name="shapeSerial">47</prop>
    <prop idx="1" name="shapeSerial">46</prop>
    <prop idx="2" name="shapeSerial">89</prop>
    <prop idx="3" name="shapeSerial">12</prop>
    <prop idx="4" name="shapeSerial">10</prop>
    <prop idx="5" name="shapeSerial">11</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">HBox</prop>
    <prop name="layoutLeftMargin">9</prop>
    <prop name="layoutRightMargin">9</prop>
    <prop name="layoutTopMargin">0</prop>
    <prop name="layoutBottomMargin">0</prop>
   </properties>
  </layout>
  <layout parentSerial="-1" Name="LAYOUT_GROUP40" serial="38">
   <properties>
    <prop idx="0" name="groupSerial">37</prop>
    <prop idx="1" name="groupSerial">35</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
    <prop name="layoutSpacing">0</prop>
   </properties>
  </layout>
  <layout parentSerial="-1" Name="LAYOUT_GROUP41" serial="39">
   <properties>
    <prop idx="2" name="groupSerial">19</prop>
    <prop idx="1" name="groupSerial">30</prop>
    <prop idx="0" name="groupSerial">2</prop>
    <prop name="isContainerShape">False</prop>
    <prop name="layoutType">VBox</prop>
    <prop name="layoutLeftMargin">9</prop>
    <prop name="layoutRightMargin">9</prop>
    <prop name="layoutTopMargin">0</prop>
    <prop name="layoutBottomMargin">0</prop>
   </properties>
  </layout>
 </groups>
</panel>
